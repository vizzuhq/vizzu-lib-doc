{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vizzu - Library for animated data visualizations and data stories. Documentation \u00b7 Examples \u00b7 Code reference \u00b7 Repository Vizzu About The Project Vizzu is a free, open-source Javascript/C++ library utilizing a generic dataviz engine that generates many types of charts and seamlessly animates between them. It can be used to create static charts but more importantly, it is designed for building animated data stories and interactive explorers as Vizzu enables showing different perspectives of the data that the viewers can easily follow due to the animation. Main features: Designed with animation in focus; Defaults based on data visualization guidelines; Automatic data aggregation & data filtering; HTML5 canvas rendering; Written in C++ compiled to WebAssembly; Dependency-free. Installation Install via npm : npm install vizzu Or use it from CDN: <html> <head> <script type=\"module\"> import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js'; </script> </head> </html> Usage Create a placeholder element that will contain the rendered chart: <html> <body> <div id=\"myVizzu\" style=\"width:800px; height:480px;\"> </div> </body> </html> Create a simple bar chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js'; let data = { series: [{ name: 'Foo', values: ['Alice', 'Bob', 'Ted'] }, { name: 'Bar', values: [15, 32, 12] }, { name: 'Baz', values: [5, 3, 2] }] }; let chart = new Vizzu('myVizzu', { data }); chart.animate({ x: 'Foo', y: 'Bar' }); Then turn it into a scatter plot: chart.animate({ color: 'Foo', x: 'Baz', geometry: 'circle' }); Try it! FAQ You can find answers to the most frequently asked questions about using the library in our FAQ . Projects List of external projects (extensions, bindings, templates, etc) for Vizzu: Projects . Roadmap We have a comprehensive list of features we plan to implement, on our Roadmap . Contributing We welcome contributions to the project, visit our wiki page for further info. Contact Join our Slack: vizzu-community.slack.com Drop us a line at hello@vizzuhq.com Follow us on Twitter: https://twitter.com/VizzuHQ License Copyright \u00a9 2022 Vizzu Kft. . Released under the Apache 2.0 License .","title":"Home"},{"location":"#vizzu","text":"","title":"Vizzu"},{"location":"#about-the-project","text":"Vizzu is a free, open-source Javascript/C++ library utilizing a generic dataviz engine that generates many types of charts and seamlessly animates between them. It can be used to create static charts but more importantly, it is designed for building animated data stories and interactive explorers as Vizzu enables showing different perspectives of the data that the viewers can easily follow due to the animation. Main features: Designed with animation in focus; Defaults based on data visualization guidelines; Automatic data aggregation & data filtering; HTML5 canvas rendering; Written in C++ compiled to WebAssembly; Dependency-free.","title":"About The Project"},{"location":"#installation","text":"Install via npm : npm install vizzu Or use it from CDN: <html> <head> <script type=\"module\"> import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js'; </script> </head> </html>","title":"Installation"},{"location":"#usage","text":"Create a placeholder element that will contain the rendered chart: <html> <body> <div id=\"myVizzu\" style=\"width:800px; height:480px;\"> </div> </body> </html> Create a simple bar chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js'; let data = { series: [{ name: 'Foo', values: ['Alice', 'Bob', 'Ted'] }, { name: 'Bar', values: [15, 32, 12] }, { name: 'Baz', values: [5, 3, 2] }] }; let chart = new Vizzu('myVizzu', { data }); chart.animate({ x: 'Foo', y: 'Bar' }); Then turn it into a scatter plot: chart.animate({ color: 'Foo', x: 'Baz', geometry: 'circle' }); Try it!","title":"Usage"},{"location":"#faq","text":"You can find answers to the most frequently asked questions about using the library in our FAQ .","title":"FAQ"},{"location":"#projects","text":"List of external projects (extensions, bindings, templates, etc) for Vizzu: Projects .","title":"Projects"},{"location":"#roadmap","text":"We have a comprehensive list of features we plan to implement, on our Roadmap .","title":"Roadmap"},{"location":"#contributing","text":"We welcome contributions to the project, visit our wiki page for further info.","title":"Contributing"},{"location":"#contact","text":"Join our Slack: vizzu-community.slack.com Drop us a line at hello@vizzuhq.com Follow us on Twitter: https://twitter.com/VizzuHQ","title":"Contact"},{"location":"#license","text":"Copyright \u00a9 2022 Vizzu Kft. . Released under the Apache 2.0 License .","title":"License"},{"location":"LICENSE/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"installation/","text":"Installation Install via npm : npm install vizzu Or use it from CDN : <html> <head> <script type=\"module\"> import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js'; </script> </head> </html>","title":"Installation"},{"location":"installation/#installation","text":"Install via npm : npm install vizzu Or use it from CDN : <html> <head> <script type=\"module\"> import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js'; </script> </head> </html>","title":"Installation"},{"location":"examples/","text":"Examples The Vizzu examples are grouped into four categories. Preset charts : Examples of the well-known chart types Vizzu offers a shorthand for, as described in the Chart presets chapter of the Tutorial. Animated charts : Simple animations from one well-known chart to another to provide you with inspiration and reusable code for some transitions. Static charts : Examples of well-known chart types configured with the original chart type-agnostic syntax of Vizzu .","title":"Examples"},{"location":"examples/#examples","text":"The Vizzu examples are grouped into four categories. Preset charts : Examples of the well-known chart types Vizzu offers a shorthand for, as described in the Chart presets chapter of the Tutorial. Animated charts : Simple animations from one well-known chart to another to provide you with inspiration and reusable code for some transitions. Static charts : Examples of well-known chart types configured with the original chart type-agnostic syntax of Vizzu .","title":"Examples"},{"location":"examples/animated/","text":"Animated charts","title":"Animated charts"},{"location":"examples/animated/#animated-charts","text":"","title":"Animated charts"},{"location":"examples/animated/composition_comparison_pie_coxcomb_column_2dis_2con/","text":"Pie to Coxcomb Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/infinite_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Value 1\", \"Joy factors\" ], \"color\": \"Joy factors\", \"label\": \"Value 1\" }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\" } }); chart.animate({ config: { \"channels\": { \"x\": [ \"Value 1\", \"Joy factors\", \"Region\", \"Country code\" ], \"label\": null } } }, \"500ms\"); chart.animate({ config: { \"channels\": { \"x\": [ \"Value 1\", \"Joy factors\", \"Region\", \"Country code\" ], \"y\": { \"set\": \"Value 3\", \"range\": { \"min\": \"-60%\" } } }, \"title\": \"Coxcomb Chart\" } });","title":"Pie  to Coxcomb"},{"location":"examples/animated/composition_comparison_pie_coxcomb_column_2dis_2con/#pie-to-coxcomb","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/infinite_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Value 1\", \"Joy factors\" ], \"color\": \"Joy factors\", \"label\": \"Value 1\" }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\" } }); chart.animate({ config: { \"channels\": { \"x\": [ \"Value 1\", \"Joy factors\", \"Region\", \"Country code\" ], \"label\": null } } }, \"500ms\"); chart.animate({ config: { \"channels\": { \"x\": [ \"Value 1\", \"Joy factors\", \"Region\", \"Country code\" ], \"y\": { \"set\": \"Value 3\", \"range\": { \"min\": \"-60%\" } } }, \"title\": \"Coxcomb Chart\" } });","title":"Pie  to Coxcomb"},{"location":"examples/animated/composition_comparison_waterfall_column_2dis_1con/","text":"Waterfall to Column Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Year\", \"Value 5 (+/-)\" ], \"color\": { \"set\": [ \"Value 5 (+/-)\" ], \"range\": { \"min\": \"-45\", \"max\": \"45\" } }, \"noop\": \"Country\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Waterfall Chart\", \"legend\": \"color\" }, style: { \"plot\": { \"marker\": { \"colorGradient\": \"#3d51b8 0,#6389ec 0.15,#9fbffa 0.35,#d5d7d9 0.5,#f4b096 0.65,#e36c56 0.85,#ac1727 1\", \"label\": { \"position\": \"top\" } } } } }); chart.animate({ config: { \"channels\": { \"y\": \"Value 5 (+/-)\" }, \"title\": \"Column Chart\" } });","title":"Waterfall  to Column"},{"location":"examples/animated/composition_comparison_waterfall_column_2dis_1con/#waterfall-to-column","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Year\", \"Value 5 (+/-)\" ], \"color\": { \"set\": [ \"Value 5 (+/-)\" ], \"range\": { \"min\": \"-45\", \"max\": \"45\" } }, \"noop\": \"Country\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Waterfall Chart\", \"legend\": \"color\" }, style: { \"plot\": { \"marker\": { \"colorGradient\": \"#3d51b8 0,#6389ec 0.15,#9fbffa 0.35,#d5d7d9 0.5,#f4b096 0.65,#e36c56 0.85,#ac1727 1\", \"label\": { \"position\": \"top\" } } } } }); chart.animate({ config: { \"channels\": { \"y\": \"Value 5 (+/-)\" }, \"title\": \"Column Chart\" } });","title":"Waterfall  to Column"},{"location":"examples/animated/composition_percentage_area_stream_3dis_1con/","text":"Stacked Area to Split Area Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_14 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_14 }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Value 2 (+)\", \"Country\" ], \"color\": \"Country\" }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\" } }); chart.animate({ config: { \"title\": \"100% Stacked Area Chart\", \"align\": \"stretch\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"100%\" } } }, \"title\": \"Split Area Chart\", \"align\": \"min\", \"split\": true } });","title":"Stacked Area  to Split Area"},{"location":"examples/animated/composition_percentage_area_stream_3dis_1con/#stacked-area-to-split-area","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_14 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_14 }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Value 2 (+)\", \"Country\" ], \"color\": \"Country\" }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\" } }); chart.animate({ config: { \"title\": \"100% Stacked Area Chart\", \"align\": \"stretch\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"100%\" } } }, \"title\": \"Split Area Chart\", \"align\": \"min\", \"split\": true } });","title":"Stacked Area  to Split Area"},{"location":"examples/animated/composition_percentage_column_3dis_1con/","text":"Stacked Column to Split Column Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_14 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_14 }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Value 2 (+)\", \"Country\" ], \"color\": \"Country\" }, \"title\": \"Stacked Column Chart\" } }); chart.animate({ config: { \"title\": \"100% Stacked Column Chart\", \"align\": \"stretch\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"100%\" } } }, \"title\": \"Split Column Chart\", \"align\": \"min\", \"split\": true } });","title":"Stacked Column  to Split Column"},{"location":"examples/animated/composition_percentage_column_3dis_1con/#stacked-column-to-split-column","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_14 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_14 }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Value 2 (+)\", \"Country\" ], \"color\": \"Country\" }, \"title\": \"Stacked Column Chart\" } }); chart.animate({ config: { \"title\": \"100% Stacked Column Chart\", \"align\": \"stretch\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"100%\" } } }, \"title\": \"Split Column Chart\", \"align\": \"min\", \"split\": true } });","title":"Stacked Column  to Split Column"},{"location":"examples/animated/composition_percentage_column_stream_3dis_1con/","text":"Column to 100% Column Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_14 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_14 }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Value 2 (+)\", \"Country\" ], \"noop\": \"Country\" }, \"title\": \"Column Chart\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"100%\" } }, \"color\": \"Country\", \"noop\": null }, \"title\": \"Split Column Chart\", \"split\": true } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"auto\" } } }, \"title\": \"Stacked Column Chart\", \"split\": false } }); chart.animate({ config: { \"title\": \"100% Column Chart\", \"align\": \"stretch\" } });","title":"Column  to 100% Column"},{"location":"examples/animated/composition_percentage_column_stream_3dis_1con/#column-to-100-column","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_14 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_14 }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Value 2 (+)\", \"Country\" ], \"noop\": \"Country\" }, \"title\": \"Column Chart\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"100%\" } }, \"color\": \"Country\", \"noop\": null }, \"title\": \"Split Column Chart\", \"split\": true } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"auto\" } } }, \"title\": \"Stacked Column Chart\", \"split\": false } }); chart.animate({ config: { \"title\": \"100% Column Chart\", \"align\": \"stretch\" } });","title":"Column  to 100% Column"},{"location":"examples/animated/distribution_relationship_dotplot_dotplot/","text":"Distribution Plot to Scatter Plot Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Joy factors\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"noop\": \"Country_code\" }, \"title\": \"Distribution Plot\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 6 (+/-)\" ], \"label\": \"Country_code\" }, \"title\": \"Scatter Plot\" } });","title":"Distribution Plot to Scatter Plot"},{"location":"examples/animated/distribution_relationship_dotplot_dotplot/#distribution-plot-to-scatter-plot","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Joy factors\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"noop\": \"Country_code\" }, \"title\": \"Distribution Plot\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 6 (+/-)\" ], \"label\": \"Country_code\" }, \"title\": \"Scatter Plot\" } });","title":"Distribution Plot to Scatter Plot"},{"location":"examples/animated/drill_aggreg_improve_line/","text":"Single Line to Line I Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 3 (+)\" }, \"title\": \"Single Line Chart\", \"geometry\": \"line\" } }); chart.animate({ config: { \"channels\": { \"y\": [ \"Country\", \"Value 3 (+)\" ], \"color\": \"Country\" }, \"title\": \"Drill down\", \"geometry\": \"area\" } }); chart.animate({ config: { \"channels\": { \"y\": \"Value 3 (+)\" }, \"title\": \"Line Chart I\", \"geometry\": \"line\" } });","title":"Single Line  to Line  I"},{"location":"examples/animated/drill_aggreg_improve_line/#single-line-to-line-i","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 3 (+)\" }, \"title\": \"Single Line Chart\", \"geometry\": \"line\" } }); chart.animate({ config: { \"channels\": { \"y\": [ \"Country\", \"Value 3 (+)\" ], \"color\": \"Country\" }, \"title\": \"Drill down\", \"geometry\": \"area\" } }); chart.animate({ config: { \"channels\": { \"y\": \"Value 3 (+)\" }, \"title\": \"Line Chart I\", \"geometry\": \"line\" } });","title":"Single Line  to Line  I"},{"location":"examples/animated/drilldown_aggregate_line/","text":"Single Line to Line II Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": \"Value 3 (+)\", \"range\": { \"max\": \"6000000000\" } }, \"size\": \"Country\" }, \"title\": \"Single Line Chart\", \"geometry\": \"line\" } }); chart.animate({ config: { \"channels\": { \"color\": \"Country\", \"size\": null }, \"title\": \"Drill down\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"auto\" } } }, \"title\": \"Line Chart II\" } });","title":"Single Line  to Line  II"},{"location":"examples/animated/drilldown_aggregate_line/#single-line-to-line-ii","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": \"Value 3 (+)\", \"range\": { \"max\": \"6000000000\" } }, \"size\": \"Country\" }, \"title\": \"Single Line Chart\", \"geometry\": \"line\" } }); chart.animate({ config: { \"channels\": { \"color\": \"Country\", \"size\": null }, \"title\": \"Drill down\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"auto\" } } }, \"title\": \"Line Chart II\" } });","title":"Single Line  to Line  II"},{"location":"examples/animated/merge_split_area_stream_3dis_1con/","text":"Stacked Streamgraph to Split Area Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": [ \"Value 3 (+)\", \"Country\" ], \"color\": \"Country\" }, \"title\": \"Stacked Streamgraph\", \"geometry\": \"area\", \"align\": \"center\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"100%\" } } }, \"title\": \"Split Area Chart\", \"split\": true, \"align\": \"min\" } });","title":"Stacked Streamgraph to Split Area"},{"location":"examples/animated/merge_split_area_stream_3dis_1con/#stacked-streamgraph-to-split-area","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": [ \"Value 3 (+)\", \"Country\" ], \"color\": \"Country\" }, \"title\": \"Stacked Streamgraph\", \"geometry\": \"area\", \"align\": \"center\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"100%\" } } }, \"title\": \"Split Area Chart\", \"split\": true, \"align\": \"min\" } });","title":"Stacked Streamgraph to Split Area"},{"location":"examples/animated/merge_split_bar/","text":"Stacked Bar to Split Bar Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Value 3 (+)\", \"Country\" ], \"y\": [ \"Year\", \"Joy factors\" ], \"color\": \"Country\" }, \"title\": \"Stacked Bar Chart\" } }); chart.animate({ config: { \"title\": \"Split Bar Chart\", \"split\": true } });","title":"Stacked Bar  to Split Bar"},{"location":"examples/animated/merge_split_bar/#stacked-bar-to-split-bar","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Value 3 (+)\", \"Country\" ], \"y\": [ \"Year\", \"Joy factors\" ], \"color\": \"Country\" }, \"title\": \"Stacked Bar Chart\" } }); chart.animate({ config: { \"title\": \"Split Bar Chart\", \"split\": true } });","title":"Stacked Bar  to Split Bar"},{"location":"examples/animated/merge_split_radial_stacked_rectangle_2dis_1con/","text":"Radial Bar to Split Radial Bar Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": { \"set\": \"Year\", \"range\": { \"min\": \"-3\" } }, \"color\": \"Country\" }, \"title\": \"Radial Bar Chart\", \"coordSystem\": \"polar\" } }); chart.animate({ config: { \"title\": \"Split Radial Bar Chart\", \"split\": true } });","title":"Radial Bar  to Split Radial Bar"},{"location":"examples/animated/merge_split_radial_stacked_rectangle_2dis_1con/#radial-bar-to-split-radial-bar","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": { \"set\": \"Year\", \"range\": { \"min\": \"-3\" } }, \"color\": \"Country\" }, \"title\": \"Radial Bar Chart\", \"coordSystem\": \"polar\" } }); chart.animate({ config: { \"title\": \"Split Radial Bar Chart\", \"split\": true } });","title":"Radial Bar  to Split Radial Bar"},{"location":"examples/animated/orientation_circle/","text":"Dot Plot to Dot Plot with Other Orientation Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Joy factors\", \"lightness\": \"Joy factors\", \"noop\": \"Year\" }, \"title\": \"Dot Plot\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"noop\": \"Joy factors\" }, \"title\": \"Dot Plot with Other Orientation\" } });","title":"Dot Plot to Dot Plot with Other Orientation"},{"location":"examples/animated/orientation_circle/#dot-plot-to-dot-plot-with-other-orientation","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Joy factors\", \"lightness\": \"Joy factors\", \"noop\": \"Year\" }, \"title\": \"Dot Plot\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"noop\": \"Joy factors\" }, \"title\": \"Dot Plot with Other Orientation\" } });","title":"Dot Plot to Dot Plot with Other Orientation"},{"location":"examples/animated/orientation_dot_circle/","text":"Scatter Plot to Dot Plot Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\", \"noop\": \"Joy factors\", \"lightness\": \"Year\" }, \"title\": \"Scatter Plot\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Year\" }, \"title\": \"Dot Plot\", \"legend\": \"lightness\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\" }, \"title\": \"Scatter Plot\" } }); chart.animate({ config: { \"channels\": { \"y\": \"Joy factors\", \"noop\": null }, \"title\": \"Dot Plot\" } });","title":"Scatter Plot to Dot Plot"},{"location":"examples/animated/orientation_dot_circle/#scatter-plot-to-dot-plot","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\", \"noop\": \"Joy factors\", \"lightness\": \"Year\" }, \"title\": \"Scatter Plot\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Year\" }, \"title\": \"Dot Plot\", \"legend\": \"lightness\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Value 6 (+/-)\" }, \"title\": \"Scatter Plot\" } }); chart.animate({ config: { \"channels\": { \"y\": \"Joy factors\", \"noop\": null }, \"title\": \"Dot Plot\" } });","title":"Scatter Plot to Dot Plot"},{"location":"examples/animated/orientation_marimekko_rectangle_2dis_2con/","text":"Marimekko to Marimekko with Other Orientation Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": [ \"Joy factors\", \"Value 3 (+)\" ], \"color\": \"Joy factors\", \"label\": \"Country\", \"lightness\": \"Country\" }, \"title\": \"Marimekko Chart\", \"align\": \"stretch\", \"orientation\": \"horizontal\" } }); chart.animate({ config: { \"title\": \"Marimekko with Other Orientation\", \"orientation\": \"vertical\" } });","title":"Marimekko  to Marimekko with Other Orientation"},{"location":"examples/animated/orientation_marimekko_rectangle_2dis_2con/#marimekko-to-marimekko-with-other-orientation","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": [ \"Joy factors\", \"Value 3 (+)\" ], \"color\": \"Joy factors\", \"label\": \"Country\", \"lightness\": \"Country\" }, \"title\": \"Marimekko Chart\", \"align\": \"stretch\", \"orientation\": \"horizontal\" } }); chart.animate({ config: { \"title\": \"Marimekko with Other Orientation\", \"orientation\": \"vertical\" } });","title":"Marimekko  to Marimekko with Other Orientation"},{"location":"examples/animated/orientation_rectangle/","text":"Stacked Column to Bar Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/tutorial.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Timeseries\", \"y\": [ \"Values 1\", \"Categ. Parent\" ], \"color\": \"Categ. Parent\", \"label\": \"Values 1\" }, \"title\": \"Stacked Column Chart\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Values 1\", \"y\": \"Categ. Parent\" }, \"title\": \"Bar Chart\" } });","title":"Stacked Column  to Bar"},{"location":"examples/animated/orientation_rectangle/#stacked-column-to-bar","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/tutorial.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Timeseries\", \"y\": [ \"Values 1\", \"Categ. Parent\" ], \"color\": \"Categ. Parent\", \"label\": \"Values 1\" }, \"title\": \"Stacked Column Chart\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Values 1\", \"y\": \"Categ. Parent\" }, \"title\": \"Bar Chart\" } });","title":"Stacked Column  to Bar"},{"location":"examples/animated/pie_donut2_rectangle_1dis_1con/","text":"Pie to Donut Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 2 (+)\" ], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"min\": \"-200%\" } } }, \"title\": \"Donut Chart\" } });","title":"Pie  to Donut"},{"location":"examples/animated/pie_donut2_rectangle_1dis_1con/#pie-to-donut","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 2 (+)\" ], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"min\": \"-200%\" } } }, \"title\": \"Donut Chart\" } });","title":"Pie  to Donut"},{"location":"examples/animated/relationship_comparison_circle_2_bubble_plot/","text":"Bubble Plot to Bubble Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 6 (+/-)\" ], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\" }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": null, \"y\": null, \"size\": [ \"Value 2 (+)\", \"Country_code\" ] }, \"title\": \"Stacked Bubble Chart\" } }); chart.animate({ config: { \"channels\": { \"size\": \"Value 2 (+)\" }, \"title\": \"Bubble Chart\" } });","title":"Bubble Plot to Bubble"},{"location":"examples/animated/relationship_comparison_circle_2_bubble_plot/#bubble-plot-to-bubble","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 6 (+/-)\" ], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\" }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": null, \"y\": null, \"size\": [ \"Value 2 (+)\", \"Country_code\" ] }, \"title\": \"Stacked Bubble Chart\" } }); chart.animate({ config: { \"channels\": { \"size\": \"Value 2 (+)\" }, \"title\": \"Bubble Chart\" } });","title":"Bubble Plot to Bubble"},{"location":"examples/animated/relationship_total_bubble_plot_column/","text":"Bubble Plot to Bar Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 6 (+/-)\" ], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\" }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"y\": \"Joy factors\", \"x\": [ \"Value 2 (+)\", \"Country_code\" ], \"label\": null }, \"title\": \"Bar Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\" } } });","title":"Bubble Plot to Bar"},{"location":"examples/animated/relationship_total_bubble_plot_column/#bubble-plot-to-bar","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 6 (+/-)\" ], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\" }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"y\": \"Joy factors\", \"x\": [ \"Value 2 (+)\", \"Country_code\" ], \"label\": null }, \"title\": \"Bar Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\" } } });","title":"Bubble Plot to Bar"},{"location":"examples/animated/stack_group_area_line/","text":"Stacked Area to Line Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/tutorial.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Timeseries\", \"y\": { \"set\": [ \"Values 1\", \"Categ. Parent\" ], \"range\": { \"max\": \"400\" } }, \"label\": \"Values 1\", \"color\": \"Categ. Parent\" }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\" } }); chart.animate({ config: { \"channels\": { \"y\": \"Values 1\" }, \"title\": \"Line Chart\", \"geometry\": \"line\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"auto\" } } } } });","title":"Stacked Area  to Line"},{"location":"examples/animated/stack_group_area_line/#stacked-area-to-line","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/tutorial.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Timeseries\", \"y\": { \"set\": [ \"Values 1\", \"Categ. Parent\" ], \"range\": { \"max\": \"400\" } }, \"label\": \"Values 1\", \"color\": \"Categ. Parent\" }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\" } }); chart.animate({ config: { \"channels\": { \"y\": \"Values 1\" }, \"title\": \"Line Chart\", \"geometry\": \"line\" } }); chart.animate({ config: { \"channels\": { \"y\": { \"range\": { \"max\": \"auto\" } } } } });","title":"Stacked Area  to Line"},{"location":"examples/animated/stack_group_circle/","text":"Bubble to Stacked Bubble Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\" }, \"title\": \"Bubble Chart\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"size\": [ \"Value 2 (+)\", \"Country_code\" ] }, \"title\": \"Stacked Bubble Chart\" } });","title":"Bubble  to Stacked Bubble"},{"location":"examples/animated/stack_group_circle/#bubble-to-stacked-bubble","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Country_code\" }, \"title\": \"Bubble Chart\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"size\": [ \"Value 2 (+)\", \"Country_code\" ] }, \"title\": \"Stacked Bubble Chart\" } });","title":"Bubble  to Stacked Bubble"},{"location":"examples/animated/stack_group_treemap/","text":"Treemap to Stacked Treemap Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"size\": \"Value 2 (+)\", \"noop\": \"Country_code\", \"color\": \"Joy factors\", \"label\": \"Country_code\" }, \"title\": \"Treemap\" } }); chart.animate({ config: { \"channels\": { \"size\": [ \"Value 2 (+)\", \"Country_code\" ] }, \"title\": \"Stacked Treemap\" } });","title":"Treemap to Stacked Treemap"},{"location":"examples/animated/stack_group_treemap/#treemap-to-stacked-treemap","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"size\": \"Value 2 (+)\", \"noop\": \"Country_code\", \"color\": \"Joy factors\", \"label\": \"Country_code\" }, \"title\": \"Treemap\" } }); chart.animate({ config: { \"channels\": { \"size\": [ \"Value 2 (+)\", \"Country_code\" ] }, \"title\": \"Stacked Treemap\" } });","title":"Treemap to Stacked Treemap"},{"location":"examples/animated/total_element_bubble_2_bar/","text":"Stacked Bubble to Bar Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [ \"Country_code\", \"Value 2 (+)\" ] }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": [ \"Country_code\", \"Value 2 (+)\" ], \"y\": \"Joy factors\", \"label\": null, \"size\": null }, \"title\": \"Bar Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\" } } });","title":"Stacked Bubble  to Bar"},{"location":"examples/animated/total_element_bubble_2_bar/#stacked-bubble-to-bar","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [ \"Country_code\", \"Value 2 (+)\" ] }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": [ \"Country_code\", \"Value 2 (+)\" ], \"y\": \"Joy factors\", \"label\": null, \"size\": null }, \"title\": \"Bar Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\" } } });","title":"Stacked Bubble  to Bar"},{"location":"examples/animated/total_element_bubble_column/","text":"Stacked Bubble to Column Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [ \"Country_code\", \"Value 2 (+)\" ] }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Joy factors\", \"y\": [ \"Country_code\", \"Value 2 (+)\" ], \"label\": null, \"size\": null }, \"title\": \"Column Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\" } }); chart.animate({ config: { \"channels\": { \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\" } } });","title":"Stacked Bubble  to Column"},{"location":"examples/animated/total_element_bubble_column/#stacked-bubble-to-column","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"label\": \"Country_code\", \"size\": [ \"Country_code\", \"Value 2 (+)\" ] }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Joy factors\", \"y\": [ \"Country_code\", \"Value 2 (+)\" ], \"label\": null, \"size\": null }, \"title\": \"Column Chart\", \"geometry\": \"rectangle\", \"orientation\": \"vertical\" } }); chart.animate({ config: { \"channels\": { \"y\": \"Value 2 (+)\", \"label\": \"Value 2 (+)\" } } });","title":"Stacked Bubble  to Column"},{"location":"examples/animated/treemap_radial/","text":"Treemap to Radial Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Joy factors\" }, \"title\": \"Treemap\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": { \"set\": \"Joy factors\", \"range\": { \"min\": \"-30%\" } }, \"size\": null, \"label\": \"Value 2 (+)\" }, \"title\": \"Radial Chart\", \"coordSystem\": \"polar\" } });","title":"Treemap to Radial"},{"location":"examples/animated/treemap_radial/#treemap-to-radial","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"size\": \"Value 2 (+)\", \"label\": \"Joy factors\" }, \"title\": \"Treemap\" } }); chart.animate({ config: { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": { \"set\": \"Joy factors\", \"range\": { \"min\": \"-30%\" } }, \"size\": null, \"label\": \"Value 2 (+)\" }, \"title\": \"Radial Chart\", \"coordSystem\": \"polar\" } });","title":"Treemap to Radial"},{"location":"examples/animated/zoom_area/","text":"Stacked Area to Zoomed Stacked Area Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": [ \"Value 3 (+)\", \"Country_code\" ], \"color\": \"Country_code\" }, \"title\": \"Stacked Area\", \"geometry\": \"area\" } }); chart.animate({ data: { filter: record => data_6.filter(record) && record.Year < 12 && record.Year > 6 }, config: { \"title\": \"Zoomed Stacked Area\" } });","title":"Stacked Area to Zoomed Stacked Area"},{"location":"examples/animated/zoom_area/#stacked-area-to-zoomed-stacked-area","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": [ \"Value 3 (+)\", \"Country_code\" ], \"color\": \"Country_code\" }, \"title\": \"Stacked Area\", \"geometry\": \"area\" } }); chart.animate({ data: { filter: record => data_6.filter(record) && record.Year < 12 && record.Year > 6 }, config: { \"title\": \"Zoomed Stacked Area\" } });","title":"Stacked Area to Zoomed Stacked Area"},{"location":"examples/animated/zoom_area_polar/","text":"Polar Stacked Area to Zoomed Polar Stacked Area Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": [ \"Value 3 (+)\", \"Country_code\" ], \"color\": \"Country_code\" }, \"title\": \"Polar Stacked Area\", \"geometry\": \"area\", \"coordSystem\": \"polar\" } }); chart.animate({ data: { filter: record => data_6.filter(record) && record.Year < 12 && record.Year > 6 }, config: { \"title\": \"Zoomed Polar Stacked Area\" } });","title":"Polar Stacked Area to Zoomed Polar Stacked Area"},{"location":"examples/animated/zoom_area_polar/#polar-stacked-area-to-zoomed-polar-stacked-area","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": [ \"Value 3 (+)\", \"Country_code\" ], \"color\": \"Country_code\" }, \"title\": \"Polar Stacked Area\", \"geometry\": \"area\", \"coordSystem\": \"polar\" } }); chart.animate({ data: { filter: record => data_6.filter(record) && record.Year < 12 && record.Year > 6 }, config: { \"title\": \"Zoomed Polar Stacked Area\" } });","title":"Polar Stacked Area to Zoomed Polar Stacked Area"},{"location":"examples/animated/zoom_line/","text":"Line chart to Zoomed Line chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": \"Value 3 (+)\", \"color\": \"Country_code\" }, \"title\": \"Line chart\", \"geometry\": \"line\" } }); chart.animate({ data: { filter: record => data_6.filter(record) && record.Year < 8 && record.Year > 2 }, config: { \"title\": \"Zoomed Line chart\" } });","title":"Line chart to Zoomed Line chart"},{"location":"examples/animated/zoom_line/#line-chart-to-zoomed-line-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": \"Value 3 (+)\", \"color\": \"Country_code\" }, \"title\": \"Line chart\", \"geometry\": \"line\" } }); chart.animate({ data: { filter: record => data_6.filter(record) && record.Year < 8 && record.Year > 2 }, config: { \"title\": \"Zoomed Line chart\" } });","title":"Line chart to Zoomed Line chart"},{"location":"examples/animated/zoom_line_polar/","text":"Polar Line chart to Zoomed Polar Line chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": \"Value 3 (+)\", \"color\": \"Country_code\" }, \"title\": \"Polar Line chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\" } }); chart.animate({ data: { filter: record => data_6.filter(record) && record.Year < 8 && record.Year > 2 }, config: { \"title\": \"Zoomed Polar Line chart\" } });","title":"Polar Line chart to Zoomed Polar Line chart"},{"location":"examples/animated/zoom_line_polar/#polar-line-chart-to-zoomed-polar-line-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": \"Value 3 (+)\", \"color\": \"Country_code\" }, \"title\": \"Polar Line chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\" } }); chart.animate({ data: { filter: record => data_6.filter(record) && record.Year < 8 && record.Year > 2 }, config: { \"title\": \"Zoomed Polar Line chart\" } });","title":"Polar Line chart to Zoomed Polar Line chart"},{"location":"examples/presets/","text":"Preset charts","title":"Preset charts"},{"location":"examples/presets/#preset-charts","text":"","title":"Preset charts"},{"location":"examples/presets/02_C_R_column/","text":"Column Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.column({ \"x\": \"Joy factors\", \"y\": \"Value 2 (+)\", \"title\": \"Column Chart\" }) });","title":"Column Chart"},{"location":"examples/presets/02_C_R_column/#column-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.column({ \"x\": \"Joy factors\", \"y\": \"Value 2 (+)\", \"title\": \"Column Chart\" }) });","title":"Column Chart"},{"location":"examples/presets/03_C_R_grouped_column_negative/","text":"Grouped Column Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.groupedColumn({ \"x\": \"Country\", \"y\": \"Value 5 (+/-)\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Column Chart\" }) });","title":"Grouped Column Chart"},{"location":"examples/presets/03_C_R_grouped_column_negative/#grouped-column-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.groupedColumn({ \"x\": \"Country\", \"y\": \"Value 5 (+/-)\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Column Chart\" }) });","title":"Grouped Column Chart"},{"location":"examples/presets/04_C_R_stacked_column/","text":"Stacked Column Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.stackedColumn({ \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Column Chart\" }) });","title":"Stacked Column Chart"},{"location":"examples/presets/04_C_R_stacked_column/#stacked-column-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.stackedColumn({ \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Column Chart\" }) });","title":"Stacked Column Chart"},{"location":"examples/presets/05_C_R_splitted_column/","text":"Splitted Column Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.splittedColumn({ \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Column Chart\" }) });","title":"Splitted Column Chart"},{"location":"examples/presets/05_C_R_splitted_column/#splitted-column-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.splittedColumn({ \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Column Chart\" }) });","title":"Splitted Column Chart"},{"location":"examples/presets/06_C_R_percentage_column/","text":"Percentage Column Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.percentageColumn({ \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Column Chart\" }) });","title":"Percentage Column Chart"},{"location":"examples/presets/06_C_R_percentage_column/#percentage-column-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.percentageColumn({ \"x\": \"Country\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Column Chart\" }) });","title":"Percentage Column Chart"},{"location":"examples/presets/08_C_R_waterfall/","text":"Waterfall Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.waterfall({ \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Waterfall Chart\" }), style: { \"plot\": { \"marker\": { \"colorGradient\": \"#ff001b 0,#ff001b 0.5,#7e79e8 0.5,#7e79e8 1\", \"label\": { \"position\": \"top\" } } } } });","title":"Waterfall Chart"},{"location":"examples/presets/08_C_R_waterfall/#waterfall-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.waterfall({ \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Waterfall Chart\" }), style: { \"plot\": { \"marker\": { \"colorGradient\": \"#ff001b 0,#ff001b 0.5,#7e79e8 0.5,#7e79e8 1\", \"label\": { \"position\": \"top\" } } } } });","title":"Waterfall Chart"},{"location":"examples/presets/09_C_R_stacked_mekko/","text":"Stacked Mekko Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: Vizzu.presets.mekko({ \"x\": \"Value 1 (+)\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Stacked Mekko Chart\" }) });","title":"Stacked Mekko Chart"},{"location":"examples/presets/09_C_R_stacked_mekko/#stacked-mekko-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: Vizzu.presets.mekko({ \"x\": \"Value 1 (+)\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Stacked Mekko Chart\" }) });","title":"Stacked Mekko Chart"},{"location":"examples/presets/10_C_R_marimekko/","text":"Marimekko Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: Vizzu.presets.marimekko({ \"x\": \"Value 2 (+)\", \"y\": \"Value 3 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Marimekko Chart\" }) });","title":"Marimekko Chart"},{"location":"examples/presets/10_C_R_marimekko/#marimekko-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: Vizzu.presets.marimekko({ \"x\": \"Value 2 (+)\", \"y\": \"Value 3 (+)\", \"stackedBy\": \"Joy factors\", \"groupedBy\": \"Country\", \"title\": \"Marimekko Chart\" }) });","title":"Marimekko Chart"},{"location":"examples/presets/13_C_R_bar_negative/","text":"Bar Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.bar({ \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"title\": \"Bar Chart\" }) });","title":"Bar Chart"},{"location":"examples/presets/13_C_R_bar_negative/#bar-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.bar({ \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"title\": \"Bar Chart\" }) });","title":"Bar Chart"},{"location":"examples/presets/14_C_R_grouped_bar_negative/","text":"Grouped Bar Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.groupedBar({ \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Bar Chart\" }) });","title":"Grouped Bar Chart"},{"location":"examples/presets/14_C_R_grouped_bar_negative/#grouped-bar-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.groupedBar({ \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"groupedBy\": \"Joy factors\", \"title\": \"Grouped Bar Chart\" }) });","title":"Grouped Bar Chart"},{"location":"examples/presets/15_C_R_stacked_bar/","text":"Stacked Bar Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.stackedBar({ \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Bar Chart\" }) });","title":"Stacked Bar Chart"},{"location":"examples/presets/15_C_R_stacked_bar/#stacked-bar-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.stackedBar({ \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Stacked Bar Chart\" }) });","title":"Stacked Bar Chart"},{"location":"examples/presets/16_C_R_splitted_bar/","text":"Splitted Bar Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.splittedBar({ \"x\": \"Value 2 (+)\", \"y\": \"Year\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Bar Chart\" }) });","title":"Splitted Bar Chart"},{"location":"examples/presets/16_C_R_splitted_bar/#splitted-bar-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.splittedBar({ \"x\": \"Value 2 (+)\", \"y\": \"Year\", \"splittedBy\": \"Joy factors\", \"title\": \"Splitted Bar Chart\" }) });","title":"Splitted Bar Chart"},{"location":"examples/presets/17_C_R_percentage_bar/","text":"Percentage Bar Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.percentageBar({ \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Bar Chart\" }) });","title":"Percentage Bar Chart"},{"location":"examples/presets/17_C_R_percentage_bar/#percentage-bar-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.percentageBar({ \"x\": \"Value 2 (+)\", \"y\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Percentage Bar Chart\" }) });","title":"Percentage Bar Chart"},{"location":"examples/presets/20_C_C_lollipop_chart/","text":"Lollipop Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.lollipop({ \"x\": \"Year\", \"y\": \"Value 1 (+)\", \"title\": \"Lollipop Chart\" }) });","title":"Lollipop Chart"},{"location":"examples/presets/20_C_C_lollipop_chart/#lollipop-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.lollipop({ \"x\": \"Year\", \"y\": \"Value 1 (+)\", \"title\": \"Lollipop Chart\" }) });","title":"Lollipop Chart"},{"location":"examples/presets/22_C_C_scatter/","text":"Scatter Plot Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.scatter({ \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"dividedBy\": \"Year\", \"title\": \"Scatter Plot\" }) });","title":"Scatter Plot"},{"location":"examples/presets/22_C_C_scatter/#scatter-plot","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.scatter({ \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"dividedBy\": \"Year\", \"title\": \"Scatter Plot\" }) });","title":"Scatter Plot"},{"location":"examples/presets/24_C_C_bubbleplot/","text":"Bubble Plot Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.bubbleplot({ \"x\": \"Value 4 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"dividedBy\": \"Country\", \"size\": \"Value 3 (+)\", \"title\": \"Bubble Plot\" }) });","title":"Bubble Plot"},{"location":"examples/presets/24_C_C_bubbleplot/#bubble-plot","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.bubbleplot({ \"x\": \"Value 4 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"dividedBy\": \"Country\", \"size\": \"Value 3 (+)\", \"title\": \"Bubble Plot\" }) });","title":"Bubble Plot"},{"location":"examples/presets/27_C_A_area_negative/","text":"Area Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.area({ \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Area Chart\" }) });","title":"Area Chart"},{"location":"examples/presets/27_C_A_area_negative/#area-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.area({ \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"title\": \"Area Chart\" }) });","title":"Area Chart"},{"location":"examples/presets/28_C_A_stacked_area/","text":"Stacked Area Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.stackedArea({ \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Stacked Area Chart\" }) });","title":"Stacked Area Chart"},{"location":"examples/presets/28_C_A_stacked_area/#stacked-area-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.stackedArea({ \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Stacked Area Chart\" }) });","title":"Stacked Area Chart"},{"location":"examples/presets/29_C_A_percentage_area/","text":"Percentage Area Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.percentageArea({ \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Percentage Area Chart\" }) });","title":"Percentage Area Chart"},{"location":"examples/presets/29_C_A_percentage_area/#percentage-area-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.percentageArea({ \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"stackedBy\": \"Country\", \"title\": \"Percentage Area Chart\" }) });","title":"Percentage Area Chart"},{"location":"examples/presets/31_C_A_splitted_area/","text":"Splitted Area Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.splittedArea({ \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Country\", \"title\": \"Splitted Area Chart\" }) });","title":"Splitted Area Chart"},{"location":"examples/presets/31_C_A_splitted_area/#splitted-area-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.splittedArea({ \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"splittedBy\": \"Country\", \"title\": \"Splitted Area Chart\" }) });","title":"Splitted Area Chart"},{"location":"examples/presets/32_C_A_stream/","text":"Stream Graph Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/music_industry_history_1.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.stream({ \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"stackedBy\": \"Format\", \"title\": \"Stream Graph\" }), style: { \"plot\": { \"yAxis\": { \"interlacing\": { \"color\": \"#ffffff00\" } }, \"xAxis\": { \"label\": { \"angle\": \"-45deg\" } } } } });","title":"Stream Graph"},{"location":"examples/presets/32_C_A_stream/#stream-graph","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/music_industry_history_1.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.stream({ \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"stackedBy\": \"Format\", \"title\": \"Stream Graph\" }), style: { \"plot\": { \"yAxis\": { \"interlacing\": { \"color\": \"#ffffff00\" } }, \"xAxis\": { \"label\": { \"angle\": \"-45deg\" } } } } });","title":"Stream Graph"},{"location":"examples/presets/33_C_A_vertical_stream/","text":"Vertical Stream Graph Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/music_industry_history_1.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.verticalStream({ \"x\": \"Revenue [m$]\", \"y\": \"Year\", \"stackedBy\": \"Format\", \"title\": \"Vertical Stream Graph\" }), style: { \"plot\": { \"xAxis\": { \"interlacing\": { \"color\": \"#ffffff00\" } } } } });","title":"Vertical Stream Graph"},{"location":"examples/presets/33_C_A_vertical_stream/#vertical-stream-graph","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/music_industry_history_1.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.verticalStream({ \"x\": \"Revenue [m$]\", \"y\": \"Year\", \"stackedBy\": \"Format\", \"title\": \"Vertical Stream Graph\" }), style: { \"plot\": { \"xAxis\": { \"interlacing\": { \"color\": \"#ffffff00\" } } } } });","title":"Vertical Stream Graph"},{"location":"examples/presets/34_C_A_violin/","text":"Violin Graph Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/music_industry_history_1.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.violin({ \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"splittedBy\": \"Format\", \"title\": \"Violin Graph\" }), style: { \"plot\": { \"yAxis\": { \"interlacing\": { \"color\": \"#ffffff00\" } }, \"xAxis\": { \"label\": { \"angle\": \"-45deg\" } } } } });","title":"Violin Graph"},{"location":"examples/presets/34_C_A_violin/#violin-graph","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/music_industry_history_1.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.violin({ \"x\": \"Year\", \"y\": \"Revenue [m$]\", \"splittedBy\": \"Format\", \"title\": \"Violin Graph\" }), style: { \"plot\": { \"yAxis\": { \"interlacing\": { \"color\": \"#ffffff00\" } }, \"xAxis\": { \"label\": { \"angle\": \"-45deg\" } } } } });","title":"Violin Graph"},{"location":"examples/presets/35_C_A_vertical_violin/","text":"Vertical Violin Graph Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/music_industry_history_1.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.verticalViolin({ \"x\": \"Revenue [m$]\", \"y\": \"Year\", \"splittedBy\": \"Format\", \"title\": \"Vertical Violin Graph\" }), style: { \"plot\": { \"xAxis\": { \"interlacing\": { \"color\": \"#ffffff00\" } } } } });","title":"Vertical Violin Graph"},{"location":"examples/presets/35_C_A_vertical_violin/#vertical-violin-graph","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/music_industry_history_1.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.verticalViolin({ \"x\": \"Revenue [m$]\", \"y\": \"Year\", \"splittedBy\": \"Format\", \"title\": \"Vertical Violin Graph\" }), style: { \"plot\": { \"xAxis\": { \"interlacing\": { \"color\": \"#ffffff00\" } } } } });","title":"Vertical Violin Graph"},{"location":"examples/presets/38_C_L_line/","text":"Line Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.line({ \"x\": \"Year\", \"y\": \"Value 6 (+/-)\", \"dividedBy\": \"Country\", \"title\": \"Line Chart\" }) });","title":"Line Chart"},{"location":"examples/presets/38_C_L_line/#line-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.line({ \"x\": \"Year\", \"y\": \"Value 6 (+/-)\", \"dividedBy\": \"Country\", \"title\": \"Line Chart\" }) });","title":"Line Chart"},{"location":"examples/presets/39_C_L_vertical_line/","text":"Vertical Line Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.line({ \"x\": \"Value 6 (+/-)\", \"y\": \"Year\", \"dividedBy\": \"Country\", \"title\": \"Vertical Line Chart\" }) });","title":"Vertical Line Chart"},{"location":"examples/presets/39_C_L_vertical_line/#vertical-line-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.line({ \"x\": \"Value 6 (+/-)\", \"y\": \"Year\", \"dividedBy\": \"Country\", \"title\": \"Vertical Line Chart\" }) });","title":"Vertical Line Chart"},{"location":"examples/presets/40_P_R_pie/","text":"Pie Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.pie({ \"angle\": \"Value 2 (+)\", \"by\": \"Joy factors\", \"title\": \"Pie Chart\" }) });","title":"Pie Chart"},{"location":"examples/presets/40_P_R_pie/#pie-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.pie({ \"angle\": \"Value 2 (+)\", \"by\": \"Joy factors\", \"title\": \"Pie Chart\" }) });","title":"Pie Chart"},{"location":"examples/presets/42_P_R_polar_column/","text":"Polar Column Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.polarColumn({ \"angle\": \"Joy factors\", \"radius\": \"Value 2 (+)\", \"title\": \"Polar Column Chart\" }) });","title":"Polar Column Chart"},{"location":"examples/presets/42_P_R_polar_column/#polar-column-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.polarColumn({ \"angle\": \"Joy factors\", \"radius\": \"Value 2 (+)\", \"title\": \"Polar Column Chart\" }) });","title":"Polar Column Chart"},{"location":"examples/presets/42a_P_R_polar_stacked_column/","text":"Polar Stacked Column Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.polarStackedColumn({ \"angle\": \"Country\", \"radius\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Polar Stacked Column Chart\" }) });","title":"Polar Stacked Column Chart"},{"location":"examples/presets/42a_P_R_polar_stacked_column/#polar-stacked-column-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.polarStackedColumn({ \"angle\": \"Country\", \"radius\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Polar Stacked Column Chart\" }) });","title":"Polar Stacked Column Chart"},{"location":"examples/presets/44_P_R_variable_radius_pie_chart/","text":"Variable Radius Pie Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.variableRadiusPie({ \"angle\": \"Value 2 (+)\", \"radius\": \"Value 1 (+)\", \"by\": \"Joy factors\", \"title\": \"Variable Radius Pie Chart\" }) });","title":"Variable Radius Pie Chart"},{"location":"examples/presets/44_P_R_variable_radius_pie_chart/#variable-radius-pie-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.variableRadiusPie({ \"angle\": \"Value 2 (+)\", \"radius\": \"Value 1 (+)\", \"by\": \"Joy factors\", \"title\": \"Variable Radius Pie Chart\" }) });","title":"Variable Radius Pie Chart"},{"location":"examples/presets/49_P_R_radial_bar/","text":"Radial Bar Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.radialBar({ \"angle\": \"Value 1 (+)\", \"radius\": \"Country\", \"title\": \"Radial Bar Chart\" }) });","title":"Radial Bar Chart"},{"location":"examples/presets/49_P_R_radial_bar/#radial-bar-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.radialBar({ \"angle\": \"Value 1 (+)\", \"radius\": \"Country\", \"title\": \"Radial Bar Chart\" }) });","title":"Radial Bar Chart"},{"location":"examples/presets/50_P_R_radial_stacked_bar/","text":"Radial Stacked Bar Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.radialStackedBar({ \"angle\": \"Value 2 (+)\", \"radius\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Radial Stacked Bar Chart\" }) });","title":"Radial Stacked Bar Chart"},{"location":"examples/presets/50_P_R_radial_stacked_bar/#radial-stacked-bar-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.radialStackedBar({ \"angle\": \"Value 2 (+)\", \"radius\": \"Country\", \"stackedBy\": \"Joy factors\", \"title\": \"Radial Stacked Bar Chart\" }) });","title":"Radial Stacked Bar Chart"},{"location":"examples/presets/51_P_R_donut/","text":"Donut Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.donut({ \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Donut Chart\" }) });","title":"Donut Chart"},{"location":"examples/presets/51_P_R_donut/#donut-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.donut({ \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"title\": \"Donut Chart\" }) });","title":"Donut Chart"},{"location":"examples/presets/52_P_R_nested_donut/","text":"Nested Donut Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_3 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_3 }) chart.animate({ config: Vizzu.presets.nestedDonut({ \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"radius\": \"Country\", \"title\": \"Nested Donut Chart\" }), style: { \"plot\": { \"marker\": { \"rectangleSpacing\": \"0\", \"borderWidth\": 1, \"borderOpacity\": 0 } } } });","title":"Nested Donut Chart"},{"location":"examples/presets/52_P_R_nested_donut/#nested-donut-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_3 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_3 }) chart.animate({ config: Vizzu.presets.nestedDonut({ \"angle\": \"Value 2 (+)\", \"stackedBy\": \"Joy factors\", \"radius\": \"Country\", \"title\": \"Nested Donut Chart\" }), style: { \"plot\": { \"marker\": { \"rectangleSpacing\": \"0\", \"borderWidth\": 1, \"borderOpacity\": 0 } } } });","title":"Nested Donut Chart"},{"location":"examples/presets/53_P_C_polar_scatter/","text":"Polar Scatter Plot Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.polarScatter({ \"angle\": \"Value 3 (+)\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Scatter Plot\" }) });","title":"Polar Scatter Plot"},{"location":"examples/presets/53_P_C_polar_scatter/#polar-scatter-plot","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.polarScatter({ \"angle\": \"Value 3 (+)\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Scatter Plot\" }) });","title":"Polar Scatter Plot"},{"location":"examples/presets/56_P_A_polar_line/","text":"Polar Line Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.polarLine({ \"angle\": \"Year\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Line Chart\" }) });","title":"Polar Line Chart"},{"location":"examples/presets/56_P_A_polar_line/#polar-line-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.polarLine({ \"angle\": \"Year\", \"radius\": \"Value 2 (+)\", \"dividedBy\": \"Country\", \"title\": \"Polar Line Chart\" }) });","title":"Polar Line Chart"},{"location":"examples/presets/58_W_R_treemap/","text":"Treemap Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.treemap({ \"size\": \"Value 2 (+)\", \"color\": \"Country_code\", \"title\": \"Treemap\" }) });","title":"Treemap"},{"location":"examples/presets/58_W_R_treemap/#treemap","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.treemap({ \"size\": \"Value 2 (+)\", \"color\": \"Country_code\", \"title\": \"Treemap\" }) });","title":"Treemap"},{"location":"examples/presets/59_W_R_stacked_treemap/","text":"Stacked Treemap Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.stackedTreemap({ \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"title\": \"Stacked Treemap\", \"dividedBy\": \"Country_code\" }) });","title":"Stacked Treemap"},{"location":"examples/presets/59_W_R_stacked_treemap/#stacked-treemap","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.stackedTreemap({ \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"title\": \"Stacked Treemap\", \"dividedBy\": \"Country_code\" }) });","title":"Stacked Treemap"},{"location":"examples/presets/60_W_R_heatmap/","text":"Heatmap Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.heatmap({ \"x\": \"Year\", \"y\": \"Country_code\", \"lightness\": \"Value 3 (+)\", \"title\": \"Heatmap\" }), style: { \"plot\": { \"marker\": { \"rectangleSpacing\": 0 } } } });","title":"Heatmap"},{"location":"examples/presets/60_W_R_heatmap/#heatmap","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_6 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_6 }) chart.animate({ config: Vizzu.presets.heatmap({ \"x\": \"Year\", \"y\": \"Country_code\", \"lightness\": \"Value 3 (+)\", \"title\": \"Heatmap\" }), style: { \"plot\": { \"marker\": { \"rectangleSpacing\": 0 } } } });","title":"Heatmap"},{"location":"examples/presets/61_W_R_bubble_chart/","text":"Bubble Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.bubble({ \"size\": \"Value 5 (+/-)\", \"color\": \"Country_code\", \"title\": \"Bubble Chart\" }) });","title":"Bubble Chart"},{"location":"examples/presets/61_W_R_bubble_chart/#bubble-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.bubble({ \"size\": \"Value 5 (+/-)\", \"color\": \"Country_code\", \"title\": \"Bubble Chart\" }) });","title":"Bubble Chart"},{"location":"examples/presets/62_W_R_stacked_bubble/","text":"Stacked Bubble Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.stackedBubble({ \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"stackedBy\": \"Country_code\", \"title\": \"Stacked Bubble Chart\" }) });","title":"Stacked Bubble Chart"},{"location":"examples/presets/62_W_R_stacked_bubble/#stacked-bubble-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: Vizzu.presets.stackedBubble({ \"size\": \"Value 2 (+)\", \"color\": \"Joy factors\", \"stackedBy\": \"Country_code\", \"title\": \"Stacked Bubble Chart\" }) });","title":"Stacked Bubble Chart"},{"location":"examples/static/","text":"Static charts","title":"Static charts"},{"location":"examples/static/#static-charts","text":"","title":"Static charts"},{"location":"examples/static/NO_spiderweb_line_2dis_1con/","text":"Polar Line Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\" }, \"title\": \"Polar Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\" } });","title":"Polar Line Chart"},{"location":"examples/static/NO_spiderweb_line_2dis_1con/#polar-line-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 2 (+)\", \"color\": \"Country\" }, \"title\": \"Polar Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\" } });","title":"Polar Line Chart"},{"location":"examples/static/area_negative_1dis_1con/","text":"Area Chart with (-) Nums Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Area Chart with (-) Nums\", \"geometry\": \"area\" } });","title":"Area Chart with (-) Nums"},{"location":"examples/static/area_negative_1dis_1con/#area-chart-with-nums","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Area Chart with (-) Nums\", \"geometry\": \"area\" } });","title":"Area Chart with (-) Nums"},{"location":"examples/static/bar_rectangle_negative_1dis_1con/","text":"Bar Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"color\": \"Country\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Bar Chart\", \"orientation\": \"vertical\" } });","title":"Bar Chart"},{"location":"examples/static/bar_rectangle_negative_1dis_1con/#bar-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 5 (+/-)\", \"y\": \"Country\", \"color\": \"Country\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Bar Chart\", \"orientation\": \"vertical\" } });","title":"Bar Chart"},{"location":"examples/static/bubble_circle_1dis_2con/","text":"Bubble Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Country_code\", \"label\": \"Country_code\", \"size\": \"Value 5 (+/-)\" }, \"title\": \"Bubble Chart\", \"geometry\": \"circle\" } });","title":"Bubble Chart"},{"location":"examples/static/bubble_circle_1dis_2con/#bubble-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Country_code\", \"label\": \"Country_code\", \"size\": \"Value 5 (+/-)\" }, \"title\": \"Bubble Chart\", \"geometry\": \"circle\" } });","title":"Bubble Chart"},{"location":"examples/static/bubble_circle_2dis_2con/","text":"Stacked Bubble Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"size\": [ \"Country_code\", \"Value 2 (+)\" ], \"label\": \"Country_code\" }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\" } });","title":"Stacked Bubble Chart"},{"location":"examples/static/bubble_circle_2dis_2con/#stacked-bubble-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"size\": [ \"Country_code\", \"Value 2 (+)\" ], \"label\": \"Country_code\" }, \"title\": \"Stacked Bubble Chart\", \"geometry\": \"circle\" } });","title":"Stacked Bubble Chart"},{"location":"examples/static/column_grouped_rectangle_negative_2dis_1con/","text":"Grouped Column Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Country\" ], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Grouped Column Chart\" }, style: { \"plot\": { \"marker\": { \"label\": { \"fontSize\": 6, \"orientation\": \"vertical\", \"angle\": -3.14 } } } } });","title":"Grouped Column Chart"},{"location":"examples/static/column_grouped_rectangle_negative_2dis_1con/#grouped-column-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Country\" ], \"y\": \"Value 5 (+/-)\", \"color\": \"Joy factors\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Grouped Column Chart\" }, style: { \"plot\": { \"marker\": { \"label\": { \"fontSize\": 6, \"orientation\": \"vertical\", \"angle\": -3.14 } } } } });","title":"Grouped Column Chart"},{"location":"examples/static/column_stacked_rectangle_1dis_1con/","text":"Single Stacked Column Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"y\": [ \"Joy factors\", \"Value 2 (+)\" ], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Single Stacked Column Chart\" } });","title":"Single Stacked Column Chart"},{"location":"examples/static/column_stacked_rectangle_1dis_1con/#single-stacked-column-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"y\": [ \"Joy factors\", \"Value 2 (+)\" ], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Single Stacked Column Chart\" } });","title":"Single Stacked Column Chart"},{"location":"examples/static/column_stacked_rectangle_negative_2dis_1con/","text":"Stacked Column Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Country\", \"y\": [ \"Joy factors\", \"Value 2 (+)\" ], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Stacked Column Chart\" }, style: { \"plot\": { \"xAxis\": { \"label\": { \"angle\": 2.3 } }, \"marker\": { \"label\": { \"fontSize\": 7, \"orientation\": \"vertical\", \"angle\": -3.14 } } } } });","title":"Stacked Column Chart"},{"location":"examples/static/column_stacked_rectangle_negative_2dis_1con/#stacked-column-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Country\", \"y\": [ \"Joy factors\", \"Value 2 (+)\" ], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Stacked Column Chart\" }, style: { \"plot\": { \"xAxis\": { \"label\": { \"angle\": 2.3 } }, \"marker\": { \"label\": { \"fontSize\": 7, \"orientation\": \"vertical\", \"angle\": -3.14 } } } } });","title":"Stacked Column Chart"},{"location":"examples/static/coxcomb_stacked_rectangle_2dis_1con/","text":"Coxcomb Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Joy factors\", \"Value 2 (+)\" ], \"color\": \"Joy factors\" }, \"title\": \"Coxcomb Chart\", \"coordSystem\": \"polar\" } });","title":"Coxcomb Chart"},{"location":"examples/static/coxcomb_stacked_rectangle_2dis_1con/#coxcomb-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Joy factors\", \"Value 2 (+)\" ], \"color\": \"Joy factors\" }, \"title\": \"Coxcomb Chart\", \"coordSystem\": \"polar\" } });","title":"Coxcomb Chart"},{"location":"examples/static/donut_rectangle_1dis_1con/","text":"Donut Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 2 (+)\" ], \"y\": { \"range\": { \"min\": \"-200%\" } }, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Donut Chart\", \"coordSystem\": \"polar\" } });","title":"Donut Chart"},{"location":"examples/static/donut_rectangle_1dis_1con/#donut-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 2 (+)\" ], \"y\": { \"range\": { \"min\": \"-200%\" } }, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Donut Chart\", \"coordSystem\": \"polar\" } });","title":"Donut Chart"},{"location":"examples/static/dotplot_circle_negative_1dis_1con/","text":"Dot Plot Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Value 5 (+/-)\" ] }, \"title\": \"Dot Plot\", \"geometry\": \"circle\" } });","title":"Dot Plot"},{"location":"examples/static/dotplot_circle_negative_1dis_1con/#dot-plot","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Value 5 (+/-)\" ] }, \"title\": \"Dot Plot\", \"geometry\": \"circle\" } });","title":"Dot Plot"},{"location":"examples/static/histogram_rectangle_negative_1dis_1con/","text":"Histogram Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Histogram\", \"align\": \"none\" }, style: { \"plot.marker.rectangleSpacing\": 0.07 } });","title":"Histogram"},{"location":"examples/static/histogram_rectangle_negative_1dis_1con/#histogram","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Histogram\", \"align\": \"none\" }, style: { \"plot.marker.rectangleSpacing\": 0.07 } });","title":"Histogram"},{"location":"examples/static/line_negative_1dis_1con/","text":"Single Line Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Single Line Chart\", \"geometry\": \"line\" } });","title":"Single Line Chart"},{"location":"examples/static/line_negative_1dis_1con/#single-line-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Single Line Chart\", \"geometry\": \"line\" } });","title":"Single Line Chart"},{"location":"examples/static/line_negative_2dis_1con/","text":"Line Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\" }, \"title\": \"Line Chart\", \"geometry\": \"line\" } });","title":"Line Chart"},{"location":"examples/static/line_negative_2dis_1con/#line-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\" }, \"title\": \"Line Chart\", \"geometry\": \"line\" } });","title":"Line Chart"},{"location":"examples/static/marimekko_rectangle_2dis_2con/","text":"Marimekko Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": [ \"Joy factors\", \"Value 3 (+)\" ], \"color\": \"Joy factors\", \"label\": [ \"Country\", \"Value 2 (+)\" ] }, \"title\": \"Marimekko Chart\", \"align\": \"stretch\", \"orientation\": \"horizontal\" }, style: { \"plot\": { \"marker\": { \"label\": { \"format\": \"dimensionsFirst\", \"fontSize\": \"0.7em\" } } } } });","title":"Marimekko Chart"},{"location":"examples/static/marimekko_rectangle_2dis_2con/#marimekko-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": [ \"Joy factors\", \"Value 3 (+)\" ], \"color\": \"Joy factors\", \"label\": [ \"Country\", \"Value 2 (+)\" ] }, \"title\": \"Marimekko Chart\", \"align\": \"stretch\", \"orientation\": \"horizontal\" }, style: { \"plot\": { \"marker\": { \"label\": { \"format\": \"dimensionsFirst\", \"fontSize\": \"0.7em\" } } } } });","title":"Marimekko Chart"},{"location":"examples/static/mekko_rectangle_1dis_2con/","text":"Mekko Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": { \"set\": [ \"Value 1 (+)\" ], \"range\": { \"max\": \"110%\" } }, \"color\": \"Country\", \"label\": [ \"Value 2 (+)\", \"Country\" ] }, \"title\": \"Mekko Chart\" } });","title":"Mekko Chart"},{"location":"examples/static/mekko_rectangle_1dis_2con/#mekko-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": { \"set\": [ \"Value 1 (+)\" ], \"range\": { \"max\": \"110%\" } }, \"color\": \"Country\", \"label\": [ \"Value 2 (+)\", \"Country\" ] }, \"title\": \"Mekko Chart\" } });","title":"Mekko Chart"},{"location":"examples/static/pie_rectangle_1dis_1con/","text":"Pie Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 2 (+)\" ], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\" } });","title":"Pie Chart"},{"location":"examples/static/pie_rectangle_1dis_1con/#pie-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Joy factors\", \"Value 2 (+)\" ], \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Pie Chart\", \"coordSystem\": \"polar\" } });","title":"Pie Chart"},{"location":"examples/static/radial_rectangle_1dis_1con/","text":"Radial Bar Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": { \"set\": [ \"Joy factors\" ], \"range\": { \"min\": \"-30%\" } }, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Radial Bar Chart\", \"coordSystem\": \"polar\" } });","title":"Radial Bar Chart"},{"location":"examples/static/radial_rectangle_1dis_1con/#radial-bar-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 2 (+)\", \"y\": { \"set\": [ \"Joy factors\" ], \"range\": { \"min\": \"-30%\" } }, \"color\": \"Joy factors\", \"label\": \"Value 2 (+)\" }, \"title\": \"Radial Bar Chart\", \"coordSystem\": \"polar\" } });","title":"Radial Bar Chart"},{"location":"examples/static/radial_stacked_rectangle_2dis_1con/","text":"Stacked Radial Bar Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": { \"set\": [ \"Year\" ], \"range\": { \"min\": \"-20%\" } }, \"color\": \"Country\", \"lightness\": \"Year\" }, \"title\": \"Stacked Radial Bar Chart\", \"coordSystem\": \"polar\" } });","title":"Stacked Radial Bar Chart"},{"location":"examples/static/radial_stacked_rectangle_2dis_1con/#stacked-radial-bar-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": { \"set\": [ \"Year\" ], \"range\": { \"min\": \"-20%\" } }, \"color\": \"Country\", \"lightness\": \"Year\" }, \"title\": \"Stacked Radial Bar Chart\", \"coordSystem\": \"polar\" } });","title":"Stacked Radial Bar Chart"},{"location":"examples/static/scatterplot_circle_negative_1dis_2con/","text":"Scatter Plot Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"noop\": \"Year\", \"label\": \"Year\" }, \"title\": \"Scatter Plot\", \"geometry\": \"circle\" } });","title":"Scatter Plot"},{"location":"examples/static/scatterplot_circle_negative_1dis_2con/#scatter-plot","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"noop\": \"Year\", \"label\": \"Year\" }, \"title\": \"Scatter Plot\", \"geometry\": \"circle\" } });","title":"Scatter Plot"},{"location":"examples/static/scatterplot_circle_negative_2dis_3con/","text":"Bubble Plot Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\", \"size\": \"Value 4 (+/-)\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\" } });","title":"Bubble Plot"},{"location":"examples/static/scatterplot_circle_negative_2dis_3con/#bubble-plot","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Value 6 (+/-)\", \"y\": \"Value 5 (+/-)\", \"color\": \"Country\", \"size\": \"Value 4 (+/-)\", \"label\": \"Value 5 (+/-)\" }, \"title\": \"Bubble Plot\", \"geometry\": \"circle\" } });","title":"Bubble Plot"},{"location":"examples/static/spiderweb_area_1dis_1con/","text":"Polar Area Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [ \"Value 2 (+)\" ], \"range\": { \"max\": \"130%\" } }, \"label\": \"Value 2 (+)\" }, \"title\": \"Polar Area Chart\", \"geometry\": \"area\", \"coordSystem\": \"polar\" }, style: { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57 } } } } });","title":"Polar Area Chart"},{"location":"examples/static/spiderweb_area_1dis_1con/#polar-area-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [ \"Value 2 (+)\" ], \"range\": { \"max\": \"130%\" } }, \"label\": \"Value 2 (+)\" }, \"title\": \"Polar Area Chart\", \"geometry\": \"area\", \"coordSystem\": \"polar\" }, style: { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57 } } } } });","title":"Polar Area Chart"},{"location":"examples/static/spiderweb_line_1dis_1con/","text":"Polar Single Line Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [ \"Value 2 (+)\" ], \"range\": { \"max\": \"130%\" } }, \"label\": \"Value 2 (+)\" }, \"title\": \"Polar Single Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\" }, style: { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57 } } } } });","title":"Polar Single Line Chart"},{"location":"examples/static/spiderweb_line_1dis_1con/#polar-single-line-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": { \"set\": [ \"Value 2 (+)\" ], \"range\": { \"max\": \"130%\" } }, \"label\": \"Value 2 (+)\" }, \"title\": \"Polar Single Line Chart\", \"geometry\": \"line\", \"coordSystem\": \"polar\" }, style: { \"plot\": { \"marker\": { \"label\": { \"orientation\": \"tangential\", \"angle\": -1.57 } } } } });","title":"Polar Single Line Chart"},{"location":"examples/static/stacked_area_2dis_1con/","text":"Stacked Area Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Country\", \"Value 2 (+)\" ], \"color\": \"Country\" }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\" } });","title":"Stacked Area Chart"},{"location":"examples/static/stacked_area_2dis_1con/#stacked-area-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Country\", \"Value 2 (+)\" ], \"color\": \"Country\" }, \"title\": \"Stacked Area Chart\", \"geometry\": \"area\" } });","title":"Stacked Area Chart"},{"location":"examples/static/stacked_mekko_rectangle_2dis_2con/","text":"Stacked Mekko Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": { \"set\": [ \"Joy factors\", \"Value 3 (+)\" ], \"range\": { \"max\": \"110%\" } }, \"color\": \"Joy factors\", \"label\": [ \"Value 2 (+)\", \"Country\" ] }, \"title\": \"Stacked Mekko Chart\", \"orientation\": \"horizontal\" } });","title":"Stacked Mekko Chart"},{"location":"examples/static/stacked_mekko_rectangle_2dis_2con/#stacked-mekko-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data_4 } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data_4 }) chart.animate({ config: { \"channels\": { \"x\": [ \"Country\", \"Value 2 (+)\" ], \"y\": { \"set\": [ \"Joy factors\", \"Value 3 (+)\" ], \"range\": { \"max\": \"110%\" } }, \"color\": \"Joy factors\", \"label\": [ \"Value 2 (+)\", \"Country\" ] }, \"title\": \"Stacked Mekko Chart\", \"orientation\": \"horizontal\" } });","title":"Stacked Mekko Chart"},{"location":"examples/static/stream_stacked_area_3dis_1con/","text":"Stacked Streamgraph Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": [ \"Value 3 (+)\", \"Country_code\" ], \"color\": \"Country_code\" }, \"title\": \"Stacked Streamgraph\", \"geometry\": \"area\", \"align\": \"center\" } });","title":"Stacked Streamgraph"},{"location":"examples/static/stream_stacked_area_3dis_1con/#stacked-streamgraph","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": [ \"Year\", \"Joy factors\" ], \"y\": [ \"Value 3 (+)\", \"Country_code\" ], \"color\": \"Country_code\" }, \"title\": \"Stacked Streamgraph\", \"geometry\": \"area\", \"align\": \"center\" } });","title":"Stacked Streamgraph"},{"location":"examples/static/treemap_rectangle_1dis_1con/","text":"Treemap Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"label\": \"Country_code\", \"size\": \"Value 2 (+)\" }, \"title\": \"Treemap\" } });","title":"Treemap"},{"location":"examples/static/treemap_rectangle_1dis_1con/#treemap","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"label\": \"Country_code\", \"size\": \"Value 2 (+)\" }, \"title\": \"Treemap\" } });","title":"Treemap"},{"location":"examples/static/treemap_rectangle_2dis_2con/","text":"Stacked Treemap Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"size\": [ \"Value 2 (+)\", \"Country_code\" ], \"label\": \"Country_code\", \"lightness\": \"Value 2 (+)\" }, \"title\": \"Stacked Treemap\" } });","title":"Stacked Treemap"},{"location":"examples/static/treemap_rectangle_2dis_2con/#stacked-treemap","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"color\": \"Joy factors\", \"size\": [ \"Value 2 (+)\", \"Country_code\" ], \"label\": \"Country_code\", \"lightness\": \"Value 2 (+)\" }, \"title\": \"Stacked Treemap\" } });","title":"Stacked Treemap"},{"location":"examples/static/waterfall_rectangle_negative_1dis_1con/","text":"Waterfall Chart Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Year\", \"Value 5 (+/-)\" ], \"label\": \"Value 5 (+/-)\" }, \"title\": \"Waterfall Chart\", \"legend\": null }, style: { \"plot\": { \"marker\": { \"label\": { \"position\": \"top\" } } } } });","title":"Waterfall Chart"},{"location":"examples/static/waterfall_rectangle_negative_1dis_1con/#waterfall-chart","text":"Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import { data } from 'https://lib.vizzuhq.com/0.7/assets/data/chart_types_eu.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { \"channels\": { \"x\": \"Year\", \"y\": [ \"Year\", \"Value 5 (+/-)\" ], \"label\": \"Value 5 (+/-)\" }, \"title\": \"Waterfall Chart\", \"legend\": null }, style: { \"plot\": { \"marker\": { \"label\": { \"position\": \"top\" } } } } });","title":"Waterfall Chart"},{"location":"reference/","text":"Vizzu / Modules Vizzu JS Library Reference This is the API reference document of the Vizzu JS library. It provides information about every detail of the API. This works best for users who already have a basic understanding of the Vizzu library and its logic. In case you're just getting started with Vizzu , we strongly recommend visiting our Tutorial first. Library Overview The main entry point of the library is the Vizzu class, and its most important component is the animate method: Vizzu class constructor() animate ( Anim.Target , Anim.Options ) : Anim.Control The animate method's main parameter is the Anim.Target interface, which contains the configuration of the chart, the underlying data, and the chart's style settings: Anim.Target Data.Set Config.Chart Config.Channels Styles.Chart Styles.Plot Styles.Marker Styles.Axis Styles.Legend Styles.Tooltip Details You can find all interface declarations and types under these namespaces. Data - Data structure and operations Config - Configuration settings of your charts Style - Style settings Anim - Animation settings Events - Event handling Presets - Preset chart configurations","title":"Code reference"},{"location":"reference/#vizzu-js-library-reference","text":"This is the API reference document of the Vizzu JS library. It provides information about every detail of the API. This works best for users who already have a basic understanding of the Vizzu library and its logic. In case you're just getting started with Vizzu , we strongly recommend visiting our Tutorial first.","title":"Vizzu JS Library Reference"},{"location":"reference/#library-overview","text":"The main entry point of the library is the Vizzu class, and its most important component is the animate method: Vizzu class constructor() animate ( Anim.Target , Anim.Options ) : Anim.Control The animate method's main parameter is the Anim.Target interface, which contains the configuration of the chart, the underlying data, and the chart's style settings: Anim.Target Data.Set Config.Chart Config.Channels Styles.Chart Styles.Plot Styles.Marker Styles.Axis Styles.Legend Styles.Tooltip","title":"Library Overview"},{"location":"reference/#details","text":"You can find all interface declarations and types under these namespaces. Data - Data structure and operations Config - Configuration settings of your charts Style - Style settings Anim - Animation settings Events - Event handling Presets - Preset chart configurations","title":"Details"},{"location":"reference/modules/","text":"Vizzu / Modules Vizzu Modules presets vizzu","title":"Modules"},{"location":"reference/modules/#vizzu","text":"","title":"Vizzu"},{"location":"reference/modules/#modules","text":"presets vizzu","title":"Modules"},{"location":"reference/classes/presets.Presets/","text":"Vizzu / Modules / presets / Presets Class: Presets presets .Presets Collection of factory functions for creating preset chart configs. Constructors constructor \u2022 new Presets () Methods area \u25b8 area ( config ): any Parameters Name Type config Area Returns any bar \u25b8 bar ( config ): any Parameters Name Type config Bar Returns any bubble \u25b8 bubble ( config ): any Parameters Name Type config Bubble Returns any bubbleplot \u25b8 bubbleplot ( config ): any Parameters Name Type config Bubbleplot Returns any column \u25b8 column ( config ): any Parameters Name Type config Column Returns any donut \u25b8 donut ( config ): any Parameters Name Type config Donut Returns any groupedBar \u25b8 groupedBar ( config ): any Parameters Name Type config GroupedBar Returns any groupedColumn \u25b8 groupedColumn ( config ): any Parameters Name Type config GroupedColumn Returns any heatmap \u25b8 heatmap ( config ): any Parameters Name Type config Heatmap Returns any line \u25b8 line ( config ): any Parameters Name Type config Line Returns any lollipop \u25b8 lollipop ( config ): any Parameters Name Type config Lollipop Returns any marimekko \u25b8 marimekko ( config ): any Parameters Name Type config Marimekko Returns any mekko \u25b8 mekko ( config ): any Parameters Name Type config Mekko Returns any nestedDonut \u25b8 nestedDonut ( config ): any Parameters Name Type config NestedDonut Returns any percentageArea \u25b8 percentageArea ( config ): any Parameters Name Type config PercentageArea Returns any percentageBar \u25b8 percentageBar ( config ): any Parameters Name Type config PercentageBar Returns any percentageColumn \u25b8 percentageColumn ( config ): any Parameters Name Type config PercentageColumn Returns any pie \u25b8 pie ( config ): any Parameters Name Type config Pie Returns any polarColumn \u25b8 polarColumn ( config ): any Parameters Name Type config PolarColumn Returns any polarLine \u25b8 polarLine ( config ): any Parameters Name Type config PolarLine Returns any polarScatter \u25b8 polarScatter ( config ): any Parameters Name Type config PolarScatter Returns any polarStackedColumn \u25b8 polarStackedColumn ( config ): any Parameters Name Type config PolarStackedColumn Returns any radialBar \u25b8 radialBar ( config ): any Parameters Name Type config RadialBar Returns any radialStackedBar \u25b8 radialStackedBar ( config ): any Parameters Name Type config RadialStackedBar Returns any scatter \u25b8 scatter ( config ): any Parameters Name Type config Scatter Returns any splittedArea \u25b8 splittedArea ( config ): any Parameters Name Type config SplittedArea Returns any splittedBar \u25b8 splittedBar ( config ): any Parameters Name Type config SplittedBar Returns any splittedColumn \u25b8 splittedColumn ( config ): any Parameters Name Type config SplittedColumn Returns any stackedArea \u25b8 stackedArea ( config ): any Parameters Name Type config StackedArea Returns any stackedBar \u25b8 stackedBar ( config ): any Parameters Name Type config StackedBar Returns any stackedBubble \u25b8 stackedBubble ( config ): any Parameters Name Type config StackedBubble Returns any stackedColumn \u25b8 stackedColumn ( config ): any Parameters Name Type config StackedColumn Returns any stackedTreemap \u25b8 stackedTreemap ( config ): any Parameters Name Type config StackedTreemap Returns any stream \u25b8 stream ( config ): any Parameters Name Type config Stream Returns any treemap \u25b8 treemap ( config ): any Parameters Name Type config Treemap Returns any variableRadiusPie \u25b8 variableRadiusPie ( config ): any Parameters Name Type config VariableRadiusPie Returns any verticalLine \u25b8 verticalLine ( config ): any Parameters Name Type config VerticalLine Returns any verticalStream \u25b8 verticalStream ( config ): any Parameters Name Type config VerticalStream Returns any verticalViolin \u25b8 verticalViolin ( config ): any Parameters Name Type config VerticalViolin Returns any violin \u25b8 violin ( config ): any Parameters Name Type config Violin Returns any waterfall \u25b8 waterfall ( config ): any Parameters Name Type config Waterfall Returns any","title":"presets.Presets"},{"location":"reference/classes/presets.Presets/#class-presets","text":"presets .Presets Collection of factory functions for creating preset chart configs.","title":"Class: Presets"},{"location":"reference/classes/presets.Presets/#constructors","text":"","title":"Constructors"},{"location":"reference/classes/presets.Presets/#constructor","text":"\u2022 new Presets ()","title":"constructor"},{"location":"reference/classes/presets.Presets/#methods","text":"","title":"Methods"},{"location":"reference/classes/presets.Presets/#area","text":"\u25b8 area ( config ): any Parameters Name Type config Area Returns any","title":"area"},{"location":"reference/classes/presets.Presets/#bar","text":"\u25b8 bar ( config ): any Parameters Name Type config Bar Returns any","title":"bar"},{"location":"reference/classes/presets.Presets/#bubble","text":"\u25b8 bubble ( config ): any Parameters Name Type config Bubble Returns any","title":"bubble"},{"location":"reference/classes/presets.Presets/#bubbleplot","text":"\u25b8 bubbleplot ( config ): any Parameters Name Type config Bubbleplot Returns any","title":"bubbleplot"},{"location":"reference/classes/presets.Presets/#column","text":"\u25b8 column ( config ): any Parameters Name Type config Column Returns any","title":"column"},{"location":"reference/classes/presets.Presets/#donut","text":"\u25b8 donut ( config ): any Parameters Name Type config Donut Returns any","title":"donut"},{"location":"reference/classes/presets.Presets/#groupedbar","text":"\u25b8 groupedBar ( config ): any Parameters Name Type config GroupedBar Returns any","title":"groupedBar"},{"location":"reference/classes/presets.Presets/#groupedcolumn","text":"\u25b8 groupedColumn ( config ): any Parameters Name Type config GroupedColumn Returns any","title":"groupedColumn"},{"location":"reference/classes/presets.Presets/#heatmap","text":"\u25b8 heatmap ( config ): any Parameters Name Type config Heatmap Returns any","title":"heatmap"},{"location":"reference/classes/presets.Presets/#line","text":"\u25b8 line ( config ): any Parameters Name Type config Line Returns any","title":"line"},{"location":"reference/classes/presets.Presets/#lollipop","text":"\u25b8 lollipop ( config ): any Parameters Name Type config Lollipop Returns any","title":"lollipop"},{"location":"reference/classes/presets.Presets/#marimekko","text":"\u25b8 marimekko ( config ): any Parameters Name Type config Marimekko Returns any","title":"marimekko"},{"location":"reference/classes/presets.Presets/#mekko","text":"\u25b8 mekko ( config ): any Parameters Name Type config Mekko Returns any","title":"mekko"},{"location":"reference/classes/presets.Presets/#nesteddonut","text":"\u25b8 nestedDonut ( config ): any Parameters Name Type config NestedDonut Returns any","title":"nestedDonut"},{"location":"reference/classes/presets.Presets/#percentagearea","text":"\u25b8 percentageArea ( config ): any Parameters Name Type config PercentageArea Returns any","title":"percentageArea"},{"location":"reference/classes/presets.Presets/#percentagebar","text":"\u25b8 percentageBar ( config ): any Parameters Name Type config PercentageBar Returns any","title":"percentageBar"},{"location":"reference/classes/presets.Presets/#percentagecolumn","text":"\u25b8 percentageColumn ( config ): any Parameters Name Type config PercentageColumn Returns any","title":"percentageColumn"},{"location":"reference/classes/presets.Presets/#pie","text":"\u25b8 pie ( config ): any Parameters Name Type config Pie Returns any","title":"pie"},{"location":"reference/classes/presets.Presets/#polarcolumn","text":"\u25b8 polarColumn ( config ): any Parameters Name Type config PolarColumn Returns any","title":"polarColumn"},{"location":"reference/classes/presets.Presets/#polarline","text":"\u25b8 polarLine ( config ): any Parameters Name Type config PolarLine Returns any","title":"polarLine"},{"location":"reference/classes/presets.Presets/#polarscatter","text":"\u25b8 polarScatter ( config ): any Parameters Name Type config PolarScatter Returns any","title":"polarScatter"},{"location":"reference/classes/presets.Presets/#polarstackedcolumn","text":"\u25b8 polarStackedColumn ( config ): any Parameters Name Type config PolarStackedColumn Returns any","title":"polarStackedColumn"},{"location":"reference/classes/presets.Presets/#radialbar","text":"\u25b8 radialBar ( config ): any Parameters Name Type config RadialBar Returns any","title":"radialBar"},{"location":"reference/classes/presets.Presets/#radialstackedbar","text":"\u25b8 radialStackedBar ( config ): any Parameters Name Type config RadialStackedBar Returns any","title":"radialStackedBar"},{"location":"reference/classes/presets.Presets/#scatter","text":"\u25b8 scatter ( config ): any Parameters Name Type config Scatter Returns any","title":"scatter"},{"location":"reference/classes/presets.Presets/#splittedarea","text":"\u25b8 splittedArea ( config ): any Parameters Name Type config SplittedArea Returns any","title":"splittedArea"},{"location":"reference/classes/presets.Presets/#splittedbar","text":"\u25b8 splittedBar ( config ): any Parameters Name Type config SplittedBar Returns any","title":"splittedBar"},{"location":"reference/classes/presets.Presets/#splittedcolumn","text":"\u25b8 splittedColumn ( config ): any Parameters Name Type config SplittedColumn Returns any","title":"splittedColumn"},{"location":"reference/classes/presets.Presets/#stackedarea","text":"\u25b8 stackedArea ( config ): any Parameters Name Type config StackedArea Returns any","title":"stackedArea"},{"location":"reference/classes/presets.Presets/#stackedbar","text":"\u25b8 stackedBar ( config ): any Parameters Name Type config StackedBar Returns any","title":"stackedBar"},{"location":"reference/classes/presets.Presets/#stackedbubble","text":"\u25b8 stackedBubble ( config ): any Parameters Name Type config StackedBubble Returns any","title":"stackedBubble"},{"location":"reference/classes/presets.Presets/#stackedcolumn","text":"\u25b8 stackedColumn ( config ): any Parameters Name Type config StackedColumn Returns any","title":"stackedColumn"},{"location":"reference/classes/presets.Presets/#stackedtreemap","text":"\u25b8 stackedTreemap ( config ): any Parameters Name Type config StackedTreemap Returns any","title":"stackedTreemap"},{"location":"reference/classes/presets.Presets/#stream","text":"\u25b8 stream ( config ): any Parameters Name Type config Stream Returns any","title":"stream"},{"location":"reference/classes/presets.Presets/#treemap","text":"\u25b8 treemap ( config ): any Parameters Name Type config Treemap Returns any","title":"treemap"},{"location":"reference/classes/presets.Presets/#variableradiuspie","text":"\u25b8 variableRadiusPie ( config ): any Parameters Name Type config VariableRadiusPie Returns any","title":"variableRadiusPie"},{"location":"reference/classes/presets.Presets/#verticalline","text":"\u25b8 verticalLine ( config ): any Parameters Name Type config VerticalLine Returns any","title":"verticalLine"},{"location":"reference/classes/presets.Presets/#verticalstream","text":"\u25b8 verticalStream ( config ): any Parameters Name Type config VerticalStream Returns any","title":"verticalStream"},{"location":"reference/classes/presets.Presets/#verticalviolin","text":"\u25b8 verticalViolin ( config ): any Parameters Name Type config VerticalViolin Returns any","title":"verticalViolin"},{"location":"reference/classes/presets.Presets/#violin","text":"\u25b8 violin ( config ): any Parameters Name Type config Violin Returns any","title":"violin"},{"location":"reference/classes/presets.Presets/#waterfall","text":"\u25b8 waterfall ( config ): any Parameters Name Type config Waterfall Returns any","title":"waterfall"},{"location":"reference/classes/vizzu.Vizzu/","text":"Vizzu / Modules / vizzu / Vizzu Class: Vizzu vizzu .Vizzu Class representing a single chart in Vizzu. Constructors constructor \u2022 new Vizzu ( container , initState? ) Creates a new chart and connects it to the div or canvas HTML element specified by its ID or DOM object. The new chart is empty by default, but can be set to an initial state in the second optional parameter. Parameters Name Type container string | HTMLElement initState? Chart | Target Properties config \u2022 config : Readonly \\< Chart > Property for read-only access to chart parameter object. data \u2022 data : Readonly \\< Metainfo > Property for read-only access to data metainfo object. initializing \u2022 initializing : Promise \\< Vizzu > Promise representing the initialization will resolve when initialization is finished. Any API call will potentially cause an error before this promise is resolved. style \u2022 style : Readonly \\< Chart > Property for read-only access to style object without default values. Accessors animation \u2022 get animation (): Control Returns controls for the ongoing animation, if any. Deprecated since version 0.4.0 Returns Control presets \u2022 Static get presets (): Preset Returns the chart preset collection. Returns Preset Methods animate \u25b8 animate ( animTarget , animOptions? ): Completing Initiates the animation either to the new chart state passed as the first argument, or through a sequence of keyframe charts passed as the first argument. If there is a currently running animation, all subsequent calls will schedule the corresponding animation after the end of the previous one. The new chart state or keyframe can be a full state specifier object with data, config and style, or a single chart config object. It accepts also a chart snapshot acquired from a previous state using the store() method of this class or a whole previous animation acquired using the store() method of the Anim.Control object, which can be queried from the promise returned by the animate() method. The optional second parameter specifies the animation control options and also all the other animation options in case of only a single chart state passed as the first argument. This second option can be a scalar value, setting the overall animation duration. Passing explicit null as second parameter will result in no animation. The method returns a promise, which will resolve when the animation is finished. Since there can be multiple animations in the queue, the result promise provides a nested promise member activated , which resolves when the requested animation gets active. Parameters Name Type animTarget Animation | LazyTarget | Keyframes animOptions? ControlOptions | Object Returns Completing detach \u25b8 detach (): void Removes the reference of the chart from every place it attached itself, this method must be called in order to get the chart properly garbage collected. Returns void feature \u25b8 feature ( name , enabled ): void Enable/disable additional features. Parameters Name Type name Feature enabled boolean Returns void getComputedStyle \u25b8 getComputedStyle (): Readonly \\< Chart > Property for read-only access to the style object after setting defaults. Returns Readonly \\< Chart > off \u25b8 off ( eventName , handler ): void Uninstalls the provided event handler from the event specified by name. Parameters Name Type eventName Type handler ( event : Object ) => void Returns void on \u25b8 on ( eventName , handler ): void Installs the provided event handler to the event specified by name. Parameters Name Type eventName Type handler ( event : Object ) => void Returns void store \u25b8 store (): Snapshot Returns a reference to the actual chart state for further reuse. This reference includes the chart config, style parameters and the data filter but does not include the actual data and the animation options. Returns Snapshot version \u25b8 version (): string Returns the version number of the library. Returns string options \u25b8 Static options ( options ): void Setter method for Library options. Parameters Name Type options Options Returns void","title":"vizzu.Vizzu"},{"location":"reference/classes/vizzu.Vizzu/#class-vizzu","text":"vizzu .Vizzu Class representing a single chart in Vizzu.","title":"Class: Vizzu"},{"location":"reference/classes/vizzu.Vizzu/#constructors","text":"","title":"Constructors"},{"location":"reference/classes/vizzu.Vizzu/#constructor","text":"\u2022 new Vizzu ( container , initState? ) Creates a new chart and connects it to the div or canvas HTML element specified by its ID or DOM object. The new chart is empty by default, but can be set to an initial state in the second optional parameter. Parameters Name Type container string | HTMLElement initState? Chart | Target","title":"constructor"},{"location":"reference/classes/vizzu.Vizzu/#properties","text":"","title":"Properties"},{"location":"reference/classes/vizzu.Vizzu/#config","text":"\u2022 config : Readonly \\< Chart > Property for read-only access to chart parameter object.","title":"config"},{"location":"reference/classes/vizzu.Vizzu/#data","text":"\u2022 data : Readonly \\< Metainfo > Property for read-only access to data metainfo object.","title":"data"},{"location":"reference/classes/vizzu.Vizzu/#initializing","text":"\u2022 initializing : Promise \\< Vizzu > Promise representing the initialization will resolve when initialization is finished. Any API call will potentially cause an error before this promise is resolved.","title":"initializing"},{"location":"reference/classes/vizzu.Vizzu/#style","text":"\u2022 style : Readonly \\< Chart > Property for read-only access to style object without default values.","title":"style"},{"location":"reference/classes/vizzu.Vizzu/#accessors","text":"","title":"Accessors"},{"location":"reference/classes/vizzu.Vizzu/#animation","text":"\u2022 get animation (): Control Returns controls for the ongoing animation, if any. Deprecated since version 0.4.0 Returns Control","title":"animation"},{"location":"reference/classes/vizzu.Vizzu/#presets","text":"\u2022 Static get presets (): Preset Returns the chart preset collection. Returns Preset","title":"presets"},{"location":"reference/classes/vizzu.Vizzu/#methods","text":"","title":"Methods"},{"location":"reference/classes/vizzu.Vizzu/#animate","text":"\u25b8 animate ( animTarget , animOptions? ): Completing Initiates the animation either to the new chart state passed as the first argument, or through a sequence of keyframe charts passed as the first argument. If there is a currently running animation, all subsequent calls will schedule the corresponding animation after the end of the previous one. The new chart state or keyframe can be a full state specifier object with data, config and style, or a single chart config object. It accepts also a chart snapshot acquired from a previous state using the store() method of this class or a whole previous animation acquired using the store() method of the Anim.Control object, which can be queried from the promise returned by the animate() method. The optional second parameter specifies the animation control options and also all the other animation options in case of only a single chart state passed as the first argument. This second option can be a scalar value, setting the overall animation duration. Passing explicit null as second parameter will result in no animation. The method returns a promise, which will resolve when the animation is finished. Since there can be multiple animations in the queue, the result promise provides a nested promise member activated , which resolves when the requested animation gets active. Parameters Name Type animTarget Animation | LazyTarget | Keyframes animOptions? ControlOptions | Object Returns Completing","title":"animate"},{"location":"reference/classes/vizzu.Vizzu/#detach","text":"\u25b8 detach (): void Removes the reference of the chart from every place it attached itself, this method must be called in order to get the chart properly garbage collected. Returns void","title":"detach"},{"location":"reference/classes/vizzu.Vizzu/#feature","text":"\u25b8 feature ( name , enabled ): void Enable/disable additional features. Parameters Name Type name Feature enabled boolean Returns void","title":"feature"},{"location":"reference/classes/vizzu.Vizzu/#getcomputedstyle","text":"\u25b8 getComputedStyle (): Readonly \\< Chart > Property for read-only access to the style object after setting defaults. Returns Readonly \\< Chart >","title":"getComputedStyle"},{"location":"reference/classes/vizzu.Vizzu/#off","text":"\u25b8 off ( eventName , handler ): void Uninstalls the provided event handler from the event specified by name. Parameters Name Type eventName Type handler ( event : Object ) => void Returns void","title":"off"},{"location":"reference/classes/vizzu.Vizzu/#on","text":"\u25b8 on ( eventName , handler ): void Installs the provided event handler to the event specified by name. Parameters Name Type eventName Type handler ( event : Object ) => void Returns void","title":"on"},{"location":"reference/classes/vizzu.Vizzu/#store","text":"\u25b8 store (): Snapshot Returns a reference to the actual chart state for further reuse. This reference includes the chart config, style parameters and the data filter but does not include the actual data and the animation options. Returns Snapshot","title":"store"},{"location":"reference/classes/vizzu.Vizzu/#version","text":"\u25b8 version (): string Returns the version number of the library. Returns string","title":"version"},{"location":"reference/classes/vizzu.Vizzu/#options","text":"\u25b8 Static options ( options ): void Setter method for Library options. Parameters Name Type options Options Returns void","title":"options"},{"location":"reference/interfaces/presets.Area/","text":"Vizzu / Modules / presets / Area Interface: Area presets .Area Hierarchy Preset \u21b3 Area Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Area"},{"location":"reference/interfaces/presets.Area/#interface-area","text":"presets .Area","title":"Interface: Area"},{"location":"reference/interfaces/presets.Area/#hierarchy","text":"Preset \u21b3 Area","title":"Hierarchy"},{"location":"reference/interfaces/presets.Area/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Area/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Area/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Area/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Area/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Area/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Area/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Bar/","text":"Vizzu / Modules / presets / Bar Interface: Bar presets .Bar Hierarchy Preset \u21b3 Bar Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Bar"},{"location":"reference/interfaces/presets.Bar/#interface-bar","text":"presets .Bar","title":"Interface: Bar"},{"location":"reference/interfaces/presets.Bar/#hierarchy","text":"Preset \u21b3 Bar","title":"Hierarchy"},{"location":"reference/interfaces/presets.Bar/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Bar/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Bar/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Bar/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Bar/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Bar/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Bar/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Bubble/","text":"Vizzu / Modules / presets / Bubble Interface: Bubble presets .Bubble Hierarchy Preset \u21b3 Bubble Properties color \u2022 color : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse size \u2022 size : string | string [] sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title","title":"presets.Bubble"},{"location":"reference/interfaces/presets.Bubble/#interface-bubble","text":"presets .Bubble","title":"Interface: Bubble"},{"location":"reference/interfaces/presets.Bubble/#hierarchy","text":"Preset \u21b3 Bubble","title":"Hierarchy"},{"location":"reference/interfaces/presets.Bubble/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Bubble/#color","text":"\u2022 color : string | string []","title":"color"},{"location":"reference/interfaces/presets.Bubble/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Bubble/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Bubble/#size","text":"\u2022 size : string | string []","title":"size"},{"location":"reference/interfaces/presets.Bubble/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Bubble/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Bubbleplot/","text":"Vizzu / Modules / presets / Bubbleplot Interface: Bubbleplot presets .Bubbleplot Hierarchy Preset \u21b3 Bubbleplot Properties color \u2022 color : string | string [] dividedBy \u2022 dividedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse size \u2022 size : string | string [] sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Bubbleplot"},{"location":"reference/interfaces/presets.Bubbleplot/#interface-bubbleplot","text":"presets .Bubbleplot","title":"Interface: Bubbleplot"},{"location":"reference/interfaces/presets.Bubbleplot/#hierarchy","text":"Preset \u21b3 Bubbleplot","title":"Hierarchy"},{"location":"reference/interfaces/presets.Bubbleplot/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Bubbleplot/#color","text":"\u2022 color : string | string []","title":"color"},{"location":"reference/interfaces/presets.Bubbleplot/#dividedby","text":"\u2022 dividedBy : string | string []","title":"dividedBy"},{"location":"reference/interfaces/presets.Bubbleplot/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Bubbleplot/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Bubbleplot/#size","text":"\u2022 size : string | string []","title":"size"},{"location":"reference/interfaces/presets.Bubbleplot/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Bubbleplot/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Bubbleplot/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Bubbleplot/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Column/","text":"Vizzu / Modules / presets / Column Interface: Column presets .Column Hierarchy Preset \u21b3 Column Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Column"},{"location":"reference/interfaces/presets.Column/#interface-column","text":"presets .Column","title":"Interface: Column"},{"location":"reference/interfaces/presets.Column/#hierarchy","text":"Preset \u21b3 Column","title":"Hierarchy"},{"location":"reference/interfaces/presets.Column/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Column/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Column/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Column/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Column/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Column/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Column/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Donut/","text":"Vizzu / Modules / presets / Donut Interface: Donut presets .Donut Hierarchy Preset \u21b3 Donut Properties angle \u2022 angle : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title","title":"presets.Donut"},{"location":"reference/interfaces/presets.Donut/#interface-donut","text":"presets .Donut","title":"Interface: Donut"},{"location":"reference/interfaces/presets.Donut/#hierarchy","text":"Preset \u21b3 Donut","title":"Hierarchy"},{"location":"reference/interfaces/presets.Donut/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Donut/#angle","text":"\u2022 angle : string | string []","title":"angle"},{"location":"reference/interfaces/presets.Donut/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Donut/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Donut/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Donut/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.Donut/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.GroupedBar/","text":"Vizzu / Modules / presets / GroupedBar Interface: GroupedBar presets .GroupedBar Hierarchy Preset \u21b3 GroupedBar Properties groupedBy \u2022 groupedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.GroupedBar"},{"location":"reference/interfaces/presets.GroupedBar/#interface-groupedbar","text":"presets .GroupedBar","title":"Interface: GroupedBar"},{"location":"reference/interfaces/presets.GroupedBar/#hierarchy","text":"Preset \u21b3 GroupedBar","title":"Hierarchy"},{"location":"reference/interfaces/presets.GroupedBar/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.GroupedBar/#groupedby","text":"\u2022 groupedBy : string | string []","title":"groupedBy"},{"location":"reference/interfaces/presets.GroupedBar/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.GroupedBar/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.GroupedBar/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.GroupedBar/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.GroupedBar/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.GroupedBar/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.GroupedColumn/","text":"Vizzu / Modules / presets / GroupedColumn Interface: GroupedColumn presets .GroupedColumn Hierarchy Preset \u21b3 GroupedColumn Properties groupedBy \u2022 groupedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.GroupedColumn"},{"location":"reference/interfaces/presets.GroupedColumn/#interface-groupedcolumn","text":"presets .GroupedColumn","title":"Interface: GroupedColumn"},{"location":"reference/interfaces/presets.GroupedColumn/#hierarchy","text":"Preset \u21b3 GroupedColumn","title":"Hierarchy"},{"location":"reference/interfaces/presets.GroupedColumn/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.GroupedColumn/#groupedby","text":"\u2022 groupedBy : string | string []","title":"groupedBy"},{"location":"reference/interfaces/presets.GroupedColumn/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.GroupedColumn/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.GroupedColumn/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.GroupedColumn/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.GroupedColumn/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.GroupedColumn/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Heatmap/","text":"Vizzu / Modules / presets / Heatmap Interface: Heatmap presets .Heatmap Hierarchy Preset \u21b3 Heatmap Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend lightness \u2022 lightness : string | string [] reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Heatmap"},{"location":"reference/interfaces/presets.Heatmap/#interface-heatmap","text":"presets .Heatmap","title":"Interface: Heatmap"},{"location":"reference/interfaces/presets.Heatmap/#hierarchy","text":"Preset \u21b3 Heatmap","title":"Hierarchy"},{"location":"reference/interfaces/presets.Heatmap/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Heatmap/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Heatmap/#lightness","text":"\u2022 lightness : string | string []","title":"lightness"},{"location":"reference/interfaces/presets.Heatmap/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Heatmap/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Heatmap/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Heatmap/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Heatmap/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Line/","text":"Vizzu / Modules / presets / Line Interface: Line presets .Line Hierarchy Preset \u21b3 Line Properties dividedBy \u2022 dividedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Line"},{"location":"reference/interfaces/presets.Line/#interface-line","text":"presets .Line","title":"Interface: Line"},{"location":"reference/interfaces/presets.Line/#hierarchy","text":"Preset \u21b3 Line","title":"Hierarchy"},{"location":"reference/interfaces/presets.Line/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Line/#dividedby","text":"\u2022 dividedBy : string | string []","title":"dividedBy"},{"location":"reference/interfaces/presets.Line/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Line/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Line/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Line/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Line/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Line/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Lollipop/","text":"Vizzu / Modules / presets / Lollipop Interface: Lollipop presets .Lollipop Hierarchy Preset \u21b3 Lollipop Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Lollipop"},{"location":"reference/interfaces/presets.Lollipop/#interface-lollipop","text":"presets .Lollipop","title":"Interface: Lollipop"},{"location":"reference/interfaces/presets.Lollipop/#hierarchy","text":"Preset \u21b3 Lollipop","title":"Hierarchy"},{"location":"reference/interfaces/presets.Lollipop/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Lollipop/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Lollipop/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Lollipop/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Lollipop/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Lollipop/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Lollipop/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Marimekko/","text":"Vizzu / Modules / presets / Marimekko Interface: Marimekko presets .Marimekko Hierarchy Preset \u21b3 Marimekko Properties groupedBy \u2022 groupedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Marimekko"},{"location":"reference/interfaces/presets.Marimekko/#interface-marimekko","text":"presets .Marimekko","title":"Interface: Marimekko"},{"location":"reference/interfaces/presets.Marimekko/#hierarchy","text":"Preset \u21b3 Marimekko","title":"Hierarchy"},{"location":"reference/interfaces/presets.Marimekko/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Marimekko/#groupedby","text":"\u2022 groupedBy : string | string []","title":"groupedBy"},{"location":"reference/interfaces/presets.Marimekko/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Marimekko/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Marimekko/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Marimekko/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.Marimekko/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Marimekko/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Marimekko/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Mekko/","text":"Vizzu / Modules / presets / Mekko Interface: Mekko presets .Mekko Hierarchy Preset \u21b3 Mekko Properties groupedBy \u2022 groupedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Mekko"},{"location":"reference/interfaces/presets.Mekko/#interface-mekko","text":"presets .Mekko","title":"Interface: Mekko"},{"location":"reference/interfaces/presets.Mekko/#hierarchy","text":"Preset \u21b3 Mekko","title":"Hierarchy"},{"location":"reference/interfaces/presets.Mekko/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Mekko/#groupedby","text":"\u2022 groupedBy : string | string []","title":"groupedBy"},{"location":"reference/interfaces/presets.Mekko/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Mekko/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Mekko/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Mekko/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.Mekko/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Mekko/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Mekko/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.NestedDonut/","text":"Vizzu / Modules / presets / NestedDonut Interface: NestedDonut presets .NestedDonut Hierarchy Preset \u21b3 NestedDonut Properties angle \u2022 angle : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend radius \u2022 radius : string | string [] reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title","title":"presets.NestedDonut"},{"location":"reference/interfaces/presets.NestedDonut/#interface-nesteddonut","text":"presets .NestedDonut","title":"Interface: NestedDonut"},{"location":"reference/interfaces/presets.NestedDonut/#hierarchy","text":"Preset \u21b3 NestedDonut","title":"Hierarchy"},{"location":"reference/interfaces/presets.NestedDonut/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.NestedDonut/#angle","text":"\u2022 angle : string | string []","title":"angle"},{"location":"reference/interfaces/presets.NestedDonut/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.NestedDonut/#radius","text":"\u2022 radius : string | string []","title":"radius"},{"location":"reference/interfaces/presets.NestedDonut/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.NestedDonut/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.NestedDonut/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.NestedDonut/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.PercentageArea/","text":"Vizzu / Modules / presets / PercentageArea Interface: PercentageArea presets .PercentageArea Hierarchy Preset \u21b3 PercentageArea Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.PercentageArea"},{"location":"reference/interfaces/presets.PercentageArea/#interface-percentagearea","text":"presets .PercentageArea","title":"Interface: PercentageArea"},{"location":"reference/interfaces/presets.PercentageArea/#hierarchy","text":"Preset \u21b3 PercentageArea","title":"Hierarchy"},{"location":"reference/interfaces/presets.PercentageArea/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.PercentageArea/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.PercentageArea/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.PercentageArea/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.PercentageArea/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.PercentageArea/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.PercentageArea/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.PercentageArea/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.PercentageBar/","text":"Vizzu / Modules / presets / PercentageBar Interface: PercentageBar presets .PercentageBar Hierarchy Preset \u21b3 PercentageBar Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.PercentageBar"},{"location":"reference/interfaces/presets.PercentageBar/#interface-percentagebar","text":"presets .PercentageBar","title":"Interface: PercentageBar"},{"location":"reference/interfaces/presets.PercentageBar/#hierarchy","text":"Preset \u21b3 PercentageBar","title":"Hierarchy"},{"location":"reference/interfaces/presets.PercentageBar/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.PercentageBar/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.PercentageBar/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.PercentageBar/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.PercentageBar/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.PercentageBar/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.PercentageBar/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.PercentageBar/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.PercentageColumn/","text":"Vizzu / Modules / presets / PercentageColumn Interface: PercentageColumn presets .PercentageColumn Hierarchy Preset \u21b3 PercentageColumn Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.PercentageColumn"},{"location":"reference/interfaces/presets.PercentageColumn/#interface-percentagecolumn","text":"presets .PercentageColumn","title":"Interface: PercentageColumn"},{"location":"reference/interfaces/presets.PercentageColumn/#hierarchy","text":"Preset \u21b3 PercentageColumn","title":"Hierarchy"},{"location":"reference/interfaces/presets.PercentageColumn/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.PercentageColumn/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.PercentageColumn/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.PercentageColumn/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.PercentageColumn/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.PercentageColumn/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.PercentageColumn/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.PercentageColumn/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Pie/","text":"Vizzu / Modules / presets / Pie Interface: Pie presets .Pie Hierarchy Preset \u21b3 Pie Properties angle \u2022 angle : string | string [] by \u2022 by : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title","title":"presets.Pie"},{"location":"reference/interfaces/presets.Pie/#interface-pie","text":"presets .Pie","title":"Interface: Pie"},{"location":"reference/interfaces/presets.Pie/#hierarchy","text":"Preset \u21b3 Pie","title":"Hierarchy"},{"location":"reference/interfaces/presets.Pie/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Pie/#angle","text":"\u2022 angle : string | string []","title":"angle"},{"location":"reference/interfaces/presets.Pie/#by","text":"\u2022 by : string | string []","title":"by"},{"location":"reference/interfaces/presets.Pie/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Pie/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Pie/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Pie/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.PolarColumn/","text":"Vizzu / Modules / presets / PolarColumn Interface: PolarColumn presets .PolarColumn Hierarchy Preset \u21b3 PolarColumn Properties angle \u2022 angle : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend radius \u2022 radius : string | string [] reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title","title":"presets.PolarColumn"},{"location":"reference/interfaces/presets.PolarColumn/#interface-polarcolumn","text":"presets .PolarColumn","title":"Interface: PolarColumn"},{"location":"reference/interfaces/presets.PolarColumn/#hierarchy","text":"Preset \u21b3 PolarColumn","title":"Hierarchy"},{"location":"reference/interfaces/presets.PolarColumn/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.PolarColumn/#angle","text":"\u2022 angle : string | string []","title":"angle"},{"location":"reference/interfaces/presets.PolarColumn/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.PolarColumn/#radius","text":"\u2022 radius : string | string []","title":"radius"},{"location":"reference/interfaces/presets.PolarColumn/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.PolarColumn/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.PolarColumn/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.PolarLine/","text":"Vizzu / Modules / presets / PolarLine Interface: PolarLine presets .PolarLine Hierarchy Preset \u21b3 PolarLine Properties angle \u2022 angle : string | string [] dividedBy \u2022 dividedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend radius \u2022 radius : string | string [] reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title","title":"presets.PolarLine"},{"location":"reference/interfaces/presets.PolarLine/#interface-polarline","text":"presets .PolarLine","title":"Interface: PolarLine"},{"location":"reference/interfaces/presets.PolarLine/#hierarchy","text":"Preset \u21b3 PolarLine","title":"Hierarchy"},{"location":"reference/interfaces/presets.PolarLine/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.PolarLine/#angle","text":"\u2022 angle : string | string []","title":"angle"},{"location":"reference/interfaces/presets.PolarLine/#dividedby","text":"\u2022 dividedBy : string | string []","title":"dividedBy"},{"location":"reference/interfaces/presets.PolarLine/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.PolarLine/#radius","text":"\u2022 radius : string | string []","title":"radius"},{"location":"reference/interfaces/presets.PolarLine/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.PolarLine/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.PolarLine/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.PolarScatter/","text":"Vizzu / Modules / presets / PolarScatter Interface: PolarScatter presets .PolarScatter Hierarchy Preset \u21b3 PolarScatter Properties angle \u2022 angle : string | string [] dividedBy \u2022 dividedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend radius \u2022 radius : string | string [] reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title","title":"presets.PolarScatter"},{"location":"reference/interfaces/presets.PolarScatter/#interface-polarscatter","text":"presets .PolarScatter","title":"Interface: PolarScatter"},{"location":"reference/interfaces/presets.PolarScatter/#hierarchy","text":"Preset \u21b3 PolarScatter","title":"Hierarchy"},{"location":"reference/interfaces/presets.PolarScatter/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.PolarScatter/#angle","text":"\u2022 angle : string | string []","title":"angle"},{"location":"reference/interfaces/presets.PolarScatter/#dividedby","text":"\u2022 dividedBy : string | string []","title":"dividedBy"},{"location":"reference/interfaces/presets.PolarScatter/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.PolarScatter/#radius","text":"\u2022 radius : string | string []","title":"radius"},{"location":"reference/interfaces/presets.PolarScatter/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.PolarScatter/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.PolarScatter/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.PolarStackedColumn/","text":"Vizzu / Modules / presets / PolarStackedColumn Interface: PolarStackedColumn presets .PolarStackedColumn Hierarchy Preset \u21b3 PolarStackedColumn Properties angle \u2022 angle : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend radius \u2022 radius : string | string [] reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title","title":"presets.PolarStackedColumn"},{"location":"reference/interfaces/presets.PolarStackedColumn/#interface-polarstackedcolumn","text":"presets .PolarStackedColumn","title":"Interface: PolarStackedColumn"},{"location":"reference/interfaces/presets.PolarStackedColumn/#hierarchy","text":"Preset \u21b3 PolarStackedColumn","title":"Hierarchy"},{"location":"reference/interfaces/presets.PolarStackedColumn/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.PolarStackedColumn/#angle","text":"\u2022 angle : string | string []","title":"angle"},{"location":"reference/interfaces/presets.PolarStackedColumn/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.PolarStackedColumn/#radius","text":"\u2022 radius : string | string []","title":"radius"},{"location":"reference/interfaces/presets.PolarStackedColumn/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.PolarStackedColumn/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.PolarStackedColumn/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.PolarStackedColumn/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Preset/","text":"Vizzu / Modules / presets / Preset Interface: Preset presets .Preset Hierarchy Preset \u21b3 Column \u21b3 GroupedColumn \u21b3 StackedColumn \u21b3 SplittedColumn \u21b3 PercentageColumn \u21b3 Waterfall \u21b3 Mekko \u21b3 Marimekko \u21b3 Bar \u21b3 GroupedBar \u21b3 StackedBar \u21b3 SplittedBar \u21b3 PercentageBar \u21b3 Lollipop \u21b3 Scatter \u21b3 Bubbleplot \u21b3 Area \u21b3 StackedArea \u21b3 PercentageArea \u21b3 SplittedArea \u21b3 Stream \u21b3 VerticalStream \u21b3 Violin \u21b3 VerticalViolin \u21b3 Line \u21b3 VerticalLine \u21b3 Pie \u21b3 PolarColumn \u21b3 PolarStackedColumn \u21b3 VariableRadiusPie \u21b3 RadialBar \u21b3 RadialStackedBar \u21b3 Donut \u21b3 NestedDonut \u21b3 PolarScatter \u21b3 PolarLine \u21b3 Treemap \u21b3 StackedTreemap \u21b3 Heatmap \u21b3 Bubble \u21b3 StackedBubble Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" reverse \u2022 Optional reverse : boolean sort \u2022 Optional sort : \"none\" | \"byValue\" title \u2022 Optional title : string","title":"presets.Preset"},{"location":"reference/interfaces/presets.Preset/#interface-preset","text":"presets .Preset","title":"Interface: Preset"},{"location":"reference/interfaces/presets.Preset/#hierarchy","text":"Preset \u21b3 Column \u21b3 GroupedColumn \u21b3 StackedColumn \u21b3 SplittedColumn \u21b3 PercentageColumn \u21b3 Waterfall \u21b3 Mekko \u21b3 Marimekko \u21b3 Bar \u21b3 GroupedBar \u21b3 StackedBar \u21b3 SplittedBar \u21b3 PercentageBar \u21b3 Lollipop \u21b3 Scatter \u21b3 Bubbleplot \u21b3 Area \u21b3 StackedArea \u21b3 PercentageArea \u21b3 SplittedArea \u21b3 Stream \u21b3 VerticalStream \u21b3 Violin \u21b3 VerticalViolin \u21b3 Line \u21b3 VerticalLine \u21b3 Pie \u21b3 PolarColumn \u21b3 PolarStackedColumn \u21b3 VariableRadiusPie \u21b3 RadialBar \u21b3 RadialStackedBar \u21b3 Donut \u21b3 NestedDonut \u21b3 PolarScatter \u21b3 PolarLine \u21b3 Treemap \u21b3 StackedTreemap \u21b3 Heatmap \u21b3 Bubble \u21b3 StackedBubble","title":"Hierarchy"},{"location":"reference/interfaces/presets.Preset/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Preset/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\"","title":"legend"},{"location":"reference/interfaces/presets.Preset/#reverse","text":"\u2022 Optional reverse : boolean","title":"reverse"},{"location":"reference/interfaces/presets.Preset/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\"","title":"sort"},{"location":"reference/interfaces/presets.Preset/#title","text":"\u2022 Optional title : string","title":"title"},{"location":"reference/interfaces/presets.RadialBar/","text":"Vizzu / Modules / presets / RadialBar Interface: RadialBar presets .RadialBar Hierarchy Preset \u21b3 RadialBar Properties angle \u2022 angle : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend radius \u2022 radius : string | string [] reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title","title":"presets.RadialBar"},{"location":"reference/interfaces/presets.RadialBar/#interface-radialbar","text":"presets .RadialBar","title":"Interface: RadialBar"},{"location":"reference/interfaces/presets.RadialBar/#hierarchy","text":"Preset \u21b3 RadialBar","title":"Hierarchy"},{"location":"reference/interfaces/presets.RadialBar/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.RadialBar/#angle","text":"\u2022 angle : string | string []","title":"angle"},{"location":"reference/interfaces/presets.RadialBar/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.RadialBar/#radius","text":"\u2022 radius : string | string []","title":"radius"},{"location":"reference/interfaces/presets.RadialBar/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.RadialBar/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.RadialBar/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.RadialStackedBar/","text":"Vizzu / Modules / presets / RadialStackedBar Interface: RadialStackedBar presets .RadialStackedBar Hierarchy Preset \u21b3 RadialStackedBar Properties angle \u2022 angle : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend radius \u2022 radius : string | string [] reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title","title":"presets.RadialStackedBar"},{"location":"reference/interfaces/presets.RadialStackedBar/#interface-radialstackedbar","text":"presets .RadialStackedBar","title":"Interface: RadialStackedBar"},{"location":"reference/interfaces/presets.RadialStackedBar/#hierarchy","text":"Preset \u21b3 RadialStackedBar","title":"Hierarchy"},{"location":"reference/interfaces/presets.RadialStackedBar/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.RadialStackedBar/#angle","text":"\u2022 angle : string | string []","title":"angle"},{"location":"reference/interfaces/presets.RadialStackedBar/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.RadialStackedBar/#radius","text":"\u2022 radius : string | string []","title":"radius"},{"location":"reference/interfaces/presets.RadialStackedBar/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.RadialStackedBar/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.RadialStackedBar/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.RadialStackedBar/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Scatter/","text":"Vizzu / Modules / presets / Scatter Interface: Scatter presets .Scatter Hierarchy Preset \u21b3 Scatter Properties dividedBy \u2022 dividedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Scatter"},{"location":"reference/interfaces/presets.Scatter/#interface-scatter","text":"presets .Scatter","title":"Interface: Scatter"},{"location":"reference/interfaces/presets.Scatter/#hierarchy","text":"Preset \u21b3 Scatter","title":"Hierarchy"},{"location":"reference/interfaces/presets.Scatter/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Scatter/#dividedby","text":"\u2022 dividedBy : string | string []","title":"dividedBy"},{"location":"reference/interfaces/presets.Scatter/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Scatter/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Scatter/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Scatter/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Scatter/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Scatter/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.SplittedArea/","text":"Vizzu / Modules / presets / SplittedArea Interface: SplittedArea presets .SplittedArea Hierarchy Preset \u21b3 SplittedArea Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort splittedBy \u2022 splittedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.SplittedArea"},{"location":"reference/interfaces/presets.SplittedArea/#interface-splittedarea","text":"presets .SplittedArea","title":"Interface: SplittedArea"},{"location":"reference/interfaces/presets.SplittedArea/#hierarchy","text":"Preset \u21b3 SplittedArea","title":"Hierarchy"},{"location":"reference/interfaces/presets.SplittedArea/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.SplittedArea/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.SplittedArea/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.SplittedArea/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.SplittedArea/#splittedby","text":"\u2022 splittedBy : string | string []","title":"splittedBy"},{"location":"reference/interfaces/presets.SplittedArea/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.SplittedArea/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.SplittedArea/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.SplittedBar/","text":"Vizzu / Modules / presets / SplittedBar Interface: SplittedBar presets .SplittedBar Hierarchy Preset \u21b3 SplittedBar Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort splittedBy \u2022 splittedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.SplittedBar"},{"location":"reference/interfaces/presets.SplittedBar/#interface-splittedbar","text":"presets .SplittedBar","title":"Interface: SplittedBar"},{"location":"reference/interfaces/presets.SplittedBar/#hierarchy","text":"Preset \u21b3 SplittedBar","title":"Hierarchy"},{"location":"reference/interfaces/presets.SplittedBar/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.SplittedBar/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.SplittedBar/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.SplittedBar/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.SplittedBar/#splittedby","text":"\u2022 splittedBy : string | string []","title":"splittedBy"},{"location":"reference/interfaces/presets.SplittedBar/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.SplittedBar/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.SplittedBar/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.SplittedColumn/","text":"Vizzu / Modules / presets / SplittedColumn Interface: SplittedColumn presets .SplittedColumn Hierarchy Preset \u21b3 SplittedColumn Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort splittedBy \u2022 splittedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.SplittedColumn"},{"location":"reference/interfaces/presets.SplittedColumn/#interface-splittedcolumn","text":"presets .SplittedColumn","title":"Interface: SplittedColumn"},{"location":"reference/interfaces/presets.SplittedColumn/#hierarchy","text":"Preset \u21b3 SplittedColumn","title":"Hierarchy"},{"location":"reference/interfaces/presets.SplittedColumn/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.SplittedColumn/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.SplittedColumn/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.SplittedColumn/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.SplittedColumn/#splittedby","text":"\u2022 splittedBy : string | string []","title":"splittedBy"},{"location":"reference/interfaces/presets.SplittedColumn/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.SplittedColumn/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.SplittedColumn/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.StackedArea/","text":"Vizzu / Modules / presets / StackedArea Interface: StackedArea presets .StackedArea Hierarchy Preset \u21b3 StackedArea Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.StackedArea"},{"location":"reference/interfaces/presets.StackedArea/#interface-stackedarea","text":"presets .StackedArea","title":"Interface: StackedArea"},{"location":"reference/interfaces/presets.StackedArea/#hierarchy","text":"Preset \u21b3 StackedArea","title":"Hierarchy"},{"location":"reference/interfaces/presets.StackedArea/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.StackedArea/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.StackedArea/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.StackedArea/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.StackedArea/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.StackedArea/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.StackedArea/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.StackedArea/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.StackedBar/","text":"Vizzu / Modules / presets / StackedBar Interface: StackedBar presets .StackedBar Hierarchy Preset \u21b3 StackedBar Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.StackedBar"},{"location":"reference/interfaces/presets.StackedBar/#interface-stackedbar","text":"presets .StackedBar","title":"Interface: StackedBar"},{"location":"reference/interfaces/presets.StackedBar/#hierarchy","text":"Preset \u21b3 StackedBar","title":"Hierarchy"},{"location":"reference/interfaces/presets.StackedBar/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.StackedBar/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.StackedBar/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.StackedBar/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.StackedBar/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.StackedBar/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.StackedBar/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.StackedBar/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.StackedBubble/","text":"Vizzu / Modules / presets / StackedBubble Interface: StackedBubble presets .StackedBubble Hierarchy Preset \u21b3 StackedBubble Properties color \u2022 color : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse size \u2022 size : string | string [] sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title","title":"presets.StackedBubble"},{"location":"reference/interfaces/presets.StackedBubble/#interface-stackedbubble","text":"presets .StackedBubble","title":"Interface: StackedBubble"},{"location":"reference/interfaces/presets.StackedBubble/#hierarchy","text":"Preset \u21b3 StackedBubble","title":"Hierarchy"},{"location":"reference/interfaces/presets.StackedBubble/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.StackedBubble/#color","text":"\u2022 color : string | string []","title":"color"},{"location":"reference/interfaces/presets.StackedBubble/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.StackedBubble/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.StackedBubble/#size","text":"\u2022 size : string | string []","title":"size"},{"location":"reference/interfaces/presets.StackedBubble/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.StackedBubble/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.StackedBubble/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.StackedColumn/","text":"Vizzu / Modules / presets / StackedColumn Interface: StackedColumn presets .StackedColumn Hierarchy Preset \u21b3 StackedColumn Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.StackedColumn"},{"location":"reference/interfaces/presets.StackedColumn/#interface-stackedcolumn","text":"presets .StackedColumn","title":"Interface: StackedColumn"},{"location":"reference/interfaces/presets.StackedColumn/#hierarchy","text":"Preset \u21b3 StackedColumn","title":"Hierarchy"},{"location":"reference/interfaces/presets.StackedColumn/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.StackedColumn/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.StackedColumn/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.StackedColumn/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.StackedColumn/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.StackedColumn/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.StackedColumn/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.StackedColumn/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.StackedTreemap/","text":"Vizzu / Modules / presets / StackedTreemap Interface: StackedTreemap presets .StackedTreemap Hierarchy Preset \u21b3 StackedTreemap Properties color \u2022 color : string | string [] dividedBy \u2022 dividedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse size \u2022 size : string | string [] sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title","title":"presets.StackedTreemap"},{"location":"reference/interfaces/presets.StackedTreemap/#interface-stackedtreemap","text":"presets .StackedTreemap","title":"Interface: StackedTreemap"},{"location":"reference/interfaces/presets.StackedTreemap/#hierarchy","text":"Preset \u21b3 StackedTreemap","title":"Hierarchy"},{"location":"reference/interfaces/presets.StackedTreemap/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.StackedTreemap/#color","text":"\u2022 color : string | string []","title":"color"},{"location":"reference/interfaces/presets.StackedTreemap/#dividedby","text":"\u2022 dividedBy : string | string []","title":"dividedBy"},{"location":"reference/interfaces/presets.StackedTreemap/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.StackedTreemap/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.StackedTreemap/#size","text":"\u2022 size : string | string []","title":"size"},{"location":"reference/interfaces/presets.StackedTreemap/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.StackedTreemap/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Stream/","text":"Vizzu / Modules / presets / Stream Interface: Stream presets .Stream Hierarchy Preset \u21b3 Stream Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Stream"},{"location":"reference/interfaces/presets.Stream/#interface-stream","text":"presets .Stream","title":"Interface: Stream"},{"location":"reference/interfaces/presets.Stream/#hierarchy","text":"Preset \u21b3 Stream","title":"Hierarchy"},{"location":"reference/interfaces/presets.Stream/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Stream/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Stream/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Stream/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Stream/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.Stream/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Stream/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Stream/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Treemap/","text":"Vizzu / Modules / presets / Treemap Interface: Treemap presets .Treemap Hierarchy Preset \u21b3 Treemap Properties color \u2022 color : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse size \u2022 size : string | string [] sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title","title":"presets.Treemap"},{"location":"reference/interfaces/presets.Treemap/#interface-treemap","text":"presets .Treemap","title":"Interface: Treemap"},{"location":"reference/interfaces/presets.Treemap/#hierarchy","text":"Preset \u21b3 Treemap","title":"Hierarchy"},{"location":"reference/interfaces/presets.Treemap/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Treemap/#color","text":"\u2022 color : string | string []","title":"color"},{"location":"reference/interfaces/presets.Treemap/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Treemap/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Treemap/#size","text":"\u2022 size : string | string []","title":"size"},{"location":"reference/interfaces/presets.Treemap/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Treemap/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.VariableRadiusPie/","text":"Vizzu / Modules / presets / VariableRadiusPie Interface: VariableRadiusPie presets .VariableRadiusPie Hierarchy Preset \u21b3 VariableRadiusPie Properties angle \u2022 angle : string | string [] by \u2022 by : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend radius \u2022 radius : string | string [] reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title","title":"presets.VariableRadiusPie"},{"location":"reference/interfaces/presets.VariableRadiusPie/#interface-variableradiuspie","text":"presets .VariableRadiusPie","title":"Interface: VariableRadiusPie"},{"location":"reference/interfaces/presets.VariableRadiusPie/#hierarchy","text":"Preset \u21b3 VariableRadiusPie","title":"Hierarchy"},{"location":"reference/interfaces/presets.VariableRadiusPie/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.VariableRadiusPie/#angle","text":"\u2022 angle : string | string []","title":"angle"},{"location":"reference/interfaces/presets.VariableRadiusPie/#by","text":"\u2022 by : string | string []","title":"by"},{"location":"reference/interfaces/presets.VariableRadiusPie/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.VariableRadiusPie/#radius","text":"\u2022 radius : string | string []","title":"radius"},{"location":"reference/interfaces/presets.VariableRadiusPie/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.VariableRadiusPie/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.VariableRadiusPie/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.VerticalLine/","text":"Vizzu / Modules / presets / VerticalLine Interface: VerticalLine presets .VerticalLine Hierarchy Preset \u21b3 VerticalLine Properties dividedBy \u2022 dividedBy : string | string [] legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.VerticalLine"},{"location":"reference/interfaces/presets.VerticalLine/#interface-verticalline","text":"presets .VerticalLine","title":"Interface: VerticalLine"},{"location":"reference/interfaces/presets.VerticalLine/#hierarchy","text":"Preset \u21b3 VerticalLine","title":"Hierarchy"},{"location":"reference/interfaces/presets.VerticalLine/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.VerticalLine/#dividedby","text":"\u2022 dividedBy : string | string []","title":"dividedBy"},{"location":"reference/interfaces/presets.VerticalLine/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.VerticalLine/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.VerticalLine/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.VerticalLine/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.VerticalLine/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.VerticalLine/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.VerticalStream/","text":"Vizzu / Modules / presets / VerticalStream Interface: VerticalStream presets .VerticalStream Hierarchy Preset \u21b3 VerticalStream Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort stackedBy \u2022 stackedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.VerticalStream"},{"location":"reference/interfaces/presets.VerticalStream/#interface-verticalstream","text":"presets .VerticalStream","title":"Interface: VerticalStream"},{"location":"reference/interfaces/presets.VerticalStream/#hierarchy","text":"Preset \u21b3 VerticalStream","title":"Hierarchy"},{"location":"reference/interfaces/presets.VerticalStream/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.VerticalStream/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.VerticalStream/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.VerticalStream/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.VerticalStream/#stackedby","text":"\u2022 stackedBy : string | string []","title":"stackedBy"},{"location":"reference/interfaces/presets.VerticalStream/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.VerticalStream/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.VerticalStream/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.VerticalViolin/","text":"Vizzu / Modules / presets / VerticalViolin Interface: VerticalViolin presets .VerticalViolin Hierarchy Preset \u21b3 VerticalViolin Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort splittedBy \u2022 splittedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.VerticalViolin"},{"location":"reference/interfaces/presets.VerticalViolin/#interface-verticalviolin","text":"presets .VerticalViolin","title":"Interface: VerticalViolin"},{"location":"reference/interfaces/presets.VerticalViolin/#hierarchy","text":"Preset \u21b3 VerticalViolin","title":"Hierarchy"},{"location":"reference/interfaces/presets.VerticalViolin/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.VerticalViolin/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.VerticalViolin/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.VerticalViolin/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.VerticalViolin/#splittedby","text":"\u2022 splittedBy : string | string []","title":"splittedBy"},{"location":"reference/interfaces/presets.VerticalViolin/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.VerticalViolin/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.VerticalViolin/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Violin/","text":"Vizzu / Modules / presets / Violin Interface: Violin presets .Violin Hierarchy Preset \u21b3 Violin Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort splittedBy \u2022 splittedBy : string | string [] title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Violin"},{"location":"reference/interfaces/presets.Violin/#interface-violin","text":"presets .Violin","title":"Interface: Violin"},{"location":"reference/interfaces/presets.Violin/#hierarchy","text":"Preset \u21b3 Violin","title":"Hierarchy"},{"location":"reference/interfaces/presets.Violin/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Violin/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Violin/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Violin/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Violin/#splittedby","text":"\u2022 splittedBy : string | string []","title":"splittedBy"},{"location":"reference/interfaces/presets.Violin/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Violin/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Violin/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/presets.Waterfall/","text":"Vizzu / Modules / presets / Waterfall Interface: Waterfall presets .Waterfall Hierarchy Preset \u21b3 Waterfall Properties legend \u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend reverse \u2022 Optional reverse : boolean Inherited from Preset . reverse sort \u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort title \u2022 Optional title : string Inherited from Preset . title x \u2022 x : string | string [] y \u2022 y : string | string []","title":"presets.Waterfall"},{"location":"reference/interfaces/presets.Waterfall/#interface-waterfall","text":"presets .Waterfall","title":"Interface: Waterfall"},{"location":"reference/interfaces/presets.Waterfall/#hierarchy","text":"Preset \u21b3 Waterfall","title":"Hierarchy"},{"location":"reference/interfaces/presets.Waterfall/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/presets.Waterfall/#legend","text":"\u2022 Optional legend : \"color\" | \"size\" | \"lightness\" Inherited from Preset . legend","title":"legend"},{"location":"reference/interfaces/presets.Waterfall/#reverse","text":"\u2022 Optional reverse : boolean Inherited from Preset . reverse","title":"reverse"},{"location":"reference/interfaces/presets.Waterfall/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" Inherited from Preset . sort","title":"sort"},{"location":"reference/interfaces/presets.Waterfall/#title","text":"\u2022 Optional title : string Inherited from Preset . title","title":"title"},{"location":"reference/interfaces/presets.Waterfall/#x","text":"\u2022 x : string | string []","title":"x"},{"location":"reference/interfaces/presets.Waterfall/#y","text":"\u2022 y : string | string []","title":"y"},{"location":"reference/interfaces/vizzu.Anim.Animation/","text":"Vizzu / Modules / vizzu / Anim / Animation Interface: Animation vizzu . Anim .Animation Stored Animation object. Properties id \u2022 id : number","title":"vizzu.Anim.Animation"},{"location":"reference/interfaces/vizzu.Anim.Animation/#interface-animation","text":"vizzu . Anim .Animation Stored Animation object.","title":"Interface: Animation"},{"location":"reference/interfaces/vizzu.Anim.Animation/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Anim.Animation/#id","text":"\u2022 id : number","title":"id"},{"location":"reference/interfaces/vizzu.Anim.Completing/","text":"Vizzu / Modules / vizzu / Anim / Completing Interface: Completing vizzu . Anim .Completing Promise resolves to the Vizzu object when the animation completed. Hierarchy Promise \\< Vizzu > \u21b3 Completing Properties [toStringTag] \u2022 Readonly [toStringTag] : string Inherited from Promise.__@toStringTag@23 activated \u2022 activated : Promise \\< Control > Promise resolves to the animation controller object when the animation starts. Methods catch \u25b8 catch \\< TResult >( onrejected? ): Promise \\< Vizzu | TResult > Attaches a callback for only the rejection of the Promise. Type parameters Name Type TResult never Parameters Name Type Description onrejected? ( reason : any ) => TResult | PromiseLike \\< TResult > The callback to execute when the Promise is rejected. Returns Promise \\< Vizzu | TResult > A Promise for the completion of the callback. Inherited from Promise.catch finally \u25b8 finally ( onfinally? ): Promise \\< Vizzu > Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The resolved value cannot be modified from the callback. Parameters Name Type Description onfinally? () => void The callback to execute when the Promise is settled (fulfilled or rejected). Returns Promise \\< Vizzu > A Promise for the completion of the callback. Inherited from Promise.finally then \u25b8 then \\< TResult1 , TResult2 >( onfulfilled? , onrejected? ): Promise \\< TResult1 | TResult2 > Attaches callbacks for the resolution and/or rejection of the Promise. Type parameters Name Type TResult1 Vizzu TResult2 never Parameters Name Type Description onfulfilled? ( value : Vizzu ) => TResult1 | PromiseLike \\< TResult1 > The callback to execute when the Promise is resolved. onrejected? ( reason : any ) => TResult2 | PromiseLike \\< TResult2 > The callback to execute when the Promise is rejected. Returns Promise \\< TResult1 | TResult2 > A Promise for the completion of which ever callback is executed. Inherited from Promise.then","title":"vizzu.Anim.Completing"},{"location":"reference/interfaces/vizzu.Anim.Completing/#interface-completing","text":"vizzu . Anim .Completing Promise resolves to the Vizzu object when the animation completed.","title":"Interface: Completing"},{"location":"reference/interfaces/vizzu.Anim.Completing/#hierarchy","text":"Promise \\< Vizzu > \u21b3 Completing","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Anim.Completing/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Anim.Completing/#tostringtag","text":"\u2022 Readonly [toStringTag] : string Inherited from Promise.__@toStringTag@23","title":"[toStringTag]"},{"location":"reference/interfaces/vizzu.Anim.Completing/#activated","text":"\u2022 activated : Promise \\< Control > Promise resolves to the animation controller object when the animation starts.","title":"activated"},{"location":"reference/interfaces/vizzu.Anim.Completing/#methods","text":"","title":"Methods"},{"location":"reference/interfaces/vizzu.Anim.Completing/#catch","text":"\u25b8 catch \\< TResult >( onrejected? ): Promise \\< Vizzu | TResult > Attaches a callback for only the rejection of the Promise. Type parameters Name Type TResult never Parameters Name Type Description onrejected? ( reason : any ) => TResult | PromiseLike \\< TResult > The callback to execute when the Promise is rejected. Returns Promise \\< Vizzu | TResult > A Promise for the completion of the callback. Inherited from Promise.catch","title":"catch"},{"location":"reference/interfaces/vizzu.Anim.Completing/#finally","text":"\u25b8 finally ( onfinally? ): Promise \\< Vizzu > Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The resolved value cannot be modified from the callback. Parameters Name Type Description onfinally? () => void The callback to execute when the Promise is settled (fulfilled or rejected). Returns Promise \\< Vizzu > A Promise for the completion of the callback. Inherited from Promise.finally","title":"finally"},{"location":"reference/interfaces/vizzu.Anim.Completing/#then","text":"\u25b8 then \\< TResult1 , TResult2 >( onfulfilled? , onrejected? ): Promise \\< TResult1 | TResult2 > Attaches callbacks for the resolution and/or rejection of the Promise. Type parameters Name Type TResult1 Vizzu TResult2 never Parameters Name Type Description onfulfilled? ( value : Vizzu ) => TResult1 | PromiseLike \\< TResult1 > The callback to execute when the Promise is resolved. onrejected? ( reason : any ) => TResult2 | PromiseLike \\< TResult2 > The callback to execute when the Promise is rejected. Returns Promise \\< TResult1 | TResult2 > A Promise for the completion of which ever callback is executed. Inherited from Promise.then","title":"then"},{"location":"reference/interfaces/vizzu.Anim.Control/","text":"Vizzu / Modules / vizzu / Anim / Control Interface: Control vizzu . Anim .Control Control object for animation. Methods cancel \u25b8 cancel (): void Cancels the animation, will reject the animation promise. Returns void pause \u25b8 pause (): void Pauses the controlled animation. Returns void play \u25b8 play (): void Plays/resumes playing of the controlled animation. Returns void reverse \u25b8 reverse (): void Changes the direction of the controlled animation. Returns void seek \u25b8 seek ( value ): void Seeks the animation to the position specified by time or progress percentage. Seeking the animation to the end position will not trigger the (@link Vizzu.animate|animation promise) to resolve. Parameters Name Type value `${number}%` | Duration Returns void stop \u25b8 stop (): void Stops the current animation seeking it back to its start position. Returns void store \u25b8 store (): Animation Returns a reference to the actual animation for further reuse. Returns Animation","title":"vizzu.Anim.Control"},{"location":"reference/interfaces/vizzu.Anim.Control/#interface-control","text":"vizzu . Anim .Control Control object for animation.","title":"Interface: Control"},{"location":"reference/interfaces/vizzu.Anim.Control/#methods","text":"","title":"Methods"},{"location":"reference/interfaces/vizzu.Anim.Control/#cancel","text":"\u25b8 cancel (): void Cancels the animation, will reject the animation promise. Returns void","title":"cancel"},{"location":"reference/interfaces/vizzu.Anim.Control/#pause","text":"\u25b8 pause (): void Pauses the controlled animation. Returns void","title":"pause"},{"location":"reference/interfaces/vizzu.Anim.Control/#play","text":"\u25b8 play (): void Plays/resumes playing of the controlled animation. Returns void","title":"play"},{"location":"reference/interfaces/vizzu.Anim.Control/#reverse","text":"\u25b8 reverse (): void Changes the direction of the controlled animation. Returns void","title":"reverse"},{"location":"reference/interfaces/vizzu.Anim.Control/#seek","text":"\u25b8 seek ( value ): void Seeks the animation to the position specified by time or progress percentage. Seeking the animation to the end position will not trigger the (@link Vizzu.animate|animation promise) to resolve. Parameters Name Type value `${number}%` | Duration Returns void","title":"seek"},{"location":"reference/interfaces/vizzu.Anim.Control/#stop","text":"\u25b8 stop (): void Stops the current animation seeking it back to its start position. Returns void","title":"stop"},{"location":"reference/interfaces/vizzu.Anim.Control/#store","text":"\u25b8 store (): Animation Returns a reference to the actual animation for further reuse. Returns Animation","title":"store"},{"location":"reference/interfaces/vizzu.Anim.ControlOptions/","text":"Vizzu / Modules / vizzu / Anim / ControlOptions Interface: ControlOptions vizzu . Anim .ControlOptions Properties playState \u2022 Optional playState : \"paused\" | \"running\" Determines if the animation should start automatically after the animate() call. position \u2022 Optional position : number The starting position of the animation.","title":"vizzu.Anim.ControlOptions"},{"location":"reference/interfaces/vizzu.Anim.ControlOptions/#interface-controloptions","text":"vizzu . Anim .ControlOptions","title":"Interface: ControlOptions"},{"location":"reference/interfaces/vizzu.Anim.ControlOptions/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Anim.ControlOptions/#playstate","text":"\u2022 Optional playState : \"paused\" | \"running\" Determines if the animation should start automatically after the animate() call.","title":"playState"},{"location":"reference/interfaces/vizzu.Anim.ControlOptions/#position","text":"\u2022 Optional position : number The starting position of the animation.","title":"position"},{"location":"reference/interfaces/vizzu.Anim.GroupOptions/","text":"Vizzu / Modules / vizzu / Anim / GroupOptions Interface: GroupOptions vizzu . Anim .GroupOptions Animation parameters for an animation group. Hierarchy GroupOptions \u21b3 Options Properties delay \u2022 Optional delay : Duration Waiting time interval before the animation starts. duration \u2022 Optional duration : Duration The length of time an animation should take to complete. easing \u2022 Optional easing : Easing Sets the easing used for the animation.","title":"vizzu.Anim.GroupOptions"},{"location":"reference/interfaces/vizzu.Anim.GroupOptions/#interface-groupoptions","text":"vizzu . Anim .GroupOptions Animation parameters for an animation group.","title":"Interface: GroupOptions"},{"location":"reference/interfaces/vizzu.Anim.GroupOptions/#hierarchy","text":"GroupOptions \u21b3 Options","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Anim.GroupOptions/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Anim.GroupOptions/#delay","text":"\u2022 Optional delay : Duration Waiting time interval before the animation starts.","title":"delay"},{"location":"reference/interfaces/vizzu.Anim.GroupOptions/#duration","text":"\u2022 Optional duration : Duration The length of time an animation should take to complete.","title":"duration"},{"location":"reference/interfaces/vizzu.Anim.GroupOptions/#easing","text":"\u2022 Optional easing : Easing Sets the easing used for the animation.","title":"easing"},{"location":"reference/interfaces/vizzu.Anim.Keyframe/","text":"Vizzu / Modules / vizzu / Anim / Keyframe Interface: Keyframe vizzu . Anim .Keyframe Object for describing a single animation target chart state and the options of the animation to this chart state. Properties options \u2022 Optional options : LazyOptions target \u2022 target : LazyTarget","title":"vizzu.Anim.Keyframe"},{"location":"reference/interfaces/vizzu.Anim.Keyframe/#interface-keyframe","text":"vizzu . Anim .Keyframe Object for describing a single animation target chart state and the options of the animation to this chart state.","title":"Interface: Keyframe"},{"location":"reference/interfaces/vizzu.Anim.Keyframe/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Anim.Keyframe/#options","text":"\u2022 Optional options : LazyOptions","title":"options"},{"location":"reference/interfaces/vizzu.Anim.Keyframe/#target","text":"\u2022 target : LazyTarget","title":"target"},{"location":"reference/interfaces/vizzu.Anim.Options/","text":"Vizzu / Modules / vizzu / Anim / Options Interface: Options vizzu . Anim .Options If no animation settings are passed to Vizzu, it will use an automatic setting depending on the actual configuration of the chart. This behavior can be overridden via the animation setting parameter. The animation between two states of the chart can require the transitioning of several different chart properties. These properties are grouped into separately configurable animation groups. The parameters can also be set for the animation as a whole. These settings rescale the durations and delays of the animation groups to the specified total delay and duration. Hierarchy GroupOptions \u21b3 Options Properties color \u2022 Optional color : GroupOptions Marker color animation group. coordSystem \u2022 Optional coordSystem : GroupOptions Coordinate system transformations animation group. delay \u2022 Optional delay : Duration Waiting time interval before the animation starts. Inherited from GroupOptions . delay duration \u2022 Optional duration : Duration The length of time an animation should take to complete. Inherited from GroupOptions . duration easing \u2022 Optional easing : Easing Sets the easing used for the animation. Inherited from GroupOptions . easing geometry \u2022 Optional geometry : GroupOptions Marker geometry morph animation group. hide \u2022 Optional hide : GroupOptions Animation group for markers fading out (due to filtering or added/removed data series). legend \u2022 Optional legend : GroupOptions Legend animation parameters. regroupStrategy \u2022 Optional regroupStrategy : RegroupStrategy Selects the algorithm for transition in case of data grouped differently on the source and target chart. show \u2022 Optional show : GroupOptions Animation group for new markers fading in (due to filtering or added/removed data series). style \u2022 Optional style : GroupOptions Animation group for style parameters. title \u2022 Optional title : GroupOptions Title animation parameters. tooltip \u2022 Optional tooltip : GroupOptions Animation group for tooltip transitions. x \u2022 Optional x : GroupOptions Animation group for marker transitions in the direction of the x-axis. y \u2022 Optional y : GroupOptions Animation group for marker transitions in the direction of the y-axis.","title":"vizzu.Anim.Options"},{"location":"reference/interfaces/vizzu.Anim.Options/#interface-options","text":"vizzu . Anim .Options If no animation settings are passed to Vizzu, it will use an automatic setting depending on the actual configuration of the chart. This behavior can be overridden via the animation setting parameter. The animation between two states of the chart can require the transitioning of several different chart properties. These properties are grouped into separately configurable animation groups. The parameters can also be set for the animation as a whole. These settings rescale the durations and delays of the animation groups to the specified total delay and duration.","title":"Interface: Options"},{"location":"reference/interfaces/vizzu.Anim.Options/#hierarchy","text":"GroupOptions \u21b3 Options","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Anim.Options/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Anim.Options/#color","text":"\u2022 Optional color : GroupOptions Marker color animation group.","title":"color"},{"location":"reference/interfaces/vizzu.Anim.Options/#coordsystem","text":"\u2022 Optional coordSystem : GroupOptions Coordinate system transformations animation group.","title":"coordSystem"},{"location":"reference/interfaces/vizzu.Anim.Options/#delay","text":"\u2022 Optional delay : Duration Waiting time interval before the animation starts. Inherited from GroupOptions . delay","title":"delay"},{"location":"reference/interfaces/vizzu.Anim.Options/#duration","text":"\u2022 Optional duration : Duration The length of time an animation should take to complete. Inherited from GroupOptions . duration","title":"duration"},{"location":"reference/interfaces/vizzu.Anim.Options/#easing","text":"\u2022 Optional easing : Easing Sets the easing used for the animation. Inherited from GroupOptions . easing","title":"easing"},{"location":"reference/interfaces/vizzu.Anim.Options/#geometry","text":"\u2022 Optional geometry : GroupOptions Marker geometry morph animation group.","title":"geometry"},{"location":"reference/interfaces/vizzu.Anim.Options/#hide","text":"\u2022 Optional hide : GroupOptions Animation group for markers fading out (due to filtering or added/removed data series).","title":"hide"},{"location":"reference/interfaces/vizzu.Anim.Options/#legend","text":"\u2022 Optional legend : GroupOptions Legend animation parameters.","title":"legend"},{"location":"reference/interfaces/vizzu.Anim.Options/#regroupstrategy","text":"\u2022 Optional regroupStrategy : RegroupStrategy Selects the algorithm for transition in case of data grouped differently on the source and target chart.","title":"regroupStrategy"},{"location":"reference/interfaces/vizzu.Anim.Options/#show","text":"\u2022 Optional show : GroupOptions Animation group for new markers fading in (due to filtering or added/removed data series).","title":"show"},{"location":"reference/interfaces/vizzu.Anim.Options/#style","text":"\u2022 Optional style : GroupOptions Animation group for style parameters.","title":"style"},{"location":"reference/interfaces/vizzu.Anim.Options/#title","text":"\u2022 Optional title : GroupOptions Title animation parameters.","title":"title"},{"location":"reference/interfaces/vizzu.Anim.Options/#tooltip","text":"\u2022 Optional tooltip : GroupOptions Animation group for tooltip transitions.","title":"tooltip"},{"location":"reference/interfaces/vizzu.Anim.Options/#x","text":"\u2022 Optional x : GroupOptions Animation group for marker transitions in the direction of the x-axis.","title":"x"},{"location":"reference/interfaces/vizzu.Anim.Options/#y","text":"\u2022 Optional y : GroupOptions Animation group for marker transitions in the direction of the y-axis.","title":"y"},{"location":"reference/interfaces/vizzu.Anim.Target/","text":"Vizzu / Modules / vizzu / Anim / Target Interface: Target vizzu . Anim .Target Represents a state in the animation describing the data, the chart, and the style parameters to be changed from the actual state. Passing null as style will reset every style parameter to default. Properties config \u2022 Optional config : Chart Chart configuration changes. data \u2022 Optional data : Set Data set. style \u2022 Optional style : Chart Style changes.","title":"vizzu.Anim.Target"},{"location":"reference/interfaces/vizzu.Anim.Target/#interface-target","text":"vizzu . Anim .Target Represents a state in the animation describing the data, the chart, and the style parameters to be changed from the actual state. Passing null as style will reset every style parameter to default.","title":"Interface: Target"},{"location":"reference/interfaces/vizzu.Anim.Target/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Anim.Target/#config","text":"\u2022 Optional config : Chart Chart configuration changes.","title":"config"},{"location":"reference/interfaces/vizzu.Anim.Target/#data","text":"\u2022 Optional data : Set Data set.","title":"data"},{"location":"reference/interfaces/vizzu.Anim.Target/#style","text":"\u2022 Optional style : Chart Style changes.","title":"style"},{"location":"reference/interfaces/vizzu.Config.Channel/","text":"Vizzu / Modules / vizzu / Config / Channel Interface: Channel vizzu . Config .Channel Channels are the main building blocks of the chart. Each channel describes a particular aspect of the markers (vertical & horizontal position, color, etc.) and connects them to the underlying data. A single measure and an ordered list of dimensions can be on each channel. The dimensions will recursively slice the measure on the channel. The channels are represented on the chart as an axis or legend. Properties attach \u2022 Optional attach : SeriesList List of data series names to be added to the channel beside the ones already added. axis \u2022 Optional axis : boolean | \"auto\" Enables the axis line on axis channels. detach \u2022 Optional detach : SeriesList List of data series names to be removed from the channel. guides \u2022 Optional guides : boolean | \"auto\" Enables the grid lines on axis channels showing dimension data. interlacing \u2022 Optional interlacing : boolean | \"auto\" Enables the interlacing on axis channels showing measure data. labelLevel \u2022 Optional labelLevel : number Only one dimension can be shown on an axis or legend by name. This index specifies which attached series should be used. labels \u2022 Optional labels : boolean | \"auto\" Enables the axis labels on axis channels. markerGuides \u2022 Optional markerGuides : boolean | \"auto\" Enables the guide lines on axis channels showing measure data for all marker positions. range \u2022 Optional range : ChannelRange Specifies the range that determines how the represented data scales on the channel. set \u2022 Optional set : SeriesList List of data series names on the channel. ticks \u2022 Optional ticks : boolean | \"auto\" Enables the axis ticks on axis channels showing measure data. title \u2022 Optional title : string This title is shown on the axis or legend corresponding to the channel. If 'auto', the title will be the name of the measure attached to that channel.","title":"vizzu.Config.Channel"},{"location":"reference/interfaces/vizzu.Config.Channel/#interface-channel","text":"vizzu . Config .Channel Channels are the main building blocks of the chart. Each channel describes a particular aspect of the markers (vertical & horizontal position, color, etc.) and connects them to the underlying data. A single measure and an ordered list of dimensions can be on each channel. The dimensions will recursively slice the measure on the channel. The channels are represented on the chart as an axis or legend.","title":"Interface: Channel"},{"location":"reference/interfaces/vizzu.Config.Channel/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Config.Channel/#attach","text":"\u2022 Optional attach : SeriesList List of data series names to be added to the channel beside the ones already added.","title":"attach"},{"location":"reference/interfaces/vizzu.Config.Channel/#axis","text":"\u2022 Optional axis : boolean | \"auto\" Enables the axis line on axis channels.","title":"axis"},{"location":"reference/interfaces/vizzu.Config.Channel/#detach","text":"\u2022 Optional detach : SeriesList List of data series names to be removed from the channel.","title":"detach"},{"location":"reference/interfaces/vizzu.Config.Channel/#guides","text":"\u2022 Optional guides : boolean | \"auto\" Enables the grid lines on axis channels showing dimension data.","title":"guides"},{"location":"reference/interfaces/vizzu.Config.Channel/#interlacing","text":"\u2022 Optional interlacing : boolean | \"auto\" Enables the interlacing on axis channels showing measure data.","title":"interlacing"},{"location":"reference/interfaces/vizzu.Config.Channel/#labellevel","text":"\u2022 Optional labelLevel : number Only one dimension can be shown on an axis or legend by name. This index specifies which attached series should be used.","title":"labelLevel"},{"location":"reference/interfaces/vizzu.Config.Channel/#labels","text":"\u2022 Optional labels : boolean | \"auto\" Enables the axis labels on axis channels.","title":"labels"},{"location":"reference/interfaces/vizzu.Config.Channel/#markerguides","text":"\u2022 Optional markerGuides : boolean | \"auto\" Enables the guide lines on axis channels showing measure data for all marker positions.","title":"markerGuides"},{"location":"reference/interfaces/vizzu.Config.Channel/#range","text":"\u2022 Optional range : ChannelRange Specifies the range that determines how the represented data scales on the channel.","title":"range"},{"location":"reference/interfaces/vizzu.Config.Channel/#set","text":"\u2022 Optional set : SeriesList List of data series names on the channel.","title":"set"},{"location":"reference/interfaces/vizzu.Config.Channel/#ticks","text":"\u2022 Optional ticks : boolean | \"auto\" Enables the axis ticks on axis channels showing measure data.","title":"ticks"},{"location":"reference/interfaces/vizzu.Config.Channel/#title","text":"\u2022 Optional title : string This title is shown on the axis or legend corresponding to the channel. If 'auto', the title will be the name of the measure attached to that channel.","title":"title"},{"location":"reference/interfaces/vizzu.Config.ChannelRange/","text":"Vizzu / Modules / vizzu / Config / ChannelRange Interface: ChannelRange vizzu . Config .ChannelRange Channel range specifies how to scale the represented data. Properties max \u2022 Optional max : ChannelExtrema min \u2022 Optional min : ChannelExtrema","title":"vizzu.Config.ChannelRange"},{"location":"reference/interfaces/vizzu.Config.ChannelRange/#interface-channelrange","text":"vizzu . Config .ChannelRange Channel range specifies how to scale the represented data.","title":"Interface: ChannelRange"},{"location":"reference/interfaces/vizzu.Config.ChannelRange/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Config.ChannelRange/#max","text":"\u2022 Optional max : ChannelExtrema","title":"max"},{"location":"reference/interfaces/vizzu.Config.ChannelRange/#min","text":"\u2022 Optional min : ChannelExtrema","title":"min"},{"location":"reference/interfaces/vizzu.Config.Channels/","text":"Vizzu / Modules / vizzu / Config / Channels Interface: Channels vizzu . Config .Channels Channel configuration. A data series' name or a list of the data series' names can be used as a short-hand - instead of the channel object - to set data series for the channel. Setting a channel to null will remove all data series from it. Hierarchy Channels \u21b3 Chart Properties color \u2022 Optional color : SeriesList | Channel Parameters for the markers' base color. The markers' actual color can also be affected by the lightness channel. label \u2022 Optional label : SeriesList | Channel Parameters for the content of the labels that appear on the markers. lightness \u2022 Optional lightness : SeriesList | Channel Parameters for markers' lightness. noop \u2022 Optional noop : SeriesList | Channel Splits the markers as all the other channels, but have no effect on the markers' appearance. Thus, it only works with dimensions. size \u2022 Optional size : SeriesList | Channel Parameters for the markers' size. Effective only for circle and line geometry affecting the circle area or the line width respectively. x \u2022 Optional x : SeriesList | Channel Parameters for the X-axis, determining the position of the markers on the x-axis - or their angle when using polar coordinates. Note: leaving x and y channels empty will result in a chart \"without coordinates\" like a Treemap or a Bubble Chart. y \u2022 Optional y : SeriesList | Channel Parameters for the Y-axis, determining the position of the markers on the y-axis - or their radius when using polar coordinates) .","title":"vizzu.Config.Channels"},{"location":"reference/interfaces/vizzu.Config.Channels/#interface-channels","text":"vizzu . Config .Channels Channel configuration. A data series' name or a list of the data series' names can be used as a short-hand - instead of the channel object - to set data series for the channel. Setting a channel to null will remove all data series from it.","title":"Interface: Channels"},{"location":"reference/interfaces/vizzu.Config.Channels/#hierarchy","text":"Channels \u21b3 Chart","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Config.Channels/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Config.Channels/#color","text":"\u2022 Optional color : SeriesList | Channel Parameters for the markers' base color. The markers' actual color can also be affected by the lightness channel.","title":"color"},{"location":"reference/interfaces/vizzu.Config.Channels/#label","text":"\u2022 Optional label : SeriesList | Channel Parameters for the content of the labels that appear on the markers.","title":"label"},{"location":"reference/interfaces/vizzu.Config.Channels/#lightness","text":"\u2022 Optional lightness : SeriesList | Channel Parameters for markers' lightness.","title":"lightness"},{"location":"reference/interfaces/vizzu.Config.Channels/#noop","text":"\u2022 Optional noop : SeriesList | Channel Splits the markers as all the other channels, but have no effect on the markers' appearance. Thus, it only works with dimensions.","title":"noop"},{"location":"reference/interfaces/vizzu.Config.Channels/#size","text":"\u2022 Optional size : SeriesList | Channel Parameters for the markers' size. Effective only for circle and line geometry affecting the circle area or the line width respectively.","title":"size"},{"location":"reference/interfaces/vizzu.Config.Channels/#x","text":"\u2022 Optional x : SeriesList | Channel Parameters for the X-axis, determining the position of the markers on the x-axis - or their angle when using polar coordinates. Note: leaving x and y channels empty will result in a chart \"without coordinates\" like a Treemap or a Bubble Chart.","title":"x"},{"location":"reference/interfaces/vizzu.Config.Channels/#y","text":"\u2022 Optional y : SeriesList | Channel Parameters for the Y-axis, determining the position of the markers on the y-axis - or their radius when using polar coordinates) .","title":"y"},{"location":"reference/interfaces/vizzu.Config.Chart/","text":"Vizzu / Modules / vizzu / Config / Chart Interface: Chart vizzu . Config .Chart The config contains all of the parameters needed to render a particular static chart or a state of an animated chart. Hierarchy Channels \u21b3 Chart Properties align \u2022 Optional align : \"max\" | \"none\" | \"center\" | \"min\" | \"stretch\" Sets the alignment of the markers with relation to the x- or the y-axis depending on where the measure is. In case both axes have measures on them, this is determined by the orientation of the chart. channels \u2022 Optional channels : Channels List of the chart's channels' configuration. The chart object also extends the channels object as a configuration shorthand. color \u2022 Optional color : SeriesList | Channel Parameters for the markers' base color. The markers' actual color can also be affected by the lightness channel. Inherited from Channels . color coordSystem \u2022 Optional coordSystem : \"cartesian\" | \"polar\" Sets the coordinate system for the chart. Switch to the 'polar' coordinate system to create a chart from the pie/radial chart family. geometry \u2022 Optional geometry : \"area\" | \"circle\" | \"line\" | \"rectangle\" Sets the geometric elements used for the markers to represent the data. label \u2022 Optional label : SeriesList | Channel Parameters for the content of the labels that appear on the markers. Inherited from Channels . label legend \u2022 Optional legend : \"auto\" | \"color\" | \"size\" | \"lightness\" Specifies which channel should be shown on the legend. If set to null, the legend will not be shown and will not take up any space in the chart layout. If set to auto, the internal logic will select the most suitable channel for the legend. lightness \u2022 Optional lightness : SeriesList | Channel Parameters for markers' lightness. Inherited from Channels . lightness noop \u2022 Optional noop : SeriesList | Channel Splits the markers as all the other channels, but have no effect on the markers' appearance. Thus, it only works with dimensions. Inherited from Channels . noop orientation \u2022 Optional orientation : \"horizontal\" | \"vertical\" If both axes have measures on them, this parameter sets the orientation of the chart, meaning to which axis the graphical elements are oriented to. reverse \u2022 Optional reverse : boolean Reverts the order of the markers if set. rotate \u2022 Optional rotate : number Rotates the plot area by the specified angle in degree. Note: this is an experimental, not tested feature. size \u2022 Optional size : SeriesList | Channel Parameters for the markers' size. Effective only for circle and line geometry affecting the circle area or the line width respectively. Inherited from Channels . size sort \u2022 Optional sort : \"none\" | \"byValue\" 'none': markers are sorted in the order as the corresponding data appear in the data set. 'byValue': markers will be sorted by the corresponding measure (if present) in decreasing order. split \u2022 Optional split : boolean If set to true, markers will be split by the dimension(s) along the axis. This works if you have at least one dimension and a measure on the same axis.In case both axes have measures and dimension(s) on them, this is determined by the orientation of the chart. title \u2022 Optional title : string This is the title shown on the top of the chart. If set to null, the title will not be shown and will not take up any space in the chart layout. x \u2022 Optional x : SeriesList | Channel Parameters for the X-axis, determining the position of the markers on the x-axis - or their angle when using polar coordinates. Note: leaving x and y channels empty will result in a chart \"without coordinates\" like a Treemap or a Bubble Chart. Inherited from Channels . x y \u2022 Optional y : SeriesList | Channel Parameters for the Y-axis, determining the position of the markers on the y-axis - or their radius when using polar coordinates) . Inherited from Channels . y","title":"vizzu.Config.Chart"},{"location":"reference/interfaces/vizzu.Config.Chart/#interface-chart","text":"vizzu . Config .Chart The config contains all of the parameters needed to render a particular static chart or a state of an animated chart.","title":"Interface: Chart"},{"location":"reference/interfaces/vizzu.Config.Chart/#hierarchy","text":"Channels \u21b3 Chart","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Config.Chart/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Config.Chart/#align","text":"\u2022 Optional align : \"max\" | \"none\" | \"center\" | \"min\" | \"stretch\" Sets the alignment of the markers with relation to the x- or the y-axis depending on where the measure is. In case both axes have measures on them, this is determined by the orientation of the chart.","title":"align"},{"location":"reference/interfaces/vizzu.Config.Chart/#channels","text":"\u2022 Optional channels : Channels List of the chart's channels' configuration. The chart object also extends the channels object as a configuration shorthand.","title":"channels"},{"location":"reference/interfaces/vizzu.Config.Chart/#color","text":"\u2022 Optional color : SeriesList | Channel Parameters for the markers' base color. The markers' actual color can also be affected by the lightness channel. Inherited from Channels . color","title":"color"},{"location":"reference/interfaces/vizzu.Config.Chart/#coordsystem","text":"\u2022 Optional coordSystem : \"cartesian\" | \"polar\" Sets the coordinate system for the chart. Switch to the 'polar' coordinate system to create a chart from the pie/radial chart family.","title":"coordSystem"},{"location":"reference/interfaces/vizzu.Config.Chart/#geometry","text":"\u2022 Optional geometry : \"area\" | \"circle\" | \"line\" | \"rectangle\" Sets the geometric elements used for the markers to represent the data.","title":"geometry"},{"location":"reference/interfaces/vizzu.Config.Chart/#label","text":"\u2022 Optional label : SeriesList | Channel Parameters for the content of the labels that appear on the markers. Inherited from Channels . label","title":"label"},{"location":"reference/interfaces/vizzu.Config.Chart/#legend","text":"\u2022 Optional legend : \"auto\" | \"color\" | \"size\" | \"lightness\" Specifies which channel should be shown on the legend. If set to null, the legend will not be shown and will not take up any space in the chart layout. If set to auto, the internal logic will select the most suitable channel for the legend.","title":"legend"},{"location":"reference/interfaces/vizzu.Config.Chart/#lightness","text":"\u2022 Optional lightness : SeriesList | Channel Parameters for markers' lightness. Inherited from Channels . lightness","title":"lightness"},{"location":"reference/interfaces/vizzu.Config.Chart/#noop","text":"\u2022 Optional noop : SeriesList | Channel Splits the markers as all the other channels, but have no effect on the markers' appearance. Thus, it only works with dimensions. Inherited from Channels . noop","title":"noop"},{"location":"reference/interfaces/vizzu.Config.Chart/#orientation","text":"\u2022 Optional orientation : \"horizontal\" | \"vertical\" If both axes have measures on them, this parameter sets the orientation of the chart, meaning to which axis the graphical elements are oriented to.","title":"orientation"},{"location":"reference/interfaces/vizzu.Config.Chart/#reverse","text":"\u2022 Optional reverse : boolean Reverts the order of the markers if set.","title":"reverse"},{"location":"reference/interfaces/vizzu.Config.Chart/#rotate","text":"\u2022 Optional rotate : number Rotates the plot area by the specified angle in degree. Note: this is an experimental, not tested feature.","title":"rotate"},{"location":"reference/interfaces/vizzu.Config.Chart/#size","text":"\u2022 Optional size : SeriesList | Channel Parameters for the markers' size. Effective only for circle and line geometry affecting the circle area or the line width respectively. Inherited from Channels . size","title":"size"},{"location":"reference/interfaces/vizzu.Config.Chart/#sort","text":"\u2022 Optional sort : \"none\" | \"byValue\" 'none': markers are sorted in the order as the corresponding data appear in the data set. 'byValue': markers will be sorted by the corresponding measure (if present) in decreasing order.","title":"sort"},{"location":"reference/interfaces/vizzu.Config.Chart/#split","text":"\u2022 Optional split : boolean If set to true, markers will be split by the dimension(s) along the axis. This works if you have at least one dimension and a measure on the same axis.In case both axes have measures and dimension(s) on them, this is determined by the orientation of the chart.","title":"split"},{"location":"reference/interfaces/vizzu.Config.Chart/#title","text":"\u2022 Optional title : string This is the title shown on the top of the chart. If set to null, the title will not be shown and will not take up any space in the chart layout.","title":"title"},{"location":"reference/interfaces/vizzu.Config.Chart/#x","text":"\u2022 Optional x : SeriesList | Channel Parameters for the X-axis, determining the position of the markers on the x-axis - or their angle when using polar coordinates. Note: leaving x and y channels empty will result in a chart \"without coordinates\" like a Treemap or a Bubble Chart. Inherited from Channels . x","title":"x"},{"location":"reference/interfaces/vizzu.Config.Chart/#y","text":"\u2022 Optional y : SeriesList | Channel Parameters for the Y-axis, determining the position of the markers on the y-axis - or their radius when using polar coordinates) . Inherited from Channels . y","title":"y"},{"location":"reference/interfaces/vizzu.Data.AbstractSeriesInfo/","text":"Vizzu / Modules / vizzu / Data / AbstractSeriesInfo Interface: AbstractSeriesInfo vizzu . Data .AbstractSeriesInfo Additional info about a data series besides the contained data. Hierarchy SeriesMetaInfo \u21b3 AbstractSeriesInfo \u21b3\u21b3 DimensionSeriesInfo \u21b3\u21b3 MeasureSeriesInfo Properties length \u2022 length : number Count of values in the series. name \u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. Inherited from SeriesMetaInfo . name type \u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. Inherited from SeriesMetaInfo . type unit \u2022 Optional unit : string Unit of the data series Inherited from SeriesMetaInfo . unit","title":"vizzu.Data.AbstractSeriesInfo"},{"location":"reference/interfaces/vizzu.Data.AbstractSeriesInfo/#interface-abstractseriesinfo","text":"vizzu . Data .AbstractSeriesInfo Additional info about a data series besides the contained data.","title":"Interface: AbstractSeriesInfo"},{"location":"reference/interfaces/vizzu.Data.AbstractSeriesInfo/#hierarchy","text":"SeriesMetaInfo \u21b3 AbstractSeriesInfo \u21b3\u21b3 DimensionSeriesInfo \u21b3\u21b3 MeasureSeriesInfo","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Data.AbstractSeriesInfo/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.AbstractSeriesInfo/#length","text":"\u2022 length : number Count of values in the series.","title":"length"},{"location":"reference/interfaces/vizzu.Data.AbstractSeriesInfo/#name","text":"\u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. Inherited from SeriesMetaInfo . name","title":"name"},{"location":"reference/interfaces/vizzu.Data.AbstractSeriesInfo/#type","text":"\u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. Inherited from SeriesMetaInfo . type","title":"type"},{"location":"reference/interfaces/vizzu.Data.AbstractSeriesInfo/#unit","text":"\u2022 Optional unit : string Unit of the data series Inherited from SeriesMetaInfo . unit","title":"unit"},{"location":"reference/interfaces/vizzu.Data.Cube/","text":"Vizzu / Modules / vizzu / Data / Cube Interface: Cube vizzu . Data .Cube N dimensional data cude Hierarchy Filter \u21b3 Cube Properties dimensions \u2022 Optional dimensions : Series [] The list of the dimensions of the data cube. filter \u2022 Optional filter : FilterCallback A filter callback is called on each record of the dataset on chart generation. If the callback returns false, the record will not be shown on the chart. Inherited from Filter . filter measures \u2022 Optional measures : CubeData [] The list of measures of the data cube.","title":"vizzu.Data.Cube"},{"location":"reference/interfaces/vizzu.Data.Cube/#interface-cube","text":"vizzu . Data .Cube N dimensional data cude","title":"Interface: Cube"},{"location":"reference/interfaces/vizzu.Data.Cube/#hierarchy","text":"Filter \u21b3 Cube","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Data.Cube/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.Cube/#dimensions","text":"\u2022 Optional dimensions : Series [] The list of the dimensions of the data cube.","title":"dimensions"},{"location":"reference/interfaces/vizzu.Data.Cube/#filter","text":"\u2022 Optional filter : FilterCallback A filter callback is called on each record of the dataset on chart generation. If the callback returns false, the record will not be shown on the chart. Inherited from Filter . filter","title":"filter"},{"location":"reference/interfaces/vizzu.Data.Cube/#measures","text":"\u2022 Optional measures : CubeData [] The list of measures of the data cube.","title":"measures"},{"location":"reference/interfaces/vizzu.Data.CubeData/","text":"Vizzu / Modules / vizzu / Data / CubeData Interface: CubeData vizzu . Data .CubeData Defines a data series of the data cube, and contains a particular variable's values in the data cube and meta info about that variable. Hierarchy SeriesMetaInfo \u21b3 CubeData Properties name \u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. Inherited from SeriesMetaInfo . name type \u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. Inherited from SeriesMetaInfo . type unit \u2022 Optional unit : string Unit of the data series Inherited from SeriesMetaInfo . unit values \u2022 values : CubeRow A nested array that contains the values of the data series. Nesting level should match the number of dimensions .","title":"vizzu.Data.CubeData"},{"location":"reference/interfaces/vizzu.Data.CubeData/#interface-cubedata","text":"vizzu . Data .CubeData Defines a data series of the data cube, and contains a particular variable's values in the data cube and meta info about that variable.","title":"Interface: CubeData"},{"location":"reference/interfaces/vizzu.Data.CubeData/#hierarchy","text":"SeriesMetaInfo \u21b3 CubeData","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Data.CubeData/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.CubeData/#name","text":"\u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. Inherited from SeriesMetaInfo . name","title":"name"},{"location":"reference/interfaces/vizzu.Data.CubeData/#type","text":"\u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. Inherited from SeriesMetaInfo . type","title":"type"},{"location":"reference/interfaces/vizzu.Data.CubeData/#unit","text":"\u2022 Optional unit : string Unit of the data series Inherited from SeriesMetaInfo . unit","title":"unit"},{"location":"reference/interfaces/vizzu.Data.CubeData/#values","text":"\u2022 values : CubeRow A nested array that contains the values of the data series. Nesting level should match the number of dimensions .","title":"values"},{"location":"reference/interfaces/vizzu.Data.DimensionSeriesInfo/","text":"Vizzu / Modules / vizzu / Data / DimensionSeriesInfo Interface: DimensionSeriesInfo vizzu . Data .DimensionSeriesInfo Meta data about dimension data series Hierarchy AbstractSeriesInfo \u21b3 DimensionSeriesInfo Properties categories \u2022 categories : string [] Distinct values in the series length \u2022 length : number Count of values in the series. Inherited from AbstractSeriesInfo . length name \u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. Inherited from AbstractSeriesInfo . name type \u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. Inherited from AbstractSeriesInfo . type unit \u2022 Optional unit : string Unit of the data series Inherited from AbstractSeriesInfo . unit","title":"vizzu.Data.DimensionSeriesInfo"},{"location":"reference/interfaces/vizzu.Data.DimensionSeriesInfo/#interface-dimensionseriesinfo","text":"vizzu . Data .DimensionSeriesInfo Meta data about dimension data series","title":"Interface: DimensionSeriesInfo"},{"location":"reference/interfaces/vizzu.Data.DimensionSeriesInfo/#hierarchy","text":"AbstractSeriesInfo \u21b3 DimensionSeriesInfo","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Data.DimensionSeriesInfo/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.DimensionSeriesInfo/#categories","text":"\u2022 categories : string [] Distinct values in the series","title":"categories"},{"location":"reference/interfaces/vizzu.Data.DimensionSeriesInfo/#length","text":"\u2022 length : number Count of values in the series. Inherited from AbstractSeriesInfo . length","title":"length"},{"location":"reference/interfaces/vizzu.Data.DimensionSeriesInfo/#name","text":"\u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. Inherited from AbstractSeriesInfo . name","title":"name"},{"location":"reference/interfaces/vizzu.Data.DimensionSeriesInfo/#type","text":"\u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. Inherited from AbstractSeriesInfo . type","title":"type"},{"location":"reference/interfaces/vizzu.Data.DimensionSeriesInfo/#unit","text":"\u2022 Optional unit : string Unit of the data series Inherited from AbstractSeriesInfo . unit","title":"unit"},{"location":"reference/interfaces/vizzu.Data.Filter/","text":"Vizzu / Modules / vizzu / Data / Filter Interface: Filter vizzu . Data .Filter Hierarchy Filter \u21b3 TableBySeries \u21b3 TableByRecords \u21b3 Cube Properties filter \u2022 Optional filter : FilterCallback A filter callback is called on each record of the dataset on chart generation. If the callback returns false, the record will not be shown on the chart.","title":"vizzu.Data.Filter"},{"location":"reference/interfaces/vizzu.Data.Filter/#interface-filter","text":"vizzu . Data .Filter","title":"Interface: Filter"},{"location":"reference/interfaces/vizzu.Data.Filter/#hierarchy","text":"Filter \u21b3 TableBySeries \u21b3 TableByRecords \u21b3 Cube","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Data.Filter/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.Filter/#filter","text":"\u2022 Optional filter : FilterCallback A filter callback is called on each record of the dataset on chart generation. If the callback returns false, the record will not be shown on the chart.","title":"filter"},{"location":"reference/interfaces/vizzu.Data.MeasureSeriesInfo/","text":"Vizzu / Modules / vizzu / Data / MeasureSeriesInfo Interface: MeasureSeriesInfo vizzu . Data .MeasureSeriesInfo Meta data about measure data series Hierarchy AbstractSeriesInfo \u21b3 MeasureSeriesInfo Properties length \u2022 length : number Count of values in the series. Inherited from AbstractSeriesInfo . length name \u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. Inherited from AbstractSeriesInfo . name range \u2022 range : Object Type declaration Name Type Description max number Maximal value in the series min number Minimal value in the series type \u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. Inherited from AbstractSeriesInfo . type unit \u2022 Optional unit : string Unit of the data series Inherited from AbstractSeriesInfo . unit","title":"vizzu.Data.MeasureSeriesInfo"},{"location":"reference/interfaces/vizzu.Data.MeasureSeriesInfo/#interface-measureseriesinfo","text":"vizzu . Data .MeasureSeriesInfo Meta data about measure data series","title":"Interface: MeasureSeriesInfo"},{"location":"reference/interfaces/vizzu.Data.MeasureSeriesInfo/#hierarchy","text":"AbstractSeriesInfo \u21b3 MeasureSeriesInfo","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Data.MeasureSeriesInfo/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.MeasureSeriesInfo/#length","text":"\u2022 length : number Count of values in the series. Inherited from AbstractSeriesInfo . length","title":"length"},{"location":"reference/interfaces/vizzu.Data.MeasureSeriesInfo/#name","text":"\u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. Inherited from AbstractSeriesInfo . name","title":"name"},{"location":"reference/interfaces/vizzu.Data.MeasureSeriesInfo/#range","text":"\u2022 range : Object Type declaration Name Type Description max number Maximal value in the series min number Minimal value in the series","title":"range"},{"location":"reference/interfaces/vizzu.Data.MeasureSeriesInfo/#type","text":"\u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. Inherited from AbstractSeriesInfo . type","title":"type"},{"location":"reference/interfaces/vizzu.Data.MeasureSeriesInfo/#unit","text":"\u2022 Optional unit : string Unit of the data series Inherited from AbstractSeriesInfo . unit","title":"unit"},{"location":"reference/interfaces/vizzu.Data.Metainfo/","text":"Vizzu / Modules / vizzu / Data / Metainfo Interface: Metainfo vizzu . Data .Metainfo Meta data about the data set Properties series \u2022 series : SeriesInfo []","title":"vizzu.Data.Metainfo"},{"location":"reference/interfaces/vizzu.Data.Metainfo/#interface-metainfo","text":"vizzu . Data .Metainfo Meta data about the data set","title":"Interface: Metainfo"},{"location":"reference/interfaces/vizzu.Data.Metainfo/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.Metainfo/#series","text":"\u2022 series : SeriesInfo []","title":"series"},{"location":"reference/interfaces/vizzu.Data.Record/","text":"Vizzu / Modules / vizzu / Data / Record Interface: Record vizzu . Data .Record A record of the data set, containing one value of each data series corresponding to the same index. Indexable \u25aa [seriesName: Series [ \"name\" ]]: Value","title":"vizzu.Data.Record"},{"location":"reference/interfaces/vizzu.Data.Record/#interface-record","text":"vizzu . Data .Record A record of the data set, containing one value of each data series corresponding to the same index.","title":"Interface: Record"},{"location":"reference/interfaces/vizzu.Data.Record/#indexable","text":"\u25aa [seriesName: Series [ \"name\" ]]: Value","title":"Indexable"},{"location":"reference/interfaces/vizzu.Data.Series/","text":"Vizzu / Modules / vizzu / Data / Series Interface: Series vizzu . Data .Series Defines a data series of the data set, and contains a particular variable's values in the data set and meta info about the variable. Hierarchy SeriesMetaInfo \u21b3 Series Properties name \u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. Inherited from SeriesMetaInfo . name type \u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. Inherited from SeriesMetaInfo . type unit \u2022 Optional unit : string Unit of the data series Inherited from SeriesMetaInfo . unit values \u2022 values : Values The array that contains the values of the data series. The value types should match type . If the data series is shorter than the longest data series defined, it will be internally extended with empty values.","title":"vizzu.Data.Series"},{"location":"reference/interfaces/vizzu.Data.Series/#interface-series","text":"vizzu . Data .Series Defines a data series of the data set, and contains a particular variable's values in the data set and meta info about the variable.","title":"Interface: Series"},{"location":"reference/interfaces/vizzu.Data.Series/#hierarchy","text":"SeriesMetaInfo \u21b3 Series","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Data.Series/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.Series/#name","text":"\u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. Inherited from SeriesMetaInfo . name","title":"name"},{"location":"reference/interfaces/vizzu.Data.Series/#type","text":"\u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. Inherited from SeriesMetaInfo . type","title":"type"},{"location":"reference/interfaces/vizzu.Data.Series/#unit","text":"\u2022 Optional unit : string Unit of the data series Inherited from SeriesMetaInfo . unit","title":"unit"},{"location":"reference/interfaces/vizzu.Data.Series/#values","text":"\u2022 values : Values The array that contains the values of the data series. The value types should match type . If the data series is shorter than the longest data series defined, it will be internally extended with empty values.","title":"values"},{"location":"reference/interfaces/vizzu.Data.SeriesMetaInfo/","text":"Vizzu / Modules / vizzu / Data / SeriesMetaInfo Interface: SeriesMetaInfo vizzu . Data .SeriesMetaInfo Additional info about a data series besides the contained data. Hierarchy SeriesMetaInfo \u21b3 AbstractSeriesInfo \u21b3 Series \u21b3 CubeData Properties name \u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title. type \u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension. unit \u2022 Optional unit : string Unit of the data series","title":"vizzu.Data.SeriesMetaInfo"},{"location":"reference/interfaces/vizzu.Data.SeriesMetaInfo/#interface-seriesmetainfo","text":"vizzu . Data .SeriesMetaInfo Additional info about a data series besides the contained data.","title":"Interface: SeriesMetaInfo"},{"location":"reference/interfaces/vizzu.Data.SeriesMetaInfo/#hierarchy","text":"SeriesMetaInfo \u21b3 AbstractSeriesInfo \u21b3 Series \u21b3 CubeData","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Data.SeriesMetaInfo/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.SeriesMetaInfo/#name","text":"\u2022 name : string Name of the data series. It will be the unique id of the series to reference it in various parts of the API, mainly in Channel and Record . This name will also be used by default for Axis and Legend title.","title":"name"},{"location":"reference/interfaces/vizzu.Data.SeriesMetaInfo/#type","text":"\u2022 Optional type : \"dimension\" | \"measure\" Type of the data series: 'dimension' - categorical data containing strings (dates should also be added as strings); 'measure' - continuous data containing numbers. If not set, the library will attempt to determine the type based on the type of the first value. Number type will result in measure, string type will result in dimension.","title":"type"},{"location":"reference/interfaces/vizzu.Data.SeriesMetaInfo/#unit","text":"\u2022 Optional unit : string Unit of the data series","title":"unit"},{"location":"reference/interfaces/vizzu.Data.TableByRecords/","text":"Vizzu / Modules / vizzu / Data / TableByRecords Interface: TableByRecords vizzu . Data .TableByRecords Data table specified by records. Hierarchy Filter \u21b3 TableByRecords Properties filter \u2022 Optional filter : FilterCallback A filter callback is called on each record of the dataset on chart generation. If the callback returns false, the record will not be shown on the chart. Inherited from Filter . filter records \u2022 records : Value [][] The array of data records that make up the data set. series \u2022 Optional series : SeriesMetaInfo [] The information about the data series in the records of the data set. Note: not needed if it was previously specified.","title":"vizzu.Data.TableByRecords"},{"location":"reference/interfaces/vizzu.Data.TableByRecords/#interface-tablebyrecords","text":"vizzu . Data .TableByRecords Data table specified by records.","title":"Interface: TableByRecords"},{"location":"reference/interfaces/vizzu.Data.TableByRecords/#hierarchy","text":"Filter \u21b3 TableByRecords","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Data.TableByRecords/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.TableByRecords/#filter","text":"\u2022 Optional filter : FilterCallback A filter callback is called on each record of the dataset on chart generation. If the callback returns false, the record will not be shown on the chart. Inherited from Filter . filter","title":"filter"},{"location":"reference/interfaces/vizzu.Data.TableByRecords/#records","text":"\u2022 records : Value [][] The array of data records that make up the data set.","title":"records"},{"location":"reference/interfaces/vizzu.Data.TableByRecords/#series","text":"\u2022 Optional series : SeriesMetaInfo [] The information about the data series in the records of the data set. Note: not needed if it was previously specified.","title":"series"},{"location":"reference/interfaces/vizzu.Data.TableBySeries/","text":"Vizzu / Modules / vizzu / Data / TableBySeries Interface: TableBySeries vizzu . Data .TableBySeries Data table specified by series. Hierarchy Filter \u21b3 TableBySeries Properties filter \u2022 Optional filter : FilterCallback A filter callback is called on each record of the dataset on chart generation. If the callback returns false, the record will not be shown on the chart. Inherited from Filter . filter series \u2022 series : Series [] The series that make up the the data set.","title":"vizzu.Data.TableBySeries"},{"location":"reference/interfaces/vizzu.Data.TableBySeries/#interface-tablebyseries","text":"vizzu . Data .TableBySeries Data table specified by series.","title":"Interface: TableBySeries"},{"location":"reference/interfaces/vizzu.Data.TableBySeries/#hierarchy","text":"Filter \u21b3 TableBySeries","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Data.TableBySeries/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Data.TableBySeries/#filter","text":"\u2022 Optional filter : FilterCallback A filter callback is called on each record of the dataset on chart generation. If the callback returns false, the record will not be shown on the chart. Inherited from Filter . filter","title":"filter"},{"location":"reference/interfaces/vizzu.Data.TableBySeries/#series","text":"\u2022 series : Series [] The series that make up the the data set.","title":"series"},{"location":"reference/interfaces/vizzu.Event.Object/","text":"Vizzu / Modules / vizzu / Event / Object Interface: Object vizzu . Event .Object The interface of the event object is passed to event handlers by the library. Additional properties will vary by event type. Properties preventDefault \u2022 preventDefault : () => void Type declaration \u25b8 (): void If called, the default action of the event will be canceled. Returns void","title":"vizzu.Event.Object"},{"location":"reference/interfaces/vizzu.Event.Object/#interface-object","text":"vizzu . Event .Object The interface of the event object is passed to event handlers by the library. Additional properties will vary by event type.","title":"Interface: Object"},{"location":"reference/interfaces/vizzu.Event.Object/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Event.Object/#preventdefault","text":"\u2022 preventDefault : () => void Type declaration \u25b8 (): void If called, the default action of the event will be canceled. Returns void","title":"preventDefault"},{"location":"reference/interfaces/vizzu.Lib.Options/","text":"Vizzu / Modules / vizzu / Lib / Options Interface: Options vizzu . Lib .Options Options for the library. Properties wasmUrl \u2022 Optional wasmUrl : string The URL for the webassembly binary (cvizzu.wasm).","title":"vizzu.Lib.Options"},{"location":"reference/interfaces/vizzu.Lib.Options/#interface-options","text":"vizzu . Lib .Options Options for the library.","title":"Interface: Options"},{"location":"reference/interfaces/vizzu.Lib.Options/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Lib.Options/#wasmurl","text":"\u2022 Optional wasmUrl : string The URL for the webassembly binary (cvizzu.wasm).","title":"wasmUrl"},{"location":"reference/interfaces/vizzu.Snapshot/","text":"Vizzu / Modules / vizzu / Snapshot Interface: Snapshot vizzu .Snapshot Stored Chart object. Properties id \u2022 id : number","title":"vizzu.Snapshot"},{"location":"reference/interfaces/vizzu.Snapshot/#interface-snapshot","text":"vizzu .Snapshot Stored Chart object.","title":"Interface: Snapshot"},{"location":"reference/interfaces/vizzu.Snapshot/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Snapshot/#id","text":"\u2022 id : number","title":"id"},{"location":"reference/interfaces/vizzu.Styles.Axis/","text":"Vizzu / Modules / vizzu / Styles / Axis Interface: Axis vizzu . Styles .Axis Properties color \u2022 Optional color : Color Color of the axis line. guides \u2022 Optional guides : Guides interlacing \u2022 Optional interlacing : Interlacing label \u2022 Optional label : AxisLabel Style parameters of the axis labels. ticks \u2022 Optional ticks : Ticks title \u2022 Optional title : AxisTitle Style parameters of the axis title.","title":"vizzu.Styles.Axis"},{"location":"reference/interfaces/vizzu.Styles.Axis/#interface-axis","text":"vizzu . Styles .Axis","title":"Interface: Axis"},{"location":"reference/interfaces/vizzu.Styles.Axis/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Axis/#color","text":"\u2022 Optional color : Color Color of the axis line.","title":"color"},{"location":"reference/interfaces/vizzu.Styles.Axis/#guides","text":"\u2022 Optional guides : Guides","title":"guides"},{"location":"reference/interfaces/vizzu.Styles.Axis/#interlacing","text":"\u2022 Optional interlacing : Interlacing","title":"interlacing"},{"location":"reference/interfaces/vizzu.Styles.Axis/#label","text":"\u2022 Optional label : AxisLabel Style parameters of the axis labels.","title":"label"},{"location":"reference/interfaces/vizzu.Styles.Axis/#ticks","text":"\u2022 Optional ticks : Ticks","title":"ticks"},{"location":"reference/interfaces/vizzu.Styles.Axis/#title","text":"\u2022 Optional title : AxisTitle Style parameters of the axis title.","title":"title"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/","text":"Vizzu / Modules / vizzu / Styles / AxisLabel Interface: AxisLabel vizzu . Styles .AxisLabel Style settings for the values shown on the axis to display the scale being used or the categories along the axis. Note: textAlign has no effect on the Axis label. Hierarchy OrientedLabel \u21b3 AxisLabel Properties angle \u2022 Optional angle : Angle Additional rotation of the label. Inherited from OrientedLabel . angle backgroundColor \u2022 Optional backgroundColor : Color The background color of the displayed text. Inherited from OrientedLabel . backgroundColor color \u2022 Optional color : Color The color of the displayed text. Inherited from OrientedLabel . color fontFamily \u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from OrientedLabel . fontFamily fontSize \u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from OrientedLabel . fontSize fontStyle \u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from OrientedLabel . fontStyle fontWeight \u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from OrientedLabel . fontWeight maxFractionDigits \u2022 Optional maxFractionDigits : number The maximum number of digits in fraction part if the text contains a number. Inherited from OrientedLabel . maxFractionDigits numberFormat \u2022 Optional numberFormat : \"none\" | \"grouped\" | \"prefixed\" The format of the number. Only applicable for texts showing numerical data such as marker and axis labels. 'grouped' uses thousand separators, 'prefixed' uses scientific notation. Inherited from OrientedLabel . numberFormat numberScale \u2022 Optional numberScale : string Number scale used for prefixed number format. Inherited from OrientedLabel . numberScale orientation \u2022 Optional orientation : \"normal\" | \"horizontal\" | \"vertical\" | \"tangential\" Orientation of the label relatively to the axis or marker it is attached to. Inherited from OrientedLabel . orientation paddingBottom \u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from OrientedLabel . paddingBottom paddingLeft \u2022 Optional paddingLeft : Length Left padding of the element. Inherited from OrientedLabel . paddingLeft paddingRight \u2022 Optional paddingRight : Length Right padding of the element. Inherited from OrientedLabel . paddingRight paddingTop \u2022 Optional paddingTop : Length Top padding of the element. Inherited from OrientedLabel . paddingTop position \u2022 Optional position : \"axis\" | \"max-edge\" | \"min-edge\" Label position relatively to the plot. side \u2022 Optional side : \"positive\" | \"negative\" Label alignment relatively to the position on the plot. textAlign \u2022 Optional textAlign : \"center\" | \"left\" | \"right\" The alignment of the displayed text. Inherited from OrientedLabel . textAlign","title":"vizzu.Styles.AxisLabel"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#interface-axislabel","text":"vizzu . Styles .AxisLabel Style settings for the values shown on the axis to display the scale being used or the categories along the axis. Note: textAlign has no effect on the Axis label.","title":"Interface: AxisLabel"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#hierarchy","text":"OrientedLabel \u21b3 AxisLabel","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#angle","text":"\u2022 Optional angle : Angle Additional rotation of the label. Inherited from OrientedLabel . angle","title":"angle"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#backgroundcolor","text":"\u2022 Optional backgroundColor : Color The background color of the displayed text. Inherited from OrientedLabel . backgroundColor","title":"backgroundColor"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#color","text":"\u2022 Optional color : Color The color of the displayed text. Inherited from OrientedLabel . color","title":"color"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#fontfamily","text":"\u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from OrientedLabel . fontFamily","title":"fontFamily"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#fontsize","text":"\u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from OrientedLabel . fontSize","title":"fontSize"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#fontstyle","text":"\u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from OrientedLabel . fontStyle","title":"fontStyle"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#fontweight","text":"\u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from OrientedLabel . fontWeight","title":"fontWeight"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#maxfractiondigits","text":"\u2022 Optional maxFractionDigits : number The maximum number of digits in fraction part if the text contains a number. Inherited from OrientedLabel . maxFractionDigits","title":"maxFractionDigits"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#numberformat","text":"\u2022 Optional numberFormat : \"none\" | \"grouped\" | \"prefixed\" The format of the number. Only applicable for texts showing numerical data such as marker and axis labels. 'grouped' uses thousand separators, 'prefixed' uses scientific notation. Inherited from OrientedLabel . numberFormat","title":"numberFormat"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#numberscale","text":"\u2022 Optional numberScale : string Number scale used for prefixed number format. Inherited from OrientedLabel . numberScale","title":"numberScale"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#orientation","text":"\u2022 Optional orientation : \"normal\" | \"horizontal\" | \"vertical\" | \"tangential\" Orientation of the label relatively to the axis or marker it is attached to. Inherited from OrientedLabel . orientation","title":"orientation"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#paddingbottom","text":"\u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from OrientedLabel . paddingBottom","title":"paddingBottom"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#paddingleft","text":"\u2022 Optional paddingLeft : Length Left padding of the element. Inherited from OrientedLabel . paddingLeft","title":"paddingLeft"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#paddingright","text":"\u2022 Optional paddingRight : Length Right padding of the element. Inherited from OrientedLabel . paddingRight","title":"paddingRight"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#paddingtop","text":"\u2022 Optional paddingTop : Length Top padding of the element. Inherited from OrientedLabel . paddingTop","title":"paddingTop"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#position","text":"\u2022 Optional position : \"axis\" | \"max-edge\" | \"min-edge\" Label position relatively to the plot.","title":"position"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#side","text":"\u2022 Optional side : \"positive\" | \"negative\" Label alignment relatively to the position on the plot.","title":"side"},{"location":"reference/interfaces/vizzu.Styles.AxisLabel/#textalign","text":"\u2022 Optional textAlign : \"center\" | \"left\" | \"right\" The alignment of the displayed text. Inherited from OrientedLabel . textAlign","title":"textAlign"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/","text":"Vizzu / Modules / vizzu / Styles / AxisTitle Interface: AxisTitle vizzu . Styles .AxisTitle Style settings of the Axis title Hierarchy Label \u21b3 AxisTitle Properties backgroundColor \u2022 Optional backgroundColor : Color The background color of the displayed text. Inherited from Label.backgroundColor color \u2022 Optional color : Color The color of the displayed text. Inherited from Label.color fontFamily \u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from Label.fontFamily fontSize \u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from Label.fontSize fontStyle \u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from Label.fontStyle fontWeight \u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from Label.fontWeight maxFractionDigits \u2022 Optional maxFractionDigits : number The maximum number of digits in fraction part if the text contains a number. Inherited from Label.maxFractionDigits numberFormat \u2022 Optional numberFormat : \"none\" | \"grouped\" | \"prefixed\" The format of the number. Only applicable for texts showing numerical data such as marker and axis labels. 'grouped' uses thousand separators, 'prefixed' uses scientific notation. Inherited from Label.numberFormat numberScale \u2022 Optional numberScale : string Number scale used for prefixed number format. Inherited from Label.numberScale orientation \u2022 Optional orientation : \"horizontal\" | \"vertical\" The orientation of the title. paddingBottom \u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Label.paddingBottom paddingLeft \u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Label.paddingLeft paddingRight \u2022 Optional paddingRight : Length Right padding of the element. Inherited from Label.paddingRight paddingTop \u2022 Optional paddingTop : Length Top padding of the element. Inherited from Label.paddingTop position \u2022 Optional position : \"axis\" | \"max-edge\" | \"min-edge\" Title position relatively to the plot. side \u2022 Optional side : \"positive\" | \"negative\" | \"upon\" Title alignment relatively to the position on the plot. textAlign \u2022 Optional textAlign : \"center\" | \"left\" | \"right\" The alignment of the displayed text. Inherited from Label.textAlign vposition \u2022 Optional vposition : \"end\" | \"middle\" | \"begin\" Title position on the axis or edge. vside \u2022 Optional vside : \"positive\" | \"negative\" | \"upon\" Title alignment on the axis or edge.","title":"vizzu.Styles.AxisTitle"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#interface-axistitle","text":"vizzu . Styles .AxisTitle Style settings of the Axis title","title":"Interface: AxisTitle"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#hierarchy","text":"Label \u21b3 AxisTitle","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#backgroundcolor","text":"\u2022 Optional backgroundColor : Color The background color of the displayed text. Inherited from Label.backgroundColor","title":"backgroundColor"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#color","text":"\u2022 Optional color : Color The color of the displayed text. Inherited from Label.color","title":"color"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#fontfamily","text":"\u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from Label.fontFamily","title":"fontFamily"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#fontsize","text":"\u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from Label.fontSize","title":"fontSize"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#fontstyle","text":"\u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from Label.fontStyle","title":"fontStyle"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#fontweight","text":"\u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from Label.fontWeight","title":"fontWeight"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#maxfractiondigits","text":"\u2022 Optional maxFractionDigits : number The maximum number of digits in fraction part if the text contains a number. Inherited from Label.maxFractionDigits","title":"maxFractionDigits"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#numberformat","text":"\u2022 Optional numberFormat : \"none\" | \"grouped\" | \"prefixed\" The format of the number. Only applicable for texts showing numerical data such as marker and axis labels. 'grouped' uses thousand separators, 'prefixed' uses scientific notation. Inherited from Label.numberFormat","title":"numberFormat"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#numberscale","text":"\u2022 Optional numberScale : string Number scale used for prefixed number format. Inherited from Label.numberScale","title":"numberScale"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#orientation","text":"\u2022 Optional orientation : \"horizontal\" | \"vertical\" The orientation of the title.","title":"orientation"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#paddingbottom","text":"\u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Label.paddingBottom","title":"paddingBottom"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#paddingleft","text":"\u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Label.paddingLeft","title":"paddingLeft"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#paddingright","text":"\u2022 Optional paddingRight : Length Right padding of the element. Inherited from Label.paddingRight","title":"paddingRight"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#paddingtop","text":"\u2022 Optional paddingTop : Length Top padding of the element. Inherited from Label.paddingTop","title":"paddingTop"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#position","text":"\u2022 Optional position : \"axis\" | \"max-edge\" | \"min-edge\" Title position relatively to the plot.","title":"position"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#side","text":"\u2022 Optional side : \"positive\" | \"negative\" | \"upon\" Title alignment relatively to the position on the plot.","title":"side"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#textalign","text":"\u2022 Optional textAlign : \"center\" | \"left\" | \"right\" The alignment of the displayed text. Inherited from Label.textAlign","title":"textAlign"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#vposition","text":"\u2022 Optional vposition : \"end\" | \"middle\" | \"begin\" Title position on the axis or edge.","title":"vposition"},{"location":"reference/interfaces/vizzu.Styles.AxisTitle/#vside","text":"\u2022 Optional vside : \"positive\" | \"negative\" | \"upon\" Title alignment on the axis or edge.","title":"vside"},{"location":"reference/interfaces/vizzu.Styles.Box/","text":"Vizzu / Modules / vizzu / Styles / Box Interface: Box vizzu . Styles .Box Hierarchy Box \u21b3 Tooltip \u21b3 Plot \u21b3 Legend \u21b3 Chart Properties backgroundColor \u2022 Optional backgroundColor : Color The background color of the element. borderColor \u2022 Optional borderColor : Color The border color of the element. borderWidth \u2022 Optional borderWidth : number The border width of the element.","title":"vizzu.Styles.Box"},{"location":"reference/interfaces/vizzu.Styles.Box/#interface-box","text":"vizzu . Styles .Box","title":"Interface: Box"},{"location":"reference/interfaces/vizzu.Styles.Box/#hierarchy","text":"Box \u21b3 Tooltip \u21b3 Plot \u21b3 Legend \u21b3 Chart","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.Box/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Box/#backgroundcolor","text":"\u2022 Optional backgroundColor : Color The background color of the element.","title":"backgroundColor"},{"location":"reference/interfaces/vizzu.Styles.Box/#bordercolor","text":"\u2022 Optional borderColor : Color The border color of the element.","title":"borderColor"},{"location":"reference/interfaces/vizzu.Styles.Box/#borderwidth","text":"\u2022 Optional borderWidth : number The border width of the element.","title":"borderWidth"},{"location":"reference/interfaces/vizzu.Styles.Chart/","text":"Vizzu / Modules / vizzu / Styles / Chart Interface: Chart vizzu . Styles .Chart Hierarchy Padding Box Font \u21b3 Chart Properties backgroundColor \u2022 Optional backgroundColor : Color The background color of the element. Inherited from Box . backgroundColor borderColor \u2022 Optional borderColor : Color The border color of the element. Inherited from Box . borderColor borderWidth \u2022 Optional borderWidth : number The border width of the element. Inherited from Box . borderWidth fontFamily \u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from Font . fontFamily fontSize \u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from Font . fontSize fontStyle \u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from Font . fontStyle fontWeight \u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from Font . fontWeight legend \u2022 Optional legend : Legend Style settings for the legend. logo \u2022 Optional logo : Logo Style settings of the Vizzu logo. paddingBottom \u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Padding . paddingBottom paddingLeft \u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Padding . paddingLeft paddingRight \u2022 Optional paddingRight : Length Right padding of the element. Inherited from Padding . paddingRight paddingTop \u2022 Optional paddingTop : Length Top padding of the element. Inherited from Padding . paddingTop plot \u2022 Optional plot : Plot Style settings for the plot area. title \u2022 Optional title : Label Style settings for the main chart title. tooltip \u2022 Optional tooltip : Tooltip Style settings for the tooltip.","title":"vizzu.Styles.Chart"},{"location":"reference/interfaces/vizzu.Styles.Chart/#interface-chart","text":"vizzu . Styles .Chart","title":"Interface: Chart"},{"location":"reference/interfaces/vizzu.Styles.Chart/#hierarchy","text":"Padding Box Font \u21b3 Chart","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.Chart/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Chart/#backgroundcolor","text":"\u2022 Optional backgroundColor : Color The background color of the element. Inherited from Box . backgroundColor","title":"backgroundColor"},{"location":"reference/interfaces/vizzu.Styles.Chart/#bordercolor","text":"\u2022 Optional borderColor : Color The border color of the element. Inherited from Box . borderColor","title":"borderColor"},{"location":"reference/interfaces/vizzu.Styles.Chart/#borderwidth","text":"\u2022 Optional borderWidth : number The border width of the element. Inherited from Box . borderWidth","title":"borderWidth"},{"location":"reference/interfaces/vizzu.Styles.Chart/#fontfamily","text":"\u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from Font . fontFamily","title":"fontFamily"},{"location":"reference/interfaces/vizzu.Styles.Chart/#fontsize","text":"\u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from Font . fontSize","title":"fontSize"},{"location":"reference/interfaces/vizzu.Styles.Chart/#fontstyle","text":"\u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from Font . fontStyle","title":"fontStyle"},{"location":"reference/interfaces/vizzu.Styles.Chart/#fontweight","text":"\u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from Font . fontWeight","title":"fontWeight"},{"location":"reference/interfaces/vizzu.Styles.Chart/#legend","text":"\u2022 Optional legend : Legend Style settings for the legend.","title":"legend"},{"location":"reference/interfaces/vizzu.Styles.Chart/#logo","text":"\u2022 Optional logo : Logo Style settings of the Vizzu logo.","title":"logo"},{"location":"reference/interfaces/vizzu.Styles.Chart/#paddingbottom","text":"\u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Padding . paddingBottom","title":"paddingBottom"},{"location":"reference/interfaces/vizzu.Styles.Chart/#paddingleft","text":"\u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Padding . paddingLeft","title":"paddingLeft"},{"location":"reference/interfaces/vizzu.Styles.Chart/#paddingright","text":"\u2022 Optional paddingRight : Length Right padding of the element. Inherited from Padding . paddingRight","title":"paddingRight"},{"location":"reference/interfaces/vizzu.Styles.Chart/#paddingtop","text":"\u2022 Optional paddingTop : Length Top padding of the element. Inherited from Padding . paddingTop","title":"paddingTop"},{"location":"reference/interfaces/vizzu.Styles.Chart/#plot","text":"\u2022 Optional plot : Plot Style settings for the plot area.","title":"plot"},{"location":"reference/interfaces/vizzu.Styles.Chart/#title","text":"\u2022 Optional title : Label Style settings for the main chart title.","title":"title"},{"location":"reference/interfaces/vizzu.Styles.Chart/#tooltip","text":"\u2022 Optional tooltip : Tooltip Style settings for the tooltip.","title":"tooltip"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/","text":"Vizzu / Modules / vizzu / Styles / DataPoint Interface: DataPoint vizzu . Styles .DataPoint Hierarchy DataPoint \u21b3 Marker Properties circleMaxRadius \u2022 Optional circleMaxRadius : number Maximum circle radius specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. circleMinRadius \u2022 Optional circleMinRadius : number Minimum circle radius specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. colorGradient \u2022 Optional colorGradient : string Color gradient used for the measure on the color channel. colorPalette \u2022 Optional colorPalette : string Color palette used for the dimension on the color channel. lineMaxWidth \u2022 Optional lineMaxWidth : number Maximum line width specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. lineMinWidth \u2022 Optional lineMinWidth : number Minimum of line width specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. maxLightness \u2022 Optional maxLightness : number Lightness value associated with the maximum value of the lightness channel's range. minLightness \u2022 Optional minLightness : number Lightness value associated with the minimum value of the lightness channel's range. rectangleSpacing \u2022 Optional rectangleSpacing : number Spacing between bars/columns. The value specifies the size of the spacing as a factor of the marker size. e.g.: 0.1 means 10% of marker height/width depending on the chart's orientation.","title":"vizzu.Styles.DataPoint"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#interface-datapoint","text":"vizzu . Styles .DataPoint","title":"Interface: DataPoint"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#hierarchy","text":"DataPoint \u21b3 Marker","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#circlemaxradius","text":"\u2022 Optional circleMaxRadius : number Maximum circle radius specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area.","title":"circleMaxRadius"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#circleminradius","text":"\u2022 Optional circleMinRadius : number Minimum circle radius specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area.","title":"circleMinRadius"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#colorgradient","text":"\u2022 Optional colorGradient : string Color gradient used for the measure on the color channel.","title":"colorGradient"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#colorpalette","text":"\u2022 Optional colorPalette : string Color palette used for the dimension on the color channel.","title":"colorPalette"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#linemaxwidth","text":"\u2022 Optional lineMaxWidth : number Maximum line width specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area.","title":"lineMaxWidth"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#lineminwidth","text":"\u2022 Optional lineMinWidth : number Minimum of line width specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area.","title":"lineMinWidth"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#maxlightness","text":"\u2022 Optional maxLightness : number Lightness value associated with the maximum value of the lightness channel's range.","title":"maxLightness"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#minlightness","text":"\u2022 Optional minLightness : number Lightness value associated with the minimum value of the lightness channel's range.","title":"minLightness"},{"location":"reference/interfaces/vizzu.Styles.DataPoint/#rectanglespacing","text":"\u2022 Optional rectangleSpacing : number Spacing between bars/columns. The value specifies the size of the spacing as a factor of the marker size. e.g.: 0.1 means 10% of marker height/width depending on the chart's orientation.","title":"rectangleSpacing"},{"location":"reference/interfaces/vizzu.Styles.Font/","text":"Vizzu / Modules / vizzu / Styles / Font Interface: Font vizzu . Styles .Font Hierarchy Font \u21b3 Tooltip \u21b3 Chart Properties fontFamily \u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. fontSize \u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size fontStyle \u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. fontWeight \u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS.","title":"vizzu.Styles.Font"},{"location":"reference/interfaces/vizzu.Styles.Font/#interface-font","text":"vizzu . Styles .Font","title":"Interface: Font"},{"location":"reference/interfaces/vizzu.Styles.Font/#hierarchy","text":"Font \u21b3 Tooltip \u21b3 Chart","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.Font/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Font/#fontfamily","text":"\u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family.","title":"fontFamily"},{"location":"reference/interfaces/vizzu.Styles.Font/#fontsize","text":"\u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size","title":"fontSize"},{"location":"reference/interfaces/vizzu.Styles.Font/#fontstyle","text":"\u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font.","title":"fontStyle"},{"location":"reference/interfaces/vizzu.Styles.Font/#fontweight","text":"\u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS.","title":"fontWeight"},{"location":"reference/interfaces/vizzu.Styles.Guides/","text":"Vizzu / Modules / vizzu / Styles / Guides Interface: Guides vizzu . Styles .Guides Properties color \u2022 Optional color : Color The color of the guides. lineWidth \u2022 Optional lineWidth : number Line width of the guide in pixel.","title":"vizzu.Styles.Guides"},{"location":"reference/interfaces/vizzu.Styles.Guides/#interface-guides","text":"vizzu . Styles .Guides","title":"Interface: Guides"},{"location":"reference/interfaces/vizzu.Styles.Guides/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Guides/#color","text":"\u2022 Optional color : Color The color of the guides.","title":"color"},{"location":"reference/interfaces/vizzu.Styles.Guides/#linewidth","text":"\u2022 Optional lineWidth : number Line width of the guide in pixel.","title":"lineWidth"},{"location":"reference/interfaces/vizzu.Styles.Interlacing/","text":"Vizzu / Modules / vizzu / Styles / Interlacing Interface: Interlacing vizzu . Styles .Interlacing Properties color \u2022 Optional color : Color Color of the interlacing pattern.","title":"vizzu.Styles.Interlacing"},{"location":"reference/interfaces/vizzu.Styles.Interlacing/#interface-interlacing","text":"vizzu . Styles .Interlacing","title":"Interface: Interlacing"},{"location":"reference/interfaces/vizzu.Styles.Interlacing/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Interlacing/#color","text":"\u2022 Optional color : Color Color of the interlacing pattern.","title":"color"},{"location":"reference/interfaces/vizzu.Styles.Legend/","text":"Vizzu / Modules / vizzu / Styles / Legend Interface: Legend vizzu . Styles .Legend Hierarchy Padding Box \u21b3 Legend Properties backgroundColor \u2022 Optional backgroundColor : Color The background color of the element. Inherited from Box . backgroundColor borderColor \u2022 Optional borderColor : Color The border color of the element. Inherited from Box . borderColor borderWidth \u2022 Optional borderWidth : number The border width of the element. Inherited from Box . borderWidth label \u2022 Optional label : Label Style settings for the labels on the legend. marker \u2022 Optional marker : LegendMarker maxWidth \u2022 Optional maxWidth : Length Limit for the width of the boundary box. paddingBottom \u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Padding . paddingBottom paddingLeft \u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Padding . paddingLeft paddingRight \u2022 Optional paddingRight : Length Right padding of the element. Inherited from Padding . paddingRight paddingTop \u2022 Optional paddingTop : Length Top padding of the element. Inherited from Padding . paddingTop title \u2022 Optional title : Label Style settings for the legend's title. width \u2022 Optional width : Length Width of the legend's boundary box.","title":"vizzu.Styles.Legend"},{"location":"reference/interfaces/vizzu.Styles.Legend/#interface-legend","text":"vizzu . Styles .Legend","title":"Interface: Legend"},{"location":"reference/interfaces/vizzu.Styles.Legend/#hierarchy","text":"Padding Box \u21b3 Legend","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.Legend/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Legend/#backgroundcolor","text":"\u2022 Optional backgroundColor : Color The background color of the element. Inherited from Box . backgroundColor","title":"backgroundColor"},{"location":"reference/interfaces/vizzu.Styles.Legend/#bordercolor","text":"\u2022 Optional borderColor : Color The border color of the element. Inherited from Box . borderColor","title":"borderColor"},{"location":"reference/interfaces/vizzu.Styles.Legend/#borderwidth","text":"\u2022 Optional borderWidth : number The border width of the element. Inherited from Box . borderWidth","title":"borderWidth"},{"location":"reference/interfaces/vizzu.Styles.Legend/#label","text":"\u2022 Optional label : Label Style settings for the labels on the legend.","title":"label"},{"location":"reference/interfaces/vizzu.Styles.Legend/#marker","text":"\u2022 Optional marker : LegendMarker","title":"marker"},{"location":"reference/interfaces/vizzu.Styles.Legend/#maxwidth","text":"\u2022 Optional maxWidth : Length Limit for the width of the boundary box.","title":"maxWidth"},{"location":"reference/interfaces/vizzu.Styles.Legend/#paddingbottom","text":"\u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Padding . paddingBottom","title":"paddingBottom"},{"location":"reference/interfaces/vizzu.Styles.Legend/#paddingleft","text":"\u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Padding . paddingLeft","title":"paddingLeft"},{"location":"reference/interfaces/vizzu.Styles.Legend/#paddingright","text":"\u2022 Optional paddingRight : Length Right padding of the element. Inherited from Padding . paddingRight","title":"paddingRight"},{"location":"reference/interfaces/vizzu.Styles.Legend/#paddingtop","text":"\u2022 Optional paddingTop : Length Top padding of the element. Inherited from Padding . paddingTop","title":"paddingTop"},{"location":"reference/interfaces/vizzu.Styles.Legend/#title","text":"\u2022 Optional title : Label Style settings for the legend's title.","title":"title"},{"location":"reference/interfaces/vizzu.Styles.Legend/#width","text":"\u2022 Optional width : Length Width of the legend's boundary box.","title":"width"},{"location":"reference/interfaces/vizzu.Styles.LegendMarker/","text":"Vizzu / Modules / vizzu / Styles / LegendMarker Interface: LegendMarker vizzu . Styles .LegendMarker Properties size \u2022 Optional size : Length Size of the legend marker (diameter or side length). type \u2022 Optional type : \"square\" | \"circle\" Shape of the legend marker.","title":"vizzu.Styles.LegendMarker"},{"location":"reference/interfaces/vizzu.Styles.LegendMarker/#interface-legendmarker","text":"vizzu . Styles .LegendMarker","title":"Interface: LegendMarker"},{"location":"reference/interfaces/vizzu.Styles.LegendMarker/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.LegendMarker/#size","text":"\u2022 Optional size : Length Size of the legend marker (diameter or side length).","title":"size"},{"location":"reference/interfaces/vizzu.Styles.LegendMarker/#type","text":"\u2022 Optional type : \"square\" | \"circle\" Shape of the legend marker.","title":"type"},{"location":"reference/interfaces/vizzu.Styles.Logo/","text":"Vizzu / Modules / vizzu / Styles / Logo Interface: Logo vizzu . Styles .Logo Hierarchy Padding \u21b3 Logo Properties filter \u2022 Optional filter : ColorTransform Color transformation applied on the colored Vizzu Logo paddingBottom \u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Padding . paddingBottom paddingLeft \u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Padding . paddingLeft paddingRight \u2022 Optional paddingRight : Length Right padding of the element. Inherited from Padding . paddingRight paddingTop \u2022 Optional paddingTop : Length Top padding of the element. Inherited from Padding . paddingTop width \u2022 Optional width : Length Width of the Vizzu logo","title":"vizzu.Styles.Logo"},{"location":"reference/interfaces/vizzu.Styles.Logo/#interface-logo","text":"vizzu . Styles .Logo","title":"Interface: Logo"},{"location":"reference/interfaces/vizzu.Styles.Logo/#hierarchy","text":"Padding \u21b3 Logo","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.Logo/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Logo/#filter","text":"\u2022 Optional filter : ColorTransform Color transformation applied on the colored Vizzu Logo","title":"filter"},{"location":"reference/interfaces/vizzu.Styles.Logo/#paddingbottom","text":"\u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Padding . paddingBottom","title":"paddingBottom"},{"location":"reference/interfaces/vizzu.Styles.Logo/#paddingleft","text":"\u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Padding . paddingLeft","title":"paddingLeft"},{"location":"reference/interfaces/vizzu.Styles.Logo/#paddingright","text":"\u2022 Optional paddingRight : Length Right padding of the element. Inherited from Padding . paddingRight","title":"paddingRight"},{"location":"reference/interfaces/vizzu.Styles.Logo/#paddingtop","text":"\u2022 Optional paddingTop : Length Top padding of the element. Inherited from Padding . paddingTop","title":"paddingTop"},{"location":"reference/interfaces/vizzu.Styles.Logo/#width","text":"\u2022 Optional width : Length Width of the Vizzu logo","title":"width"},{"location":"reference/interfaces/vizzu.Styles.Marker/","text":"Vizzu / Modules / vizzu / Styles / Marker Interface: Marker vizzu . Styles .Marker Hierarchy DataPoint \u21b3 Marker Properties borderOpacity \u2022 Optional borderOpacity : number Opacity of the marker border. borderOpacityMode \u2022 Optional borderOpacityMode : \"straight\" | \"premultiplied\" borderWidth \u2022 Optional borderWidth : number Width of the marker border in pixels. circleMaxRadius \u2022 Optional circleMaxRadius : number Maximum circle radius specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. Inherited from DataPoint . circleMaxRadius circleMinRadius \u2022 Optional circleMinRadius : number Minimum circle radius specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. Inherited from DataPoint . circleMinRadius colorGradient \u2022 Optional colorGradient : string Color gradient used for the measure on the color channel. Inherited from DataPoint . colorGradient colorPalette \u2022 Optional colorPalette : string Color palette used for the dimension on the color channel. Inherited from DataPoint . colorPalette fillOpacity \u2022 Optional fillOpacity : number Opacity of the marker fill color. guides \u2022 Optional guides : Guides Style settings for guide lines drawn for the markers. label \u2022 Optional label : MarkerLabel Style settings for the marker labels. lineMaxWidth \u2022 Optional lineMaxWidth : number Maximum line width specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. Inherited from DataPoint . lineMaxWidth lineMinWidth \u2022 Optional lineMinWidth : number Minimum of line width specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. Inherited from DataPoint . lineMinWidth maxLightness \u2022 Optional maxLightness : number Lightness value associated with the maximum value of the lightness channel's range. Inherited from DataPoint . maxLightness minLightness \u2022 Optional minLightness : number Lightness value associated with the minimum value of the lightness channel's range. Inherited from DataPoint . minLightness rectangleSpacing \u2022 Optional rectangleSpacing : number Spacing between bars/columns. The value specifies the size of the spacing as a factor of the marker size. e.g.: 0.1 means 10% of marker height/width depending on the chart's orientation. Inherited from DataPoint . rectangleSpacing","title":"vizzu.Styles.Marker"},{"location":"reference/interfaces/vizzu.Styles.Marker/#interface-marker","text":"vizzu . Styles .Marker","title":"Interface: Marker"},{"location":"reference/interfaces/vizzu.Styles.Marker/#hierarchy","text":"DataPoint \u21b3 Marker","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.Marker/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Marker/#borderopacity","text":"\u2022 Optional borderOpacity : number Opacity of the marker border.","title":"borderOpacity"},{"location":"reference/interfaces/vizzu.Styles.Marker/#borderopacitymode","text":"\u2022 Optional borderOpacityMode : \"straight\" | \"premultiplied\"","title":"borderOpacityMode"},{"location":"reference/interfaces/vizzu.Styles.Marker/#borderwidth","text":"\u2022 Optional borderWidth : number Width of the marker border in pixels.","title":"borderWidth"},{"location":"reference/interfaces/vizzu.Styles.Marker/#circlemaxradius","text":"\u2022 Optional circleMaxRadius : number Maximum circle radius specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. Inherited from DataPoint . circleMaxRadius","title":"circleMaxRadius"},{"location":"reference/interfaces/vizzu.Styles.Marker/#circleminradius","text":"\u2022 Optional circleMinRadius : number Minimum circle radius specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. Inherited from DataPoint . circleMinRadius","title":"circleMinRadius"},{"location":"reference/interfaces/vizzu.Styles.Marker/#colorgradient","text":"\u2022 Optional colorGradient : string Color gradient used for the measure on the color channel. Inherited from DataPoint . colorGradient","title":"colorGradient"},{"location":"reference/interfaces/vizzu.Styles.Marker/#colorpalette","text":"\u2022 Optional colorPalette : string Color palette used for the dimension on the color channel. Inherited from DataPoint . colorPalette","title":"colorPalette"},{"location":"reference/interfaces/vizzu.Styles.Marker/#fillopacity","text":"\u2022 Optional fillOpacity : number Opacity of the marker fill color.","title":"fillOpacity"},{"location":"reference/interfaces/vizzu.Styles.Marker/#guides","text":"\u2022 Optional guides : Guides Style settings for guide lines drawn for the markers.","title":"guides"},{"location":"reference/interfaces/vizzu.Styles.Marker/#label","text":"\u2022 Optional label : MarkerLabel Style settings for the marker labels.","title":"label"},{"location":"reference/interfaces/vizzu.Styles.Marker/#linemaxwidth","text":"\u2022 Optional lineMaxWidth : number Maximum line width specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. Inherited from DataPoint . lineMaxWidth","title":"lineMaxWidth"},{"location":"reference/interfaces/vizzu.Styles.Marker/#lineminwidth","text":"\u2022 Optional lineMinWidth : number Minimum of line width specified as proportion of plot area size. e.g.: 0.01 means 1% of the width of the plot area. Inherited from DataPoint . lineMinWidth","title":"lineMinWidth"},{"location":"reference/interfaces/vizzu.Styles.Marker/#maxlightness","text":"\u2022 Optional maxLightness : number Lightness value associated with the maximum value of the lightness channel's range. Inherited from DataPoint . maxLightness","title":"maxLightness"},{"location":"reference/interfaces/vizzu.Styles.Marker/#minlightness","text":"\u2022 Optional minLightness : number Lightness value associated with the minimum value of the lightness channel's range. Inherited from DataPoint . minLightness","title":"minLightness"},{"location":"reference/interfaces/vizzu.Styles.Marker/#rectanglespacing","text":"\u2022 Optional rectangleSpacing : number Spacing between bars/columns. The value specifies the size of the spacing as a factor of the marker size. e.g.: 0.1 means 10% of marker height/width depending on the chart's orientation. Inherited from DataPoint . rectangleSpacing","title":"rectangleSpacing"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/","text":"Vizzu / Modules / vizzu / Styles / MarkerLabel Interface: MarkerLabel vizzu . Styles .MarkerLabel Hierarchy OrientedLabel \u21b3 MarkerLabel Properties angle \u2022 Optional angle : Angle Additional rotation of the label. Inherited from OrientedLabel . angle backgroundColor \u2022 Optional backgroundColor : Color The background color of the displayed text. Inherited from OrientedLabel . backgroundColor color \u2022 Optional color : Color The color of the displayed text. Inherited from OrientedLabel . color filter \u2022 Optional filter : ColorTransform Defines the transformation used for calculating the label color from the marker color. fontFamily \u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from OrientedLabel . fontFamily fontSize \u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from OrientedLabel . fontSize fontStyle \u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from OrientedLabel . fontStyle fontWeight \u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from OrientedLabel . fontWeight format \u2022 Optional format : \"measureFirst\" | \"dimensionsFirst\" Sets the order of values on the label if both a measure and a dimension are present. maxFractionDigits \u2022 Optional maxFractionDigits : number The maximum number of digits in fraction part if the text contains a number. Inherited from OrientedLabel . maxFractionDigits numberFormat \u2022 Optional numberFormat : \"none\" | \"grouped\" | \"prefixed\" The format of the number. Only applicable for texts showing numerical data such as marker and axis labels. 'grouped' uses thousand separators, 'prefixed' uses scientific notation. Inherited from OrientedLabel . numberFormat numberScale \u2022 Optional numberScale : string Number scale used for prefixed number format. Inherited from OrientedLabel . numberScale orientation \u2022 Optional orientation : \"normal\" | \"horizontal\" | \"vertical\" | \"tangential\" Orientation of the label relatively to the axis or marker it is attached to. Inherited from OrientedLabel . orientation paddingBottom \u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from OrientedLabel . paddingBottom paddingLeft \u2022 Optional paddingLeft : Length Left padding of the element. Inherited from OrientedLabel . paddingLeft paddingRight \u2022 Optional paddingRight : Length Right padding of the element. Inherited from OrientedLabel . paddingRight paddingTop \u2022 Optional paddingTop : Length Top padding of the element. Inherited from OrientedLabel . paddingTop position \u2022 Optional position : \"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" The label position relatively to the marker. textAlign \u2022 Optional textAlign : \"center\" | \"left\" | \"right\" The alignment of the displayed text. Inherited from OrientedLabel . textAlign","title":"vizzu.Styles.MarkerLabel"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#interface-markerlabel","text":"vizzu . Styles .MarkerLabel","title":"Interface: MarkerLabel"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#hierarchy","text":"OrientedLabel \u21b3 MarkerLabel","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#angle","text":"\u2022 Optional angle : Angle Additional rotation of the label. Inherited from OrientedLabel . angle","title":"angle"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#backgroundcolor","text":"\u2022 Optional backgroundColor : Color The background color of the displayed text. Inherited from OrientedLabel . backgroundColor","title":"backgroundColor"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#color","text":"\u2022 Optional color : Color The color of the displayed text. Inherited from OrientedLabel . color","title":"color"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#filter","text":"\u2022 Optional filter : ColorTransform Defines the transformation used for calculating the label color from the marker color.","title":"filter"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#fontfamily","text":"\u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from OrientedLabel . fontFamily","title":"fontFamily"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#fontsize","text":"\u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from OrientedLabel . fontSize","title":"fontSize"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#fontstyle","text":"\u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from OrientedLabel . fontStyle","title":"fontStyle"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#fontweight","text":"\u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from OrientedLabel . fontWeight","title":"fontWeight"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#format","text":"\u2022 Optional format : \"measureFirst\" | \"dimensionsFirst\" Sets the order of values on the label if both a measure and a dimension are present.","title":"format"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#maxfractiondigits","text":"\u2022 Optional maxFractionDigits : number The maximum number of digits in fraction part if the text contains a number. Inherited from OrientedLabel . maxFractionDigits","title":"maxFractionDigits"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#numberformat","text":"\u2022 Optional numberFormat : \"none\" | \"grouped\" | \"prefixed\" The format of the number. Only applicable for texts showing numerical data such as marker and axis labels. 'grouped' uses thousand separators, 'prefixed' uses scientific notation. Inherited from OrientedLabel . numberFormat","title":"numberFormat"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#numberscale","text":"\u2022 Optional numberScale : string Number scale used for prefixed number format. Inherited from OrientedLabel . numberScale","title":"numberScale"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#orientation","text":"\u2022 Optional orientation : \"normal\" | \"horizontal\" | \"vertical\" | \"tangential\" Orientation of the label relatively to the axis or marker it is attached to. Inherited from OrientedLabel . orientation","title":"orientation"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#paddingbottom","text":"\u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from OrientedLabel . paddingBottom","title":"paddingBottom"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#paddingleft","text":"\u2022 Optional paddingLeft : Length Left padding of the element. Inherited from OrientedLabel . paddingLeft","title":"paddingLeft"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#paddingright","text":"\u2022 Optional paddingRight : Length Right padding of the element. Inherited from OrientedLabel . paddingRight","title":"paddingRight"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#paddingtop","text":"\u2022 Optional paddingTop : Length Top padding of the element. Inherited from OrientedLabel . paddingTop","title":"paddingTop"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#position","text":"\u2022 Optional position : \"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" The label position relatively to the marker.","title":"position"},{"location":"reference/interfaces/vizzu.Styles.MarkerLabel/#textalign","text":"\u2022 Optional textAlign : \"center\" | \"left\" | \"right\" The alignment of the displayed text. Inherited from OrientedLabel . textAlign","title":"textAlign"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/","text":"Vizzu / Modules / vizzu / Styles / OrientedLabel Interface: OrientedLabel vizzu . Styles .OrientedLabel Hierarchy Label \u21b3 OrientedLabel \u21b3\u21b3 MarkerLabel \u21b3\u21b3 AxisLabel Properties angle \u2022 Optional angle : Angle Additional rotation of the label. backgroundColor \u2022 Optional backgroundColor : Color The background color of the displayed text. Inherited from Label.backgroundColor color \u2022 Optional color : Color The color of the displayed text. Inherited from Label.color fontFamily \u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from Label.fontFamily fontSize \u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from Label.fontSize fontStyle \u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from Label.fontStyle fontWeight \u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from Label.fontWeight maxFractionDigits \u2022 Optional maxFractionDigits : number The maximum number of digits in fraction part if the text contains a number. Inherited from Label.maxFractionDigits numberFormat \u2022 Optional numberFormat : \"none\" | \"grouped\" | \"prefixed\" The format of the number. Only applicable for texts showing numerical data such as marker and axis labels. 'grouped' uses thousand separators, 'prefixed' uses scientific notation. Inherited from Label.numberFormat numberScale \u2022 Optional numberScale : string Number scale used for prefixed number format. Inherited from Label.numberScale orientation \u2022 Optional orientation : \"normal\" | \"horizontal\" | \"vertical\" | \"tangential\" Orientation of the label relatively to the axis or marker it is attached to. paddingBottom \u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Label.paddingBottom paddingLeft \u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Label.paddingLeft paddingRight \u2022 Optional paddingRight : Length Right padding of the element. Inherited from Label.paddingRight paddingTop \u2022 Optional paddingTop : Length Top padding of the element. Inherited from Label.paddingTop textAlign \u2022 Optional textAlign : \"center\" | \"left\" | \"right\" The alignment of the displayed text. Inherited from Label.textAlign","title":"vizzu.Styles.OrientedLabel"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#interface-orientedlabel","text":"vizzu . Styles .OrientedLabel","title":"Interface: OrientedLabel"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#hierarchy","text":"Label \u21b3 OrientedLabel \u21b3\u21b3 MarkerLabel \u21b3\u21b3 AxisLabel","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#angle","text":"\u2022 Optional angle : Angle Additional rotation of the label.","title":"angle"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#backgroundcolor","text":"\u2022 Optional backgroundColor : Color The background color of the displayed text. Inherited from Label.backgroundColor","title":"backgroundColor"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#color","text":"\u2022 Optional color : Color The color of the displayed text. Inherited from Label.color","title":"color"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#fontfamily","text":"\u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from Label.fontFamily","title":"fontFamily"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#fontsize","text":"\u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from Label.fontSize","title":"fontSize"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#fontstyle","text":"\u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from Label.fontStyle","title":"fontStyle"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#fontweight","text":"\u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from Label.fontWeight","title":"fontWeight"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#maxfractiondigits","text":"\u2022 Optional maxFractionDigits : number The maximum number of digits in fraction part if the text contains a number. Inherited from Label.maxFractionDigits","title":"maxFractionDigits"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#numberformat","text":"\u2022 Optional numberFormat : \"none\" | \"grouped\" | \"prefixed\" The format of the number. Only applicable for texts showing numerical data such as marker and axis labels. 'grouped' uses thousand separators, 'prefixed' uses scientific notation. Inherited from Label.numberFormat","title":"numberFormat"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#numberscale","text":"\u2022 Optional numberScale : string Number scale used for prefixed number format. Inherited from Label.numberScale","title":"numberScale"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#orientation","text":"\u2022 Optional orientation : \"normal\" | \"horizontal\" | \"vertical\" | \"tangential\" Orientation of the label relatively to the axis or marker it is attached to.","title":"orientation"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#paddingbottom","text":"\u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Label.paddingBottom","title":"paddingBottom"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#paddingleft","text":"\u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Label.paddingLeft","title":"paddingLeft"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#paddingright","text":"\u2022 Optional paddingRight : Length Right padding of the element. Inherited from Label.paddingRight","title":"paddingRight"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#paddingtop","text":"\u2022 Optional paddingTop : Length Top padding of the element. Inherited from Label.paddingTop","title":"paddingTop"},{"location":"reference/interfaces/vizzu.Styles.OrientedLabel/#textalign","text":"\u2022 Optional textAlign : \"center\" | \"left\" | \"right\" The alignment of the displayed text. Inherited from Label.textAlign","title":"textAlign"},{"location":"reference/interfaces/vizzu.Styles.Padding/","text":"Vizzu / Modules / vizzu / Styles / Padding Interface: Padding vizzu . Styles .Padding Hierarchy Padding \u21b3 Logo \u21b3 Plot \u21b3 Legend \u21b3 Chart Properties paddingBottom \u2022 Optional paddingBottom : Length Bottom padding of the element. paddingLeft \u2022 Optional paddingLeft : Length Left padding of the element. paddingRight \u2022 Optional paddingRight : Length Right padding of the element. paddingTop \u2022 Optional paddingTop : Length Top padding of the element.","title":"vizzu.Styles.Padding"},{"location":"reference/interfaces/vizzu.Styles.Padding/#interface-padding","text":"vizzu . Styles .Padding","title":"Interface: Padding"},{"location":"reference/interfaces/vizzu.Styles.Padding/#hierarchy","text":"Padding \u21b3 Logo \u21b3 Plot \u21b3 Legend \u21b3 Chart","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.Padding/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Padding/#paddingbottom","text":"\u2022 Optional paddingBottom : Length Bottom padding of the element.","title":"paddingBottom"},{"location":"reference/interfaces/vizzu.Styles.Padding/#paddingleft","text":"\u2022 Optional paddingLeft : Length Left padding of the element.","title":"paddingLeft"},{"location":"reference/interfaces/vizzu.Styles.Padding/#paddingright","text":"\u2022 Optional paddingRight : Length Right padding of the element.","title":"paddingRight"},{"location":"reference/interfaces/vizzu.Styles.Padding/#paddingtop","text":"\u2022 Optional paddingTop : Length Top padding of the element.","title":"paddingTop"},{"location":"reference/interfaces/vizzu.Styles.Plot/","text":"Vizzu / Modules / vizzu / Styles / Plot Interface: Plot vizzu . Styles .Plot Hierarchy Padding Box \u21b3 Plot Properties backgroundColor \u2022 Optional backgroundColor : Color The background color of the element. Inherited from Box . backgroundColor borderColor \u2022 Optional borderColor : Color The border color of the element. Inherited from Box . borderColor borderWidth \u2022 Optional borderWidth : number The border width of the element. Inherited from Box . borderWidth marker \u2022 Optional marker : Marker Style settings for the markers. overflow \u2022 Optional overflow : \"hidden\" | \"visible\" Controls drawing outside of the plot area. If hidden, clipping will be set for the boundary of the coordinate system. paddingBottom \u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Padding . paddingBottom paddingLeft \u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Padding . paddingLeft paddingRight \u2022 Optional paddingRight : Length Right padding of the element. Inherited from Padding . paddingRight paddingTop \u2022 Optional paddingTop : Length Top padding of the element. Inherited from Padding . paddingTop xAxis \u2022 Optional xAxis : Axis Style settings for the x-axis - or the angle when using polar coordinates. yAxis \u2022 Optional yAxis : Axis Style settings for the y-axis - or the radius when using polar coordinates.","title":"vizzu.Styles.Plot"},{"location":"reference/interfaces/vizzu.Styles.Plot/#interface-plot","text":"vizzu . Styles .Plot","title":"Interface: Plot"},{"location":"reference/interfaces/vizzu.Styles.Plot/#hierarchy","text":"Padding Box \u21b3 Plot","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.Plot/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Plot/#backgroundcolor","text":"\u2022 Optional backgroundColor : Color The background color of the element. Inherited from Box . backgroundColor","title":"backgroundColor"},{"location":"reference/interfaces/vizzu.Styles.Plot/#bordercolor","text":"\u2022 Optional borderColor : Color The border color of the element. Inherited from Box . borderColor","title":"borderColor"},{"location":"reference/interfaces/vizzu.Styles.Plot/#borderwidth","text":"\u2022 Optional borderWidth : number The border width of the element. Inherited from Box . borderWidth","title":"borderWidth"},{"location":"reference/interfaces/vizzu.Styles.Plot/#marker","text":"\u2022 Optional marker : Marker Style settings for the markers.","title":"marker"},{"location":"reference/interfaces/vizzu.Styles.Plot/#overflow","text":"\u2022 Optional overflow : \"hidden\" | \"visible\" Controls drawing outside of the plot area. If hidden, clipping will be set for the boundary of the coordinate system.","title":"overflow"},{"location":"reference/interfaces/vizzu.Styles.Plot/#paddingbottom","text":"\u2022 Optional paddingBottom : Length Bottom padding of the element. Inherited from Padding . paddingBottom","title":"paddingBottom"},{"location":"reference/interfaces/vizzu.Styles.Plot/#paddingleft","text":"\u2022 Optional paddingLeft : Length Left padding of the element. Inherited from Padding . paddingLeft","title":"paddingLeft"},{"location":"reference/interfaces/vizzu.Styles.Plot/#paddingright","text":"\u2022 Optional paddingRight : Length Right padding of the element. Inherited from Padding . paddingRight","title":"paddingRight"},{"location":"reference/interfaces/vizzu.Styles.Plot/#paddingtop","text":"\u2022 Optional paddingTop : Length Top padding of the element. Inherited from Padding . paddingTop","title":"paddingTop"},{"location":"reference/interfaces/vizzu.Styles.Plot/#xaxis","text":"\u2022 Optional xAxis : Axis Style settings for the x-axis - or the angle when using polar coordinates.","title":"xAxis"},{"location":"reference/interfaces/vizzu.Styles.Plot/#yaxis","text":"\u2022 Optional yAxis : Axis Style settings for the y-axis - or the radius when using polar coordinates.","title":"yAxis"},{"location":"reference/interfaces/vizzu.Styles.Text/","text":"Vizzu / Modules / vizzu / Styles / Text Interface: Text vizzu . Styles .Text Properties backgroundColor \u2022 Optional backgroundColor : Color The background color of the displayed text. color \u2022 Optional color : Color The color of the displayed text. maxFractionDigits \u2022 Optional maxFractionDigits : number The maximum number of digits in fraction part if the text contains a number. numberFormat \u2022 Optional numberFormat : \"none\" | \"grouped\" | \"prefixed\" The format of the number. Only applicable for texts showing numerical data such as marker and axis labels. 'grouped' uses thousand separators, 'prefixed' uses scientific notation. numberScale \u2022 Optional numberScale : string Number scale used for prefixed number format. textAlign \u2022 Optional textAlign : \"center\" | \"left\" | \"right\" The alignment of the displayed text.","title":"vizzu.Styles.Text"},{"location":"reference/interfaces/vizzu.Styles.Text/#interface-text","text":"vizzu . Styles .Text","title":"Interface: Text"},{"location":"reference/interfaces/vizzu.Styles.Text/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Text/#backgroundcolor","text":"\u2022 Optional backgroundColor : Color The background color of the displayed text.","title":"backgroundColor"},{"location":"reference/interfaces/vizzu.Styles.Text/#color","text":"\u2022 Optional color : Color The color of the displayed text.","title":"color"},{"location":"reference/interfaces/vizzu.Styles.Text/#maxfractiondigits","text":"\u2022 Optional maxFractionDigits : number The maximum number of digits in fraction part if the text contains a number.","title":"maxFractionDigits"},{"location":"reference/interfaces/vizzu.Styles.Text/#numberformat","text":"\u2022 Optional numberFormat : \"none\" | \"grouped\" | \"prefixed\" The format of the number. Only applicable for texts showing numerical data such as marker and axis labels. 'grouped' uses thousand separators, 'prefixed' uses scientific notation.","title":"numberFormat"},{"location":"reference/interfaces/vizzu.Styles.Text/#numberscale","text":"\u2022 Optional numberScale : string Number scale used for prefixed number format.","title":"numberScale"},{"location":"reference/interfaces/vizzu.Styles.Text/#textalign","text":"\u2022 Optional textAlign : \"center\" | \"left\" | \"right\" The alignment of the displayed text.","title":"textAlign"},{"location":"reference/interfaces/vizzu.Styles.Ticks/","text":"Vizzu / Modules / vizzu / Styles / Ticks Interface: Ticks vizzu . Styles .Ticks Properties color \u2022 Optional color : Color Color of the ticks on the axis. length \u2022 Optional length : Length Length of the ticks on the axis. lineWidth \u2022 Optional lineWidth : number Line width of the ticks on the axis. position \u2022 Optional position : \"center\" | \"outside\" | \"inside\" Position of the ticks on the axis relatively to the axis line.","title":"vizzu.Styles.Ticks"},{"location":"reference/interfaces/vizzu.Styles.Ticks/#interface-ticks","text":"vizzu . Styles .Ticks","title":"Interface: Ticks"},{"location":"reference/interfaces/vizzu.Styles.Ticks/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Ticks/#color","text":"\u2022 Optional color : Color Color of the ticks on the axis.","title":"color"},{"location":"reference/interfaces/vizzu.Styles.Ticks/#length","text":"\u2022 Optional length : Length Length of the ticks on the axis.","title":"length"},{"location":"reference/interfaces/vizzu.Styles.Ticks/#linewidth","text":"\u2022 Optional lineWidth : number Line width of the ticks on the axis.","title":"lineWidth"},{"location":"reference/interfaces/vizzu.Styles.Ticks/#position","text":"\u2022 Optional position : \"center\" | \"outside\" | \"inside\" Position of the ticks on the axis relatively to the axis line.","title":"position"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/","text":"Vizzu / Modules / vizzu / Styles / Tooltip Interface: Tooltip vizzu . Styles .Tooltip Hierarchy Font Box \u21b3 Tooltip Properties arrowSize \u2022 Optional arrowSize : number Base size of the info bubble arrow backgroundColor \u2022 Optional backgroundColor : Color The background color of the element. Inherited from Box . backgroundColor borderColor \u2022 Optional borderColor : Color The border color of the element. Inherited from Box . borderColor borderRadius \u2022 Optional borderRadius : number Corner radius for the info bubble borderWidth \u2022 Optional borderWidth : number The border width of the element. Inherited from Box . borderWidth color \u2022 Optional color : Color The foreground color of the tooltip text distance \u2022 Optional distance : number Distance between the data point and the info bubble dropShadow \u2022 Optional dropShadow : number Drop shadow distance from the info bubble fontFamily \u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from Font . fontFamily fontSize \u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from Font . fontSize fontStyle \u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from Font . fontStyle fontWeight \u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from Font . fontWeight layout \u2022 Optional layout : \"singleLine\" | \"multiLine\" The layout of the tooltip text radius \u2022 Optional radius : number Data point marker radius seriesName \u2022 Optional seriesName : string Specifies the name of the data series dispalyed at the first position on the tooltip shadowColor \u2022 Optional shadowColor : Color Color of the drop shadow","title":"vizzu.Styles.Tooltip"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#interface-tooltip","text":"vizzu . Styles .Tooltip","title":"Interface: Tooltip"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#hierarchy","text":"Font Box \u21b3 Tooltip","title":"Hierarchy"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#arrowsize","text":"\u2022 Optional arrowSize : number Base size of the info bubble arrow","title":"arrowSize"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#backgroundcolor","text":"\u2022 Optional backgroundColor : Color The background color of the element. Inherited from Box . backgroundColor","title":"backgroundColor"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#bordercolor","text":"\u2022 Optional borderColor : Color The border color of the element. Inherited from Box . borderColor","title":"borderColor"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#borderradius","text":"\u2022 Optional borderRadius : number Corner radius for the info bubble","title":"borderRadius"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#borderwidth","text":"\u2022 Optional borderWidth : number The border width of the element. Inherited from Box . borderWidth","title":"borderWidth"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#color","text":"\u2022 Optional color : Color The foreground color of the tooltip text","title":"color"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#distance","text":"\u2022 Optional distance : number Distance between the data point and the info bubble","title":"distance"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#dropshadow","text":"\u2022 Optional dropShadow : number Drop shadow distance from the info bubble","title":"dropShadow"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#fontfamily","text":"\u2022 Optional fontFamily : string The family of the font. If not set, it inherits the root style font family. Inherited from Font . fontFamily","title":"fontFamily"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#fontsize","text":"\u2022 Optional fontSize : Length The size of the font. Percentage values are relative to the root style font size Inherited from Font . fontSize","title":"fontSize"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#fontstyle","text":"\u2022 Optional fontStyle : \"normal\" | \"italic\" | \"oblique\" The style of the font. Inherited from Font . fontStyle","title":"fontStyle"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#fontweight","text":"\u2022 Optional fontWeight : number | \"bold\" | \"normal\" The weight of the font, numbers use the same scale as CSS. Inherited from Font . fontWeight","title":"fontWeight"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#layout","text":"\u2022 Optional layout : \"singleLine\" | \"multiLine\" The layout of the tooltip text","title":"layout"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#radius","text":"\u2022 Optional radius : number Data point marker radius","title":"radius"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#seriesname","text":"\u2022 Optional seriesName : string Specifies the name of the data series dispalyed at the first position on the tooltip","title":"seriesName"},{"location":"reference/interfaces/vizzu.Styles.Tooltip/#shadowcolor","text":"\u2022 Optional shadowColor : Color Color of the drop shadow","title":"shadowColor"},{"location":"reference/modules/presets/","text":"Vizzu / Modules / presets Module: presets Classes Presets Interfaces Area Bar Bubble Bubbleplot Column Donut GroupedBar GroupedColumn Heatmap Line Lollipop Marimekko Mekko NestedDonut PercentageArea PercentageBar PercentageColumn Pie PolarColumn PolarLine PolarScatter PolarStackedColumn Preset RadialBar RadialStackedBar Scatter SplittedArea SplittedBar SplittedColumn StackedArea StackedBar StackedBubble StackedColumn StackedTreemap Stream Treemap VariableRadiusPie VerticalLine VerticalStream VerticalViolin Violin Waterfall","title":"Presets"},{"location":"reference/modules/presets/#module-presets","text":"","title":"Module: presets"},{"location":"reference/modules/presets/#classes","text":"Presets","title":"Classes"},{"location":"reference/modules/presets/#interfaces","text":"Area Bar Bubble Bubbleplot Column Donut GroupedBar GroupedColumn Heatmap Line Lollipop Marimekko Mekko NestedDonut PercentageArea PercentageBar PercentageColumn Pie PolarColumn PolarLine PolarScatter PolarStackedColumn Preset RadialBar RadialStackedBar Scatter SplittedArea SplittedBar SplittedColumn StackedArea StackedBar StackedBubble StackedColumn StackedTreemap Stream Treemap VariableRadiusPie VerticalLine VerticalStream VerticalViolin Violin Waterfall","title":"Interfaces"},{"location":"reference/modules/vizzu.Anim/","text":"Vizzu / Modules / vizzu / Anim Namespace: Anim vizzu .Anim Interfaces Animation Completing Control ControlOptions GroupOptions Keyframe Options Target Type Aliases Duration \u01ac Duration : `${number}s` | `${number}ms` | number Duration can be set in seconds or milliseconds. In case no unit is set, it defaults to seconds. Easing \u01ac Easing : \"none\" | \"linear\" | \"step-start\" | \"step-end\" | \"ease\" | \"ease-in\" | \"ease-out\" | \"ease-in-out\" | `cubic-bezier(${number},${number},${number},${number})` Keyframes \u01ac Keyframes : LazyKeyframe [] Sequence of keyframe descriptors LazyKeyframe \u01ac LazyKeyframe : Keyframe | LazyTarget Types, that can represent a Keyframe. LazyOptions \u01ac LazyOptions : Options | Duration | null All types, which can represent an animation option. LazyTarget \u01ac LazyTarget : Target | Chart | Snapshot All types, which can represent a single animation target chart state. RegroupStrategy \u01ac RegroupStrategy : \"fade\" | \"drilldown\" | \"aggregate\" Type of transition when the categorical series differ on the source and the target chart. fade: the source chart fades out while the target chart fades in; drilldown: markers are splitted to be able to represent the target chart; aggregate: markers are aggregated then splitted differently to be able to represent the target chart.","title":"vizzu.Anim"},{"location":"reference/modules/vizzu.Anim/#namespace-anim","text":"vizzu .Anim","title":"Namespace: Anim"},{"location":"reference/modules/vizzu.Anim/#interfaces","text":"Animation Completing Control ControlOptions GroupOptions Keyframe Options Target","title":"Interfaces"},{"location":"reference/modules/vizzu.Anim/#type-aliases","text":"","title":"Type Aliases"},{"location":"reference/modules/vizzu.Anim/#duration","text":"\u01ac Duration : `${number}s` | `${number}ms` | number Duration can be set in seconds or milliseconds. In case no unit is set, it defaults to seconds.","title":"Duration"},{"location":"reference/modules/vizzu.Anim/#easing","text":"\u01ac Easing : \"none\" | \"linear\" | \"step-start\" | \"step-end\" | \"ease\" | \"ease-in\" | \"ease-out\" | \"ease-in-out\" | `cubic-bezier(${number},${number},${number},${number})`","title":"Easing"},{"location":"reference/modules/vizzu.Anim/#keyframes","text":"\u01ac Keyframes : LazyKeyframe [] Sequence of keyframe descriptors","title":"Keyframes"},{"location":"reference/modules/vizzu.Anim/#lazykeyframe","text":"\u01ac LazyKeyframe : Keyframe | LazyTarget Types, that can represent a Keyframe.","title":"LazyKeyframe"},{"location":"reference/modules/vizzu.Anim/#lazyoptions","text":"\u01ac LazyOptions : Options | Duration | null All types, which can represent an animation option.","title":"LazyOptions"},{"location":"reference/modules/vizzu.Anim/#lazytarget","text":"\u01ac LazyTarget : Target | Chart | Snapshot All types, which can represent a single animation target chart state.","title":"LazyTarget"},{"location":"reference/modules/vizzu.Anim/#regroupstrategy","text":"\u01ac RegroupStrategy : \"fade\" | \"drilldown\" | \"aggregate\" Type of transition when the categorical series differ on the source and the target chart. fade: the source chart fades out while the target chart fades in; drilldown: markers are splitted to be able to represent the target chart; aggregate: markers are aggregated then splitted differently to be able to represent the target chart.","title":"RegroupStrategy"},{"location":"reference/modules/vizzu.Config/","text":"Vizzu / Modules / vizzu / Config Namespace: Config vizzu .Config Interfaces Channel ChannelRange Channels Chart Type Aliases ChannelExtrema \u01ac ChannelExtrema : number | `${number}%` | `${number}min` | `${number}max` | \"auto\"","title":"vizzu.Config"},{"location":"reference/modules/vizzu.Config/#namespace-config","text":"vizzu .Config","title":"Namespace: Config"},{"location":"reference/modules/vizzu.Config/#interfaces","text":"Channel ChannelRange Channels Chart","title":"Interfaces"},{"location":"reference/modules/vizzu.Config/#type-aliases","text":"","title":"Type Aliases"},{"location":"reference/modules/vizzu.Config/#channelextrema","text":"\u01ac ChannelExtrema : number | `${number}%` | `${number}min` | `${number}max` | \"auto\"","title":"ChannelExtrema"},{"location":"reference/modules/vizzu.Data/","text":"Vizzu / Modules / vizzu / Data Namespace: Data vizzu .Data Interfaces AbstractSeriesInfo Cube CubeData DimensionSeriesInfo Filter MeasureSeriesInfo Metainfo Record Series SeriesMetaInfo TableByRecords TableBySeries Type Aliases CubeRow \u01ac CubeRow : Values | CubeRow [] FilterCallback \u01ac FilterCallback : ( record : Record ) => boolean Type declaration \u25b8 ( record ): boolean Parameters Name Type record Record Returns boolean SeriesInfo \u01ac SeriesInfo : DimensionSeriesInfo | MeasureSeriesInfo SeriesList \u01ac SeriesList : string [] | string Set \u01ac Set : TableBySeries | TableByRecords | Cube Data set is a collection of related data series . Each chart works on a single data set. Value \u01ac Value : string | number Represents a categorical or data value Values \u01ac Values : string [] | number [] List of data values in a series.","title":"vizzu.Data"},{"location":"reference/modules/vizzu.Data/#namespace-data","text":"vizzu .Data","title":"Namespace: Data"},{"location":"reference/modules/vizzu.Data/#interfaces","text":"AbstractSeriesInfo Cube CubeData DimensionSeriesInfo Filter MeasureSeriesInfo Metainfo Record Series SeriesMetaInfo TableByRecords TableBySeries","title":"Interfaces"},{"location":"reference/modules/vizzu.Data/#type-aliases","text":"","title":"Type Aliases"},{"location":"reference/modules/vizzu.Data/#cuberow","text":"\u01ac CubeRow : Values | CubeRow []","title":"CubeRow"},{"location":"reference/modules/vizzu.Data/#filtercallback","text":"\u01ac FilterCallback : ( record : Record ) => boolean Type declaration \u25b8 ( record ): boolean Parameters Name Type record Record Returns boolean","title":"FilterCallback"},{"location":"reference/modules/vizzu.Data/#seriesinfo","text":"\u01ac SeriesInfo : DimensionSeriesInfo | MeasureSeriesInfo","title":"SeriesInfo"},{"location":"reference/modules/vizzu.Data/#serieslist","text":"\u01ac SeriesList : string [] | string","title":"SeriesList"},{"location":"reference/modules/vizzu.Data/#set","text":"\u01ac Set : TableBySeries | TableByRecords | Cube Data set is a collection of related data series . Each chart works on a single data set.","title":"Set"},{"location":"reference/modules/vizzu.Data/#value","text":"\u01ac Value : string | number Represents a categorical or data value","title":"Value"},{"location":"reference/modules/vizzu.Data/#values","text":"\u01ac Values : string [] | number [] List of data values in a series.","title":"Values"},{"location":"reference/modules/vizzu.Event/","text":"Vizzu / Modules / vizzu / Event Namespace: Event vizzu .Event Interfaces Object Type Aliases Type \u01ac Type : \"click\" | \"mouseon\" | \"mousemove\" | \"wheel\" | \"update\" | \"background-draw\" | \"title-draw\" | \"logo-draw\" | \"legend-background-draw\" | \"legend-title-draw\" | \"legend-label-draw\" | \"legend-marker-draw\" | \"legend-bar-draw\" | \"plot-background-draw\" | \"plot-marker-draw\" | \"plot-marker-label-draw\" | \"plot-marker-guide-draw\" | \"plot-axis-draw\" | \"plot-axis-title-draw\" | \"plot-axis-label-draw\" | \"plot-axis-tick-draw\" | \"plot-axis-guide-draw\" | \"plot-axis-interlacing-draw\" | \"animation-begin\" | \"animation-complete\"","title":"vizzu.Event"},{"location":"reference/modules/vizzu.Event/#namespace-event","text":"vizzu .Event","title":"Namespace: Event"},{"location":"reference/modules/vizzu.Event/#interfaces","text":"Object","title":"Interfaces"},{"location":"reference/modules/vizzu.Event/#type-aliases","text":"","title":"Type Aliases"},{"location":"reference/modules/vizzu.Event/#type","text":"\u01ac Type : \"click\" | \"mouseon\" | \"mousemove\" | \"wheel\" | \"update\" | \"background-draw\" | \"title-draw\" | \"logo-draw\" | \"legend-background-draw\" | \"legend-title-draw\" | \"legend-label-draw\" | \"legend-marker-draw\" | \"legend-bar-draw\" | \"plot-background-draw\" | \"plot-marker-draw\" | \"plot-marker-label-draw\" | \"plot-marker-guide-draw\" | \"plot-axis-draw\" | \"plot-axis-title-draw\" | \"plot-axis-label-draw\" | \"plot-axis-tick-draw\" | \"plot-axis-guide-draw\" | \"plot-axis-interlacing-draw\" | \"animation-begin\" | \"animation-complete\"","title":"Type"},{"location":"reference/modules/vizzu.Lib/","text":"Vizzu / Modules / vizzu / Lib Namespace: Lib vizzu .Lib Interfaces Options","title":"vizzu.Lib"},{"location":"reference/modules/vizzu.Lib/#namespace-lib","text":"vizzu .Lib","title":"Namespace: Lib"},{"location":"reference/modules/vizzu.Lib/#interfaces","text":"Options","title":"Interfaces"},{"location":"reference/modules/vizzu.Styles/","text":"Vizzu / Modules / vizzu / Styles Namespace: Styles vizzu .Styles Interfaces Axis AxisLabel AxisTitle Box Chart DataPoint Font Guides Interlacing Legend LegendMarker Logo Marker MarkerLabel OrientedLabel Padding Plot Text Ticks Tooltip Type Aliases Angle \u01ac Angle : `${number}rad` | `${number}grad` | `${number}deg` | `${number}turn` | number Angle can be set in radians, degrees, gradians and turns. Radians is the default unit. Color \u01ac Color : `#${string}` | `rgb(${number},${number},${number})` | `rgba(${number},${number},${number},${number})` The following CSS color formats are available: rgb(), rgba(), #RRGGBB, RRGGBBAA, #RGB. ColorGradient \u01ac ColorGradient : ColorStop | `${ColorStop},${ColorStop}` | `${ColorStop},${ColorStop},${ColorStop}` | `${ColorStop},${ColorStop},${ColorStop},${ColorStop}` | `${ColorStop},${ColorStop},${ColorStop},${ColorStop},${ColorStop}` | string Color gradient is specified by a comma separated list of ColorStops. This is used when a measure is on the color channel. ColorPalette \u01ac ColorPalette : Color | `${Color} ${Color}` | `${Color} ${Color} ${Color}` | `${Color} ${Color} ${Color} ${Color}` | `${Color} ${Color} ${Color} ${Color} ${Color}` | string Color palette is a list of colors separated by spaces. This is used when only dimensions are on the color channel ColorStop \u01ac ColorStop : `${Color} ${number}` Color and position pairs separated by spaces, where position is a number between 0 and 1. ColorTransform \u01ac ColorTransform : `color(${Color})` | `lightness(${number})` | `grayscale(${number})` | `opacity(${number})` | \"none\" The following CSS like filters can be used to alter the color: color: overrides the color. lightness: lightens or darkens the color; 0 means the original color, -1 means black, 1 means white. grayscale: desaturates the color. 0 means the original color, 1 means fully desaturated. none: no change. Label \u01ac Label : Padding & Font & Text Length \u01ac Length : `${number}px` | `${number}%` | `${number}em` | number Length can be set in pixels or in percentage of the element or the element's font size. Pixel is the default unit. NumberScale \u01ac NumberScale : \"SISymbol\" | \"shortScaleSymbolUS\" | \"shortScaleSymbolUK\" | `${string},${string}` | `${string},${string},${string}` | `${string},${string},${string},${string}` | `${string},${string},${string},${string},${string}` | string Number scale for human readable big number formats. There are built in formats: SI Symbols: k, M, G, ... Short scale with US abbreviations: K, M, B, T Short scale with UK abbreviations: k, m, bn, tn Can be set to custom format with a comma separated list of strings e.g: 'thousand,million,billion,trillion'","title":"vizzu.Styles"},{"location":"reference/modules/vizzu.Styles/#namespace-styles","text":"vizzu .Styles","title":"Namespace: Styles"},{"location":"reference/modules/vizzu.Styles/#interfaces","text":"Axis AxisLabel AxisTitle Box Chart DataPoint Font Guides Interlacing Legend LegendMarker Logo Marker MarkerLabel OrientedLabel Padding Plot Text Ticks Tooltip","title":"Interfaces"},{"location":"reference/modules/vizzu.Styles/#type-aliases","text":"","title":"Type Aliases"},{"location":"reference/modules/vizzu.Styles/#angle","text":"\u01ac Angle : `${number}rad` | `${number}grad` | `${number}deg` | `${number}turn` | number Angle can be set in radians, degrees, gradians and turns. Radians is the default unit.","title":"Angle"},{"location":"reference/modules/vizzu.Styles/#color","text":"\u01ac Color : `#${string}` | `rgb(${number},${number},${number})` | `rgba(${number},${number},${number},${number})` The following CSS color formats are available: rgb(), rgba(), #RRGGBB,","title":"Color"},{"location":"reference/modules/vizzu.Styles/#rrggbbaa-rgb","text":"","title":"RRGGBBAA, #RGB."},{"location":"reference/modules/vizzu.Styles/#colorgradient","text":"\u01ac ColorGradient : ColorStop | `${ColorStop},${ColorStop}` | `${ColorStop},${ColorStop},${ColorStop}` | `${ColorStop},${ColorStop},${ColorStop},${ColorStop}` | `${ColorStop},${ColorStop},${ColorStop},${ColorStop},${ColorStop}` | string Color gradient is specified by a comma separated list of ColorStops. This is used when a measure is on the color channel.","title":"ColorGradient"},{"location":"reference/modules/vizzu.Styles/#colorpalette","text":"\u01ac ColorPalette : Color | `${Color} ${Color}` | `${Color} ${Color} ${Color}` | `${Color} ${Color} ${Color} ${Color}` | `${Color} ${Color} ${Color} ${Color} ${Color}` | string Color palette is a list of colors separated by spaces. This is used when only dimensions are on the color channel","title":"ColorPalette"},{"location":"reference/modules/vizzu.Styles/#colorstop","text":"\u01ac ColorStop : `${Color} ${number}` Color and position pairs separated by spaces, where position is a number between 0 and 1.","title":"ColorStop"},{"location":"reference/modules/vizzu.Styles/#colortransform","text":"\u01ac ColorTransform : `color(${Color})` | `lightness(${number})` | `grayscale(${number})` | `opacity(${number})` | \"none\" The following CSS like filters can be used to alter the color: color: overrides the color. lightness: lightens or darkens the color; 0 means the original color, -1 means black, 1 means white. grayscale: desaturates the color. 0 means the original color, 1 means fully desaturated. none: no change.","title":"ColorTransform"},{"location":"reference/modules/vizzu.Styles/#label","text":"\u01ac Label : Padding & Font & Text","title":"Label"},{"location":"reference/modules/vizzu.Styles/#length","text":"\u01ac Length : `${number}px` | `${number}%` | `${number}em` | number Length can be set in pixels or in percentage of the element or the element's font size. Pixel is the default unit.","title":"Length"},{"location":"reference/modules/vizzu.Styles/#numberscale","text":"\u01ac NumberScale : \"SISymbol\" | \"shortScaleSymbolUS\" | \"shortScaleSymbolUK\" | `${string},${string}` | `${string},${string},${string}` | `${string},${string},${string},${string}` | `${string},${string},${string},${string},${string}` | string Number scale for human readable big number formats. There are built in formats: SI Symbols: k, M, G, ... Short scale with US abbreviations: K, M, B, T Short scale with UK abbreviations: k, m, bn, tn Can be set to custom format with a comma separated list of strings e.g: 'thousand,million,billion,trillion'","title":"NumberScale"},{"location":"reference/modules/vizzu/","text":"Vizzu / Modules / vizzu Module: vizzu Namespaces Anim Config Data Event Lib Styles Classes Vizzu Interfaces Snapshot Type Aliases Feature \u01ac Feature : \"tooltip\" | \"logging\" | \"rendering\" List of base and additional features: logging: enables logging of the library to the console (switched off by default). rendering: enables rendering of the library to the canvas (enabled by default). tooltip: tooltips on the chart appearing on markers on mouse over. Since the tooltip uses the animation interface, calling animate() while the tooltip is enabled can cause unwanted behaviour.","title":"Vizzu"},{"location":"reference/modules/vizzu/#module-vizzu","text":"","title":"Module: vizzu"},{"location":"reference/modules/vizzu/#namespaces","text":"Anim Config Data Event Lib Styles","title":"Namespaces"},{"location":"reference/modules/vizzu/#classes","text":"Vizzu","title":"Classes"},{"location":"reference/modules/vizzu/#interfaces","text":"Snapshot","title":"Interfaces"},{"location":"reference/modules/vizzu/#type-aliases","text":"","title":"Type Aliases"},{"location":"reference/modules/vizzu/#feature","text":"\u01ac Feature : \"tooltip\" | \"logging\" | \"rendering\" List of base and additional features: logging: enables logging of the library to the console (switched off by default). rendering: enables rendering of the library to the canvas (enabled by default). tooltip: tooltips on the chart appearing on markers on mouse over. Since the tooltip uses the animation interface, calling animate() while the tooltip is enabled can cause unwanted behaviour.","title":"Feature"},{"location":"showcases/","text":"Showcases","title":"Showcases"},{"location":"showcases/#showcases","text":"","title":"Showcases"},{"location":"showcases/bitcoin/","text":"Bitcoin Code Stats Explorer","title":"Bitcoin Code Stats Explorer"},{"location":"showcases/bitcoin/#bitcoin-code-stats-explorer","text":"","title":"Bitcoin Code Stats Explorer"},{"location":"showcases/chernobyl/","text":"Chernobyl","title":"Chernobyl"},{"location":"showcases/chernobyl/#chernobyl","text":"","title":"Chernobyl"},{"location":"showcases/cocoa/","text":"Cocoa farmers","title":"Cocoa farmers"},{"location":"showcases/cocoa/#cocoa-farmers","text":"","title":"Cocoa farmers"},{"location":"showcases/friends/","text":"Friends","title":"Friends"},{"location":"showcases/friends/#friends","text":"","title":"Friends"},{"location":"showcases/music/","text":"Music formats","title":"Music formats"},{"location":"showcases/music/#music-formats","text":"","title":"Music formats"},{"location":"showcases/musicformats/","text":"Music formats (Year by Year)","title":"Music formats (Year by Year)"},{"location":"showcases/musicformats/#music-formats-year-by-year","text":"","title":"Music formats (Year by Year)"},{"location":"showcases/nadal/","text":"Rafael Nadal's matches","title":"Rafael Nadal's matches"},{"location":"showcases/nadal/#rafael-nadals-matches","text":"","title":"Rafael Nadal's matches"},{"location":"showcases/sales/","text":"Sales","title":"Sales"},{"location":"showcases/sales/#sales","text":"","title":"Sales"},{"location":"showcases/titanic/","text":"Passengers of the Titanic","title":"Passengers of the Titanic"},{"location":"showcases/titanic/#passengers-of-the-titanic","text":"","title":"Passengers of the Titanic"},{"location":"tutorial/","text":"Tutorial This is the tutorial of Vizzu - a free, open-source JavaScript library for building animated charts, data stories, and interactive explorers. It is an excellent place to start using Vizzu , as it walks you through the installation and initialization of the library, introduces the logic it employs and the different settings to control how your charts look and behave. Basic logic of Vizzu The foundation of a Vizzu chart is the animation. The animation contains states describing the chart's configuration, such as the data series, coordinate system, labels, titles, etc. A static chart is the result of a single animation state. When there are more states, Vizzu automatically transitions between these. The animate method initiates the animation into a new state by describing the new chart and how Vizzu should transition to it. The return value of the animate method is a promise that will be resolved after the animation is completed. Using this logic you can create a promise chain of animation from state to state. The animate method has two parameters in total. The first parameter sets the chart, and the (optional) second determines how Vizzu should animate to that state. The first parameter has the following three properties: data : this is where you add the data that you want to put on the charts config : this is where you can add or remove series on the channels and set the general settings of the chart like the chart title, the geometry, the alignment etc. style : this is where you can set how your chart looks The parameters of multiple animate methods can be bundled together and can be passed to the animate method at once, resulting in these animations running one after the other. See Keyframe objects in Animation control & keyframes . Installation Install via npm : npm install vizzu Or use it from CDN : <html> <head> <script type=\"module\"> import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js'; </script> </head> </html> Usage Initialization Data Axes, title, tooltip Geometry Channels & legend Group/stack Sorting Align & range Changing dimensions Orientation, split & polar Filtering & adding new records Without coordinates & noop channel Color palette & fonts Chart layout Animation options Animation control & keyframes Events Shorthands & Store Chart presets Style","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This is the tutorial of Vizzu - a free, open-source JavaScript library for building animated charts, data stories, and interactive explorers. It is an excellent place to start using Vizzu , as it walks you through the installation and initialization of the library, introduces the logic it employs and the different settings to control how your charts look and behave.","title":"Tutorial"},{"location":"tutorial/#basic-logic-of-vizzu","text":"The foundation of a Vizzu chart is the animation. The animation contains states describing the chart's configuration, such as the data series, coordinate system, labels, titles, etc. A static chart is the result of a single animation state. When there are more states, Vizzu automatically transitions between these. The animate method initiates the animation into a new state by describing the new chart and how Vizzu should transition to it. The return value of the animate method is a promise that will be resolved after the animation is completed. Using this logic you can create a promise chain of animation from state to state. The animate method has two parameters in total. The first parameter sets the chart, and the (optional) second determines how Vizzu should animate to that state. The first parameter has the following three properties: data : this is where you add the data that you want to put on the charts config : this is where you can add or remove series on the channels and set the general settings of the chart like the chart title, the geometry, the alignment etc. style : this is where you can set how your chart looks The parameters of multiple animate methods can be bundled together and can be passed to the animate method at once, resulting in these animations running one after the other. See Keyframe objects in Animation control & keyframes .","title":"Basic logic of Vizzu"},{"location":"tutorial/#installation","text":"Install via npm : npm install vizzu Or use it from CDN : <html> <head> <script type=\"module\"> import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js'; </script> </head> </html>","title":"Installation"},{"location":"tutorial/#usage","text":"Initialization Data Axes, title, tooltip Geometry Channels & legend Group/stack Sorting Align & range Changing dimensions Orientation, split & polar Filtering & adding new records Without coordinates & noop channel Color palette & fonts Chart layout Animation options Animation control & keyframes Events Shorthands & Store Chart presets Style","title":"Usage"},{"location":"tutorial/align_range/","text":"Align & range Vizzu offers different options to align your chart elements and to set the range of values shown on the axes. Alignment can be used to create charts like a stream chart where the elements are vertically centered. A good example for using range is when you fix the y-axis so that it would not adapt to the data being shown. Centered alignment. The effect of this parameter depends on the orientation of the chart. For example, on a column chart, elements will be vertically centered, whereas on a bar chart, horizontally. Info In the first example, the y-axis labels are hidden because they don't properly represent the values shown on the column chart anymore, as the chart elements float off the x-axis. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) Change align and configures the y axis labels to disappear during the animation. chart.animate({ config: { align: 'center', channels: { y: { labels: false } } } }) Stretched alignment. This way the elements will proportionally fill the entire plot area, effectively showing proportions in stacked charts. This is why the scale will also switch from values to percentages when used. chart.animate({ config: { align: 'stretch' } }) Getting back to the default alignment. chart.animate({ config: { align: 'none', channels: { y: { labels: true } } } }) You can set the range of an axis by setting the minimum and maximum values of it. Both parameters are optional so that you can set only one of those, and you either set specific values or a relative value by adding the % sign. In this example, we set the range of the y-axis in a way that the max value is 150% of the biggest element\u2019s value. chart.animate({ config: { channels: { y: { range: { max: '150%' } } } } }) You can also set the range for an axis with a dimension on it. You can even use this feature to filter certain elements, just like in the following example. chart.animate({ config: { channels: { x: { range: { min: -2, max: 3 } } } } }) Ranges have certain defaults depending on the chart's configuration, based on common data viz guidelines because we wanted to make it easy for you to create sleek charts. For example, in the cartesian coordinate system, the range will be automatically set to the max:110% for an axis with a measure on it. Polar coordinates work differently, as you can see for yourself in the Orientation, split & polar chapter. Whenever you want to set your ranges back to the default value, just set them to 'auto' . chart.animate({ config: { channels: { x: { range: { min: 'auto', max: 'auto' } }, y: { range: { max: 'auto' } } } } })","title":"Align & range"},{"location":"tutorial/align_range/#align-range","text":"Vizzu offers different options to align your chart elements and to set the range of values shown on the axes. Alignment can be used to create charts like a stream chart where the elements are vertically centered. A good example for using range is when you fix the y-axis so that it would not adapt to the data being shown. Centered alignment. The effect of this parameter depends on the orientation of the chart. For example, on a column chart, elements will be vertically centered, whereas on a bar chart, horizontally. Info In the first example, the y-axis labels are hidden because they don't properly represent the values shown on the column chart anymore, as the chart elements float off the x-axis. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) Change align and configures the y axis labels to disappear during the animation. chart.animate({ config: { align: 'center', channels: { y: { labels: false } } } }) Stretched alignment. This way the elements will proportionally fill the entire plot area, effectively showing proportions in stacked charts. This is why the scale will also switch from values to percentages when used. chart.animate({ config: { align: 'stretch' } }) Getting back to the default alignment. chart.animate({ config: { align: 'none', channels: { y: { labels: true } } } }) You can set the range of an axis by setting the minimum and maximum values of it. Both parameters are optional so that you can set only one of those, and you either set specific values or a relative value by adding the % sign. In this example, we set the range of the y-axis in a way that the max value is 150% of the biggest element\u2019s value. chart.animate({ config: { channels: { y: { range: { max: '150%' } } } } }) You can also set the range for an axis with a dimension on it. You can even use this feature to filter certain elements, just like in the following example. chart.animate({ config: { channels: { x: { range: { min: -2, max: 3 } } } } }) Ranges have certain defaults depending on the chart's configuration, based on common data viz guidelines because we wanted to make it easy for you to create sleek charts. For example, in the cartesian coordinate system, the range will be automatically set to the max:110% for an axis with a measure on it. Polar coordinates work differently, as you can see for yourself in the Orientation, split & polar chapter. Whenever you want to set your ranges back to the default value, just set them to 'auto' . chart.animate({ config: { channels: { x: { range: { min: 'auto', max: 'auto' } }, y: { range: { max: 'auto' } } } } })","title":"Align &amp; range"},{"location":"tutorial/animation_control_keyframes/","text":"Animation control & keyframes Using the result object provided by the chart's animate method you can play, pause, stop, seek or reverse the animations. In this step, we seek forward to 50% of progress after the animation starts. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { channels: { x: { attach: ['Kinds'] }, y: { detach: ['Kinds'] } }, } }).activated.then(control => control.seek('50%')); You can also control the initial position and play state of the animation through the animation options argument of the animate method. chart.animate({ config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } }, } }, { playState: 'paused', position: 0.5 }).activated.then(control => control.play()); You may want to control multiple animations as a single one. For example you might want to go back to the original state if any of the animations get canceled, or want to seamlessly seek through all of them. You can do this by boundling them together and passing them to a single animate call. To do this, you need to create a Keyframe object from the arguments of every single animate call and then puting them into an array of keyframes. chart.animate([{ target: { config: { channels: { x: { attach: ['Kinds'] }, y: { detach: ['Kinds'] } }, } }, options: { duration: 0.5 } }, { target: { config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } } } }, options: { duration: 1 } }]); The initial state of the animation can be set, too, by using the second argument of the animate method.","title":"Animation control & keyframes"},{"location":"tutorial/animation_control_keyframes/#animation-control-keyframes","text":"Using the result object provided by the chart's animate method you can play, pause, stop, seek or reverse the animations. In this step, we seek forward to 50% of progress after the animation starts. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { channels: { x: { attach: ['Kinds'] }, y: { detach: ['Kinds'] } }, } }).activated.then(control => control.seek('50%')); You can also control the initial position and play state of the animation through the animation options argument of the animate method. chart.animate({ config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } }, } }, { playState: 'paused', position: 0.5 }).activated.then(control => control.play()); You may want to control multiple animations as a single one. For example you might want to go back to the original state if any of the animations get canceled, or want to seamlessly seek through all of them. You can do this by boundling them together and passing them to a single animate call. To do this, you need to create a Keyframe object from the arguments of every single animate call and then puting them into an array of keyframes. chart.animate([{ target: { config: { channels: { x: { attach: ['Kinds'] }, y: { detach: ['Kinds'] } }, } }, options: { duration: 0.5 } }, { target: { config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } } } }, options: { duration: 1 } }]); The initial state of the animation can be set, too, by using the second argument of the animate method.","title":"Animation control &amp; keyframes"},{"location":"tutorial/animation_options/","text":"Animation options In Vizzu you can set the timing and duration of the animation. You can do this either for the whole animation, or for animation groups such as the elements moving along the x-axis or the y-axis, appearing or disappearing or when the coordinate system is changed. Let\u2019s see first a simple example when a stacked column chart is grouped using the default animation options. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { channels: { y: { detach: ['Kinds'] }, x: { attach: ['Kinds'] } } } }) We stack the columns, still with the default options. chart.animate({ config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } } } }) Now we change the animation settings for the elements moving along the y-axis and also the change in styles, more specifically when the labels on the markers move from the center of the chart elements to the top of them. chart.animate({ config: { channels: { y: { detach: ['Kinds'] }, x: { attach: ['Kinds'] } } } }, { y: { duration: 2, delay: 2 }, style: { duration: 2, delay: 4 } }) This is an example of changing the settings for the whole animation at once. chart.animate({ config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } } } }, { duration: 1, easing: 'linear' }) When the two settings are combined, Vizzu will use the general animation options and spread the unique settings for specific groups proportionally. This is why you can see the same animation as two steps before but happening much quicker since the duration of the whole animation is set to 1 second. chart.animate({ config: { channels: { x: { attach: ['Kinds'] }, y: { detach: ['Kinds'] } } } }, { duration: 1, easing: 'linear', y: { duration: 2, delay: 2 }, style: { duration: 2, delay: 4 } }) The default unit for animation is seconds, but you can set other units. Besides if you only want to change the duration of the animation, you can use the following, simplified format to do that. chart.animate({ config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } } } }, '500ms')","title":"Animation options"},{"location":"tutorial/animation_options/#animation-options","text":"In Vizzu you can set the timing and duration of the animation. You can do this either for the whole animation, or for animation groups such as the elements moving along the x-axis or the y-axis, appearing or disappearing or when the coordinate system is changed. Let\u2019s see first a simple example when a stacked column chart is grouped using the default animation options. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { channels: { y: { detach: ['Kinds'] }, x: { attach: ['Kinds'] } } } }) We stack the columns, still with the default options. chart.animate({ config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } } } }) Now we change the animation settings for the elements moving along the y-axis and also the change in styles, more specifically when the labels on the markers move from the center of the chart elements to the top of them. chart.animate({ config: { channels: { y: { detach: ['Kinds'] }, x: { attach: ['Kinds'] } } } }, { y: { duration: 2, delay: 2 }, style: { duration: 2, delay: 4 } }) This is an example of changing the settings for the whole animation at once. chart.animate({ config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } } } }, { duration: 1, easing: 'linear' }) When the two settings are combined, Vizzu will use the general animation options and spread the unique settings for specific groups proportionally. This is why you can see the same animation as two steps before but happening much quicker since the duration of the whole animation is set to 1 second. chart.animate({ config: { channels: { x: { attach: ['Kinds'] }, y: { detach: ['Kinds'] } } } }, { duration: 1, easing: 'linear', y: { duration: 2, delay: 2 }, style: { duration: 2, delay: 4 } }) The default unit for animation is seconds, but you can set other units. Besides if you only want to change the duration of the animation, you can use the following, simplified format to do that. chart.animate({ config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } } } }, '500ms')","title":"Animation options"},{"location":"tutorial/axes_title_tooltip/","text":"Axes, title, tooltip To build a chart with Vizzu , you have to add data series to the channels. Channels will be explained more in-depth later, but for now, think of channels as different elements of the chart we can bind data to. The simplest and most often used channels are the x and y-axes. The first step is to create a simple column chart, adding one of the dimensions from the data set we added in the previous chapter ( Genres ) to the x-axis and the measure ( Popularity ) to the y-axis using the set property. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { channels: { y: { set: ['Popularity'] }, x: { set: ['Genres'] } } } }) In the next step, the chart is rearranged by putting both series on the y-axis using once again the set property, resulting in a single column chart. Vizzu automatically animates between the initial state and this one. chart.animate({ config: { channels: { x: { set: null }, y: { set: ['Genres', 'Popularity'] } } } }) Instead of set, you can use attach and detach to add or remove series to/from the channels. chart.animate({ config: { channels: { y: { detach: ['Popularity'] }, x: { attach: ['Popularity'] } } } }) Using attach & detach makes it easier to build your animated charts step-by-step, however you either have to keep in mind what you had on which channel in the previous step or add the following code to access the actual configuration of the chart. console.log(chart.config); Setting the chart title with the title command. chart.animate({ title: 'My first chart' }) Switching on the tooltips that appear on the chart elements when the user hovers over them with their mouse by adding the ( 'tooltip' , true ) parameters to the chart.feature method. chart.feature('tooltip', true) Note Calls to this method before the library initialization completed will fail.","title":"Axes, title, tooltip"},{"location":"tutorial/axes_title_tooltip/#axes-title-tooltip","text":"To build a chart with Vizzu , you have to add data series to the channels. Channels will be explained more in-depth later, but for now, think of channels as different elements of the chart we can bind data to. The simplest and most often used channels are the x and y-axes. The first step is to create a simple column chart, adding one of the dimensions from the data set we added in the previous chapter ( Genres ) to the x-axis and the measure ( Popularity ) to the y-axis using the set property. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate({ config: { channels: { y: { set: ['Popularity'] }, x: { set: ['Genres'] } } } }) In the next step, the chart is rearranged by putting both series on the y-axis using once again the set property, resulting in a single column chart. Vizzu automatically animates between the initial state and this one. chart.animate({ config: { channels: { x: { set: null }, y: { set: ['Genres', 'Popularity'] } } } }) Instead of set, you can use attach and detach to add or remove series to/from the channels. chart.animate({ config: { channels: { y: { detach: ['Popularity'] }, x: { attach: ['Popularity'] } } } }) Using attach & detach makes it easier to build your animated charts step-by-step, however you either have to keep in mind what you had on which channel in the previous step or add the following code to access the actual configuration of the chart. console.log(chart.config); Setting the chart title with the title command. chart.animate({ title: 'My first chart' }) Switching on the tooltips that appear on the chart elements when the user hovers over them with their mouse by adding the ( 'tooltip' , true ) parameters to the chart.feature method. chart.feature('tooltip', true) Note Calls to this method before the library initialization completed will fail.","title":"Axes, title, tooltip"},{"location":"tutorial/changing_dimensions/","text":"Changing dimensions The simplest of dimension-changing operations are aggregate and drill-down. These features basically mean that you either add or remove an additional dimension to/from an axis or another channel. Let\u2019s aggregate together the elements by getting the Genres dimension off the x-axis. By taking it off the chart, only one chart element remains for every color, and Vizzu automatically calculates and shows the aggregate value of the elements. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { channels: { x: { set: null } } } }) When you simultaneously add and remove dimensions, the partitioning of the underlying data to markers on the chart changes. There are multiple ways to transition through these kinds of operations using. By default, the markers are aggregated to the common base of the two states, then drilled down to the target state, as shown below. chart.animate({ config: { channels: { y: { detach: ['Kinds'] }, x: { set: ['Genres'] }, color: { set: null }, } } }) You can change this setting and drill down to the union of the two states instead, and then aggregate to the target state: chart.animate({ config: { channels: { x: { detach: ['Genres'], attach: ['Kinds'] } } } }, { regroupStrategy: 'drilldown' }) There is also the option to fade the chart between the states: chart.animate({ config: { channels: { x: { detach: ['Kinds'], attach: ['Genres'] } } } }, { regroupStrategy: 'fade' }) To simply drill down, the same dimension is put back on the y-axis. chart.animate({ config: { channels: { y: { attach: ['Kinds'] }, color: { set: ['Kinds'] } } } })","title":"Changing dimensions"},{"location":"tutorial/changing_dimensions/#changing-dimensions","text":"The simplest of dimension-changing operations are aggregate and drill-down. These features basically mean that you either add or remove an additional dimension to/from an axis or another channel. Let\u2019s aggregate together the elements by getting the Genres dimension off the x-axis. By taking it off the chart, only one chart element remains for every color, and Vizzu automatically calculates and shows the aggregate value of the elements. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { channels: { x: { set: null } } } }) When you simultaneously add and remove dimensions, the partitioning of the underlying data to markers on the chart changes. There are multiple ways to transition through these kinds of operations using. By default, the markers are aggregated to the common base of the two states, then drilled down to the target state, as shown below. chart.animate({ config: { channels: { y: { detach: ['Kinds'] }, x: { set: ['Genres'] }, color: { set: null }, } } }) You can change this setting and drill down to the union of the two states instead, and then aggregate to the target state: chart.animate({ config: { channels: { x: { detach: ['Genres'], attach: ['Kinds'] } } } }, { regroupStrategy: 'drilldown' }) There is also the option to fade the chart between the states: chart.animate({ config: { channels: { x: { detach: ['Kinds'], attach: ['Genres'] } } } }, { regroupStrategy: 'fade' }) To simply drill down, the same dimension is put back on the y-axis. chart.animate({ config: { channels: { y: { attach: ['Kinds'] }, color: { set: ['Kinds'] } } } })","title":"Changing dimensions"},{"location":"tutorial/channels_legend/","text":"Channels & legend Besides the x-axis and the y-axis, there are five more channels in Vizzu you can use to visualize your data. Similarly to the axes you can put any number of dimensions and/or one measure to a channel. In the following example the four most commonly used channels are shown. The fifth, noop channel is introduced later in the Without coordinates & noop channel chapter. Data on the label channel will be written on the markers on the chart. Vizzu automatically determines the best way to position these labels, but you can set them differently with the style object introduced in the Color palette & fonts chapter. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity'] }, x: { set: ['Genres'] }, }, } }) chart.animate({ config: { channels: { label: { attach: ['Popularity'] } } } }) The lightness channel sets the lightness of the markers. In this case the same measure ( Popularity ) is added to it that is on the y-axis, meaning that columns\u2019 height and lightness represent the same values. The legend for the lightness channel is turned on using the legend property. Info This is an example when we explicitly instruct Vizzu to show the legend. By default Vizzu automatically shows/hides the legend when it's necessary. You can also turn it off with the legend : null command or set back to automatic mode with legend : 'auto' . chart.animate({ config: { channels: { lightness: { attach: ['Popularity'] } }, legend: 'lightness' } }) The color channel sets the color of the markers. The same dimension ( Genres ) is put on it that is on the x-axis resulting in each bar having a different color. If a measure is put on the color channel, a color range will be used. Info The value on the lightness channel is removed in this step as it doesn\u2019t make sense to use it together with the color channel in this case. chart.animate({ config: { channels: { lightness: { set: null }, color: { attach: ['Genres'] } }, legend: 'color', } }) The size channel sets the size of the markers if the geometry is circle - where size sets the radius of the circles - or line - where size determines line width. It is ignored when using rectangle or area geometry. This is why we change the geometry to circle in the example. chart.animate({ config: { channels: { size: { set: ['Popularity'] } }, geometry: 'circle' } })","title":"Channels & legend"},{"location":"tutorial/channels_legend/#channels-legend","text":"Besides the x-axis and the y-axis, there are five more channels in Vizzu you can use to visualize your data. Similarly to the axes you can put any number of dimensions and/or one measure to a channel. In the following example the four most commonly used channels are shown. The fifth, noop channel is introduced later in the Without coordinates & noop channel chapter. Data on the label channel will be written on the markers on the chart. Vizzu automatically determines the best way to position these labels, but you can set them differently with the style object introduced in the Color palette & fonts chapter. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity'] }, x: { set: ['Genres'] }, }, } }) chart.animate({ config: { channels: { label: { attach: ['Popularity'] } } } }) The lightness channel sets the lightness of the markers. In this case the same measure ( Popularity ) is added to it that is on the y-axis, meaning that columns\u2019 height and lightness represent the same values. The legend for the lightness channel is turned on using the legend property. Info This is an example when we explicitly instruct Vizzu to show the legend. By default Vizzu automatically shows/hides the legend when it's necessary. You can also turn it off with the legend : null command or set back to automatic mode with legend : 'auto' . chart.animate({ config: { channels: { lightness: { attach: ['Popularity'] } }, legend: 'lightness' } }) The color channel sets the color of the markers. The same dimension ( Genres ) is put on it that is on the x-axis resulting in each bar having a different color. If a measure is put on the color channel, a color range will be used. Info The value on the lightness channel is removed in this step as it doesn\u2019t make sense to use it together with the color channel in this case. chart.animate({ config: { channels: { lightness: { set: null }, color: { attach: ['Genres'] } }, legend: 'color', } }) The size channel sets the size of the markers if the geometry is circle - where size sets the radius of the circles - or line - where size determines line width. It is ignored when using rectangle or area geometry. This is why we change the geometry to circle in the example. chart.animate({ config: { channels: { size: { set: ['Popularity'] } }, geometry: 'circle' } })","title":"Channels &amp; legend"},{"location":"tutorial/chart_layout/","text":"Chart layout Vizzu has three separate parts of the chart layout: the plot area that contains the chart, the title containing the chart title on the top, and the legend on the left. Vizzu automatically hides the legend when it\u2019s unnecessary to show it. When the title is not in use, Vizzu hides that part automatically as well. Each of these parts have their own paddings on all four sides that adjust to the chart size by default, but can also be set with the appropriate settings in the style object. All size parameters can be set in pixel, percentage and em. We add different background colors to the parts of the layout to show how they are aligned. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ style: { title: { backgroundColor: '#A0A0A0' }, plot: { backgroundColor: '#D2D2D2' }, legend: { backgroundColor: '#808080' }, } }) Setting the width of the legend. chart.animate({ style: { legend: { width: 50 } } }) Setting the legend width back to its default value. chart.animate({ style: { legend: { width: null } } }) Changing the title paddings. By default, the title is horizontally centered above the chart. In this example, we set the title\u2019s left padding, resulting in the text moving to the right. chart.animate({ style: { title: { paddingTop: 20, paddingBottom: 20, paddingLeft: 200 } } }) Setting the title paddings back to their default values. chart.animate({ style: { title: { paddingTop: null, paddingBottom: null, paddingLeft: null } } }) Changing the paddings of the plot area to position the plot. The texts on the axes are drawn on the padding of the plot and not the plot itself. chart.animate({ style: { plot: { paddingLeft: 100, paddingRight: 100 } } }) Setting the plot paddings back to their default values. chart.animate({ style: { plot: { paddingLeft: null, paddingRight: null } } })","title":"Chart layout"},{"location":"tutorial/chart_layout/#chart-layout","text":"Vizzu has three separate parts of the chart layout: the plot area that contains the chart, the title containing the chart title on the top, and the legend on the left. Vizzu automatically hides the legend when it\u2019s unnecessary to show it. When the title is not in use, Vizzu hides that part automatically as well. Each of these parts have their own paddings on all four sides that adjust to the chart size by default, but can also be set with the appropriate settings in the style object. All size parameters can be set in pixel, percentage and em. We add different background colors to the parts of the layout to show how they are aligned. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ style: { title: { backgroundColor: '#A0A0A0' }, plot: { backgroundColor: '#D2D2D2' }, legend: { backgroundColor: '#808080' }, } }) Setting the width of the legend. chart.animate({ style: { legend: { width: 50 } } }) Setting the legend width back to its default value. chart.animate({ style: { legend: { width: null } } }) Changing the title paddings. By default, the title is horizontally centered above the chart. In this example, we set the title\u2019s left padding, resulting in the text moving to the right. chart.animate({ style: { title: { paddingTop: 20, paddingBottom: 20, paddingLeft: 200 } } }) Setting the title paddings back to their default values. chart.animate({ style: { title: { paddingTop: null, paddingBottom: null, paddingLeft: null } } }) Changing the paddings of the plot area to position the plot. The texts on the axes are drawn on the padding of the plot and not the plot itself. chart.animate({ style: { plot: { paddingLeft: 100, paddingRight: 100 } } }) Setting the plot paddings back to their default values. chart.animate({ style: { plot: { paddingLeft: null, paddingRight: null } } })","title":"Chart layout"},{"location":"tutorial/chart_presets/","text":"Chart presets Throughout this tutorial, we have shown you how to create charts with Vizzu using a chart type-agnostic, uniform way without being limited to a predefined set of available charts. But sometimes, when you know the chart type you want to use, it is easier to start with that and skip configuring it from scratch. For this reason, Vizzu provides preset chart configurations for many known chart types. See the preset gallery for all available presets. Use the methods of the presets static property of the Vizzu class to build a chart based on a preset. These methods return chart configuration objects that can be passed to the animate method. For example, this is how to create a stacked bubble chart using its preset. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate(Vizzu.presets.stackedBubble({ size: 'Popularity', color: 'Kinds', stackedBy: 'Genres', title: 'Using a preset', })) Presets will override all channels, removing all previously set series from the chart. Using a preset will also explicitly set most chart configuration parameters. Exceptions to this are the legend , title , reverse , and sort properties that can be set while using a preset. Here's an example of a preset where chart elements are sorted by value. chart.animate(Vizzu.presets.radialStackedBar({ angle: 'Popularity', radius: 'Genres', stackedBy: 'Kinds', sort: 'byValue', title: 'Set sorting for a chart preset' })) As you will see, the preset doesn't override the previously configured sorting and wouldn't affect the rest of the chart config parameters mentioned above either. Presets will affect chart configuration, but you might also want to set the style or the underlying data. In this case, you can use the more verbose syntax below, explicitly passing the preset to the 'config' property of the animate method's parameter. chart.animate({ config: Vizzu.presets.radialBar({ angle: 'Popularity', radius: 'Genres', title: 'Setting style for a preset' }), style: { 'plot.xAxis.interlacing.color': '#ffffff00' } }) Info You can also access presets via a chart promise, for example Vizzu.presets.radialBar is equivalent to chart.constructor.presets.radialBar .","title":"Chart presets"},{"location":"tutorial/chart_presets/#chart-presets","text":"Throughout this tutorial, we have shown you how to create charts with Vizzu using a chart type-agnostic, uniform way without being limited to a predefined set of available charts. But sometimes, when you know the chart type you want to use, it is easier to start with that and skip configuring it from scratch. For this reason, Vizzu provides preset chart configurations for many known chart types. See the preset gallery for all available presets. Use the methods of the presets static property of the Vizzu class to build a chart based on a preset. These methods return chart configuration objects that can be passed to the animate method. For example, this is how to create a stacked bubble chart using its preset. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data }) chart.animate(Vizzu.presets.stackedBubble({ size: 'Popularity', color: 'Kinds', stackedBy: 'Genres', title: 'Using a preset', })) Presets will override all channels, removing all previously set series from the chart. Using a preset will also explicitly set most chart configuration parameters. Exceptions to this are the legend , title , reverse , and sort properties that can be set while using a preset. Here's an example of a preset where chart elements are sorted by value. chart.animate(Vizzu.presets.radialStackedBar({ angle: 'Popularity', radius: 'Genres', stackedBy: 'Kinds', sort: 'byValue', title: 'Set sorting for a chart preset' })) As you will see, the preset doesn't override the previously configured sorting and wouldn't affect the rest of the chart config parameters mentioned above either. Presets will affect chart configuration, but you might also want to set the style or the underlying data. In this case, you can use the more verbose syntax below, explicitly passing the preset to the 'config' property of the animate method's parameter. chart.animate({ config: Vizzu.presets.radialBar({ angle: 'Popularity', radius: 'Genres', title: 'Setting style for a preset' }), style: { 'plot.xAxis.interlacing.color': '#ffffff00' } }) Info You can also access presets via a chart promise, for example Vizzu.presets.radialBar is equivalent to chart.constructor.presets.radialBar .","title":"Chart presets"},{"location":"tutorial/color_palette_fonts/","text":"Color palette & fonts This and the next chapter provide a quick intro to the styling of the charts. You can either use the style property like in the following examples or use CSS . By using CSS , it's easier to set the same style for multiple charts on one page or re-use style settings. If you use CSS , don't change the set parameters later on via the style property. The font sizes automatically adjust to the chart size to help readability, and can also be set separately or for specific groups. The color palette is changed to the colors we add here. The order of the dimension\u2019s items in the data set determine which color belongs to which item as the colors are added one-by-one. If you want to use the same setting via CSS , you should add --vizzu-plot-marker-colorPalette: #9355e8FF #123456FF #BDAF10FF; . Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ style: { plot: { marker: { colorPalette: '#9355e8FF #123456FF #BDAF10FF' } } } }) The actual style settings of the chart can be accessed via the style property. console.log(chart.style); Changing the title font size will only affect the title; all other font sizes remain the same. CSS version: --vizzu-title-fontSize: 50; . chart.animate({ style: { title: { fontSize: 50 } } }) This is how to set the font size back to its default value. chart.animate({ style: { title: { fontSize: null } } }) In case you change the font size of the whole chart with the top-level fontSize parameter then every font on the chart will grow/shrink proportionally. The size refers to the font size of the axis labels by default. chart.animate({ style: { fontSize: 20 } }) You can reset styles to default on any levels by setting them to null . chart.animate({ style: null }) For information on all available style parameters see the Style chapter or the Code reference .","title":"Color palette & fonts"},{"location":"tutorial/color_palette_fonts/#color-palette-fonts","text":"This and the next chapter provide a quick intro to the styling of the charts. You can either use the style property like in the following examples or use CSS . By using CSS , it's easier to set the same style for multiple charts on one page or re-use style settings. If you use CSS , don't change the set parameters later on via the style property. The font sizes automatically adjust to the chart size to help readability, and can also be set separately or for specific groups. The color palette is changed to the colors we add here. The order of the dimension\u2019s items in the data set determine which color belongs to which item as the colors are added one-by-one. If you want to use the same setting via CSS , you should add --vizzu-plot-marker-colorPalette: #9355e8FF #123456FF #BDAF10FF; . Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ style: { plot: { marker: { colorPalette: '#9355e8FF #123456FF #BDAF10FF' } } } }) The actual style settings of the chart can be accessed via the style property. console.log(chart.style); Changing the title font size will only affect the title; all other font sizes remain the same. CSS version: --vizzu-title-fontSize: 50; . chart.animate({ style: { title: { fontSize: 50 } } }) This is how to set the font size back to its default value. chart.animate({ style: { title: { fontSize: null } } }) In case you change the font size of the whole chart with the top-level fontSize parameter then every font on the chart will grow/shrink proportionally. The size refers to the font size of the axis labels by default. chart.animate({ style: { fontSize: 20 } }) You can reset styles to default on any levels by setting them to null . chart.animate({ style: null }) For information on all available style parameters see the Style chapter or the Code reference .","title":"Color palette &amp; fonts"},{"location":"tutorial/data/","text":"Data Data types Vizzu currently supports two types of data series: dimensions and measures. Dimensions slice the data cube Vizzu uses, whereas measures are values within the cube. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. Temporal data such as dates or timestamps should also be added as dimensions. By default, Vizzu will draw the elements on the chart in the order they are provided in the data set. Thus we suggest adding temporal data in a sorted format from oldest to newest. Measures at the moment can only be numerical. Adding data There are multiple ways you can add data to Vizzu : Specify data by series - column after column if you think of a spreadsheet Specify data by records - row after row Using data cube form Elements with a missing value should contain the number zero. null , undefined and empty cells will result in an error. In case of dimensions, add '' as a value to have a category without a name. In the first two cases, data has to be in first normal form. Here is an example of that: Genres Kinds Popularity Pop Hard 114 Rock Hard 96 Jazz Hard 78 Metal Hard 52 Pop Smooth 56 Rock Smooth 36 Jazz Smooth 174 Metal Smooth 121 Pop Experimental 127 Rock Experimental 83 Jazz Experimental 94 Metal Experimental 58 In the type parameter, you can set if a series is a dimension or a measure. Adding the type parameter is optional. If omitted, Vizzu will automatically select the type depending on the first element of the values array using the typeof operator. If the value is a number, it will be declared as a measure, in any other case, a dimension. Specify data by series: let data = { series: [{ name: 'Genres', type: 'dimension', values: [ 'Pop', 'Rock', 'Jazz', 'Metal', 'Pop', 'Rock', 'Jazz', 'Metal', 'Pop', 'Rock', 'Jazz', 'Metal' ] }, { name: 'Kinds', type: 'dimension', values: [ 'Hard', 'Hard', 'Hard', 'Hard', 'Smooth', 'Smooth', 'Smooth', 'Smooth', 'Experimental', 'Experimental', 'Experimental', 'Experimental' ] }, { name: 'Popularity', type: 'measure', values: [114, 96, 78, 52, 56, 36, 174, 121, 127, 83, 94, 58] }] }; Specify data by records: let data = { series: [{ name: 'Genres', type: 'dimension' }, { name: 'Kinds', type: 'dimension' }, { name: 'Popularity', type: 'measure' }], records: [ ['Pop', 'Hard', 114], ['Rock', 'Hard', 96], ['Jazz', 'Hard', 78], ['Metal', 'Hard', 52], ['Pop', 'Smooth', 56], ['Rock', 'Smooth', 36], ['Jazz', 'Smooth', 174], ['Metal', 'Smooth', 121], ['Pop', 'Experimental', 127], ['Rock', 'Experimental', 83], ['Jazz', 'Experimental', 94], ['Metal', 'Experimental', 58], ] }; Using data cube form: Genres Pop Rock Jazz Metal Kinds Hard 114 96 78 52 Smooth 56 36 74 121 Experimental 127 83 94 58 Popularity let data = { dimensions: [{ name: 'Genres', values: ['Pop', 'Rock', 'Jazz', 'Metal'] }, { name: 'Kinds', values: ['Hard', 'Smooth', 'Experimental'] }], measures: [{ name: 'Popularity', values: [ [114, 96, 78, 52], [56, 36, 174, 121], [127, 83, 94, 58] ] }] }; You should set the data in the first animate call: chart.animate({ data });","title":"Data"},{"location":"tutorial/data/#data","text":"","title":"Data"},{"location":"tutorial/data/#data-types","text":"Vizzu currently supports two types of data series: dimensions and measures. Dimensions slice the data cube Vizzu uses, whereas measures are values within the cube. Dimensions are categorical series that can contain strings and numbers, but both will be treated as strings. Temporal data such as dates or timestamps should also be added as dimensions. By default, Vizzu will draw the elements on the chart in the order they are provided in the data set. Thus we suggest adding temporal data in a sorted format from oldest to newest. Measures at the moment can only be numerical.","title":"Data types"},{"location":"tutorial/data/#adding-data","text":"There are multiple ways you can add data to Vizzu : Specify data by series - column after column if you think of a spreadsheet Specify data by records - row after row Using data cube form Elements with a missing value should contain the number zero. null , undefined and empty cells will result in an error. In case of dimensions, add '' as a value to have a category without a name. In the first two cases, data has to be in first normal form. Here is an example of that: Genres Kinds Popularity Pop Hard 114 Rock Hard 96 Jazz Hard 78 Metal Hard 52 Pop Smooth 56 Rock Smooth 36 Jazz Smooth 174 Metal Smooth 121 Pop Experimental 127 Rock Experimental 83 Jazz Experimental 94 Metal Experimental 58 In the type parameter, you can set if a series is a dimension or a measure. Adding the type parameter is optional. If omitted, Vizzu will automatically select the type depending on the first element of the values array using the typeof operator. If the value is a number, it will be declared as a measure, in any other case, a dimension. Specify data by series: let data = { series: [{ name: 'Genres', type: 'dimension', values: [ 'Pop', 'Rock', 'Jazz', 'Metal', 'Pop', 'Rock', 'Jazz', 'Metal', 'Pop', 'Rock', 'Jazz', 'Metal' ] }, { name: 'Kinds', type: 'dimension', values: [ 'Hard', 'Hard', 'Hard', 'Hard', 'Smooth', 'Smooth', 'Smooth', 'Smooth', 'Experimental', 'Experimental', 'Experimental', 'Experimental' ] }, { name: 'Popularity', type: 'measure', values: [114, 96, 78, 52, 56, 36, 174, 121, 127, 83, 94, 58] }] }; Specify data by records: let data = { series: [{ name: 'Genres', type: 'dimension' }, { name: 'Kinds', type: 'dimension' }, { name: 'Popularity', type: 'measure' }], records: [ ['Pop', 'Hard', 114], ['Rock', 'Hard', 96], ['Jazz', 'Hard', 78], ['Metal', 'Hard', 52], ['Pop', 'Smooth', 56], ['Rock', 'Smooth', 36], ['Jazz', 'Smooth', 174], ['Metal', 'Smooth', 121], ['Pop', 'Experimental', 127], ['Rock', 'Experimental', 83], ['Jazz', 'Experimental', 94], ['Metal', 'Experimental', 58], ] }; Using data cube form: Genres Pop Rock Jazz Metal Kinds Hard 114 96 78 52 Smooth 56 36 74 121 Experimental 127 83 94 58 Popularity let data = { dimensions: [{ name: 'Genres', values: ['Pop', 'Rock', 'Jazz', 'Metal'] }, { name: 'Kinds', values: ['Hard', 'Smooth', 'Experimental'] }], measures: [{ name: 'Popularity', values: [ [114, 96, 78, 52], [56, 36, 174, 121], [127, 83, 94, 58] ] }] }; You should set the data in the first animate call: chart.animate({ data });","title":"Adding data"},{"location":"tutorial/events/","text":"Events You can register handlers for various events. There are mouse events ( click , mouseon ), animation events ( begin , update , complete ), and rendering events that are called before rendering the chart elements. Handlers can be registered/unregistered with the on , off method pair. We are registering a handler for the click event which will show an alert block with information about the clicked marker. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) function clickHandler(event) { alert(JSON.stringify(event.data)); } chart.on('click', clickHandler); Unregistering the previously registered handler. chart.off('click', clickHandler); Here we override the axis label color for Jazz to red and all others to gray. function labelDrawHandler(event) { event.renderingContext.fillStyle = (event.data.text === 'Jazz') ? 'red' : 'gray'; } chart.on('plot-axis-label-draw', labelDrawHandler); Unregistering the previously registered handler. chart.off('plot-axis-label-draw', labelDrawHandler); The default behaviour of all events can be blocked by calling the event's preventDefault method. Here we block the drawing of the Vizzu logo in the bottom right corner of the chart. function logoDrawHandler(event) { event.preventDefault(); } chart.on('logo-draw', logoDrawHandler); Unregistering the previously registered handler. chart.off('logo-draw', logoDrawHandler);","title":"Events"},{"location":"tutorial/events/#events","text":"You can register handlers for various events. There are mouse events ( click , mouseon ), animation events ( begin , update , complete ), and rendering events that are called before rendering the chart elements. Handlers can be registered/unregistered with the on , off method pair. We are registering a handler for the click event which will show an alert block with information about the clicked marker. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) function clickHandler(event) { alert(JSON.stringify(event.data)); } chart.on('click', clickHandler); Unregistering the previously registered handler. chart.off('click', clickHandler); Here we override the axis label color for Jazz to red and all others to gray. function labelDrawHandler(event) { event.renderingContext.fillStyle = (event.data.text === 'Jazz') ? 'red' : 'gray'; } chart.on('plot-axis-label-draw', labelDrawHandler); Unregistering the previously registered handler. chart.off('plot-axis-label-draw', labelDrawHandler); The default behaviour of all events can be blocked by calling the event's preventDefault method. Here we block the drawing of the Vizzu logo in the bottom right corner of the chart. function logoDrawHandler(event) { event.preventDefault(); } chart.on('logo-draw', logoDrawHandler); Unregistering the previously registered handler. chart.off('logo-draw', logoDrawHandler);","title":"Events"},{"location":"tutorial/filter_add_new_records/","text":"Filtering & adding new records Filtering enables you to zoom in or out within a chart, allowing the viewer to focus on certain selected elements, or get more context. You can also add new records to the data on the chart which makes it easy to work with real-time sources. We add two items from the Genres dimension - using the || operator - to the filter, so the chart elements that belong to the other two items will vanish from the chart. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ data: { filter: record => record[\"Genres\"] == 'Pop' || record[\"Genres\"] == 'Metal', } }) Now we add a cross-filter that includes items from both the Genres and the Kinds dimensions. This way we override the filter from the previous state. If we weren't update the filter, Vizzu would use it in subsequent states. chart.animate({ data: { filter: record => (record[\"Genres\"] == 'Pop' || record[\"Genres\"] == 'Metal') && record[\"Kinds\"] == 'Smooth' } }) Switching the filter off to get back to the original view. chart.animate({ data: { filter: null, } }) Here we add another record to the data set and update the chart accordingly. chart.animate({ data: { records: [ ['Soul', 'Hard', 91], ['Soul', 'Smooth', 57], ['Soul', 'Experimental', 115], ] } }) Info Combining this option with the store function makes it easy to update previously configured states with fresh data since this function saves the config and style parameters of the chart into a variable but not the data.","title":"Filtering & adding new records"},{"location":"tutorial/filter_add_new_records/#filtering-adding-new-records","text":"Filtering enables you to zoom in or out within a chart, allowing the viewer to focus on certain selected elements, or get more context. You can also add new records to the data on the chart which makes it easy to work with real-time sources. We add two items from the Genres dimension - using the || operator - to the filter, so the chart elements that belong to the other two items will vanish from the chart. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ data: { filter: record => record[\"Genres\"] == 'Pop' || record[\"Genres\"] == 'Metal', } }) Now we add a cross-filter that includes items from both the Genres and the Kinds dimensions. This way we override the filter from the previous state. If we weren't update the filter, Vizzu would use it in subsequent states. chart.animate({ data: { filter: record => (record[\"Genres\"] == 'Pop' || record[\"Genres\"] == 'Metal') && record[\"Kinds\"] == 'Smooth' } }) Switching the filter off to get back to the original view. chart.animate({ data: { filter: null, } }) Here we add another record to the data set and update the chart accordingly. chart.animate({ data: { records: [ ['Soul', 'Hard', 91], ['Soul', 'Smooth', 57], ['Soul', 'Experimental', 115], ] } }) Info Combining this option with the store function makes it easy to update previously configured states with fresh data since this function saves the config and style parameters of the chart into a variable but not the data.","title":"Filtering &amp; adding new records"},{"location":"tutorial/geometry/","text":"Geometry In Vizzu you can set the geometric elements used to represent your data by the geometry property within the config object. This is where the library shines - beautifully animating between the geometries! Switching the geometry to area. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity'] }, x: { set: ['Genres'] }, }, } }) chart.animate({ config: { geometry: 'area', } }) Drawing a line chart. chart.animate({ config: { geometry: 'line', } }) Switching the geometry to circle. This setting is the most useful when used together with the size channel, as shown in the next chapter of the tutorial. chart.animate({ config: { geometry: 'circle', } }) Rectangle geometry is the default setting in Vizzu , used for most common charts like bar and column charts. chart.animate({ config: { geometry: 'rectangle', } })","title":"Geometry"},{"location":"tutorial/geometry/#geometry","text":"In Vizzu you can set the geometric elements used to represent your data by the geometry property within the config object. This is where the library shines - beautifully animating between the geometries! Switching the geometry to area. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity'] }, x: { set: ['Genres'] }, }, } }) chart.animate({ config: { geometry: 'area', } }) Drawing a line chart. chart.animate({ config: { geometry: 'line', } }) Switching the geometry to circle. This setting is the most useful when used together with the size channel, as shown in the next chapter of the tutorial. chart.animate({ config: { geometry: 'circle', } }) Rectangle geometry is the default setting in Vizzu , used for most common charts like bar and column charts. chart.animate({ config: { geometry: 'rectangle', } })","title":"Geometry"},{"location":"tutorial/group_stack/","text":"Group/stack The following example shows how to group, regroup and stack elements of a bar chart. To get a stacked chart, you need to add a new dimension to the same channel where the measure is: the y-axis. However, since doing only this would result in multiple column chart elements with the same color stacked on top of each other, we also add the same dimension to the color channel. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity'] }, x: { set: ['Genres'] }, }, } }) chart.animate({ config: { channels: { y: { attach: ['Kinds'] }, color: { attach: ['Kinds'] } } } }) By detaching this newly added dimension from the y-axis and attaching it to the x-axis, you get a grouped bar chart in a way that is easy to follow for the viewer. chart.animate({ config: { channels: { y: { detach: ['Kinds'] }, x: { attach: ['Kinds'] } } } }) In order to change the category via which the elements are grouped, just change the order of the dimension with another one on the same axis. chart.animate({ config: { channels: { x: { set: ['Kinds', 'Genres'] } } } }) To stack a grouped chart, you just have to do the same thing the other way around: detach the dimension from the x-axis and attach it to the y-axis. chart.animate({ config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } } } })","title":"Group/stack"},{"location":"tutorial/group_stack/#groupstack","text":"The following example shows how to group, regroup and stack elements of a bar chart. To get a stacked chart, you need to add a new dimension to the same channel where the measure is: the y-axis. However, since doing only this would result in multiple column chart elements with the same color stacked on top of each other, we also add the same dimension to the color channel. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity'] }, x: { set: ['Genres'] }, }, } }) chart.animate({ config: { channels: { y: { attach: ['Kinds'] }, color: { attach: ['Kinds'] } } } }) By detaching this newly added dimension from the y-axis and attaching it to the x-axis, you get a grouped bar chart in a way that is easy to follow for the viewer. chart.animate({ config: { channels: { y: { detach: ['Kinds'] }, x: { attach: ['Kinds'] } } } }) In order to change the category via which the elements are grouped, just change the order of the dimension with another one on the same axis. chart.animate({ config: { channels: { x: { set: ['Kinds', 'Genres'] } } } }) To stack a grouped chart, you just have to do the same thing the other way around: detach the dimension from the x-axis and attach it to the y-axis. chart.animate({ config: { channels: { x: { detach: ['Kinds'] }, y: { attach: ['Kinds'] } } } })","title":"Group/stack"},{"location":"tutorial/initialization/","text":"Initialization To show a Vizzu chart create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\" style=\"width:800px; height:480px;\"> </div> </body> </html> Create a new object instance of the Vizzu class, add it to a variable, initialize the library, and then you can start setting up the first chart by calling the animate method. let chart = new Vizzu('myVizzu') chart.initializing.then( chart => chart.animate({ /* ... */ }) ) Working with bundlers & frameworks The published Vizzu package contains a JavaScript ( vizzu.min.js ) and a WebAssembly ( cvizzu.wasm ) module. By default, the JavaScript module tries to load the wasm module from the same path it was imported from. This behavior won't work with bundlers if they move the wasm file to a different folder. To handle this issue, you can manually set the wasm module's location. Vizzu.options({ wasmUrl: \"/path/to/cvizzu.wasm\" }) Note You should set this path before the Vizzu constructor is called because it loads the wasm module. Different bundlers will need additional, specific settings to recognize the wasm file as a dependency and handle it correctly. For setting up Vizzu with a specific bundler or framework, check the corresponding how-to/example below: Webpack React Vite","title":"Initialization"},{"location":"tutorial/initialization/#initialization","text":"To show a Vizzu chart create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\" style=\"width:800px; height:480px;\"> </div> </body> </html> Create a new object instance of the Vizzu class, add it to a variable, initialize the library, and then you can start setting up the first chart by calling the animate method. let chart = new Vizzu('myVizzu') chart.initializing.then( chart => chart.animate({ /* ... */ }) )","title":"Initialization"},{"location":"tutorial/initialization/#working-with-bundlers-frameworks","text":"The published Vizzu package contains a JavaScript ( vizzu.min.js ) and a WebAssembly ( cvizzu.wasm ) module. By default, the JavaScript module tries to load the wasm module from the same path it was imported from. This behavior won't work with bundlers if they move the wasm file to a different folder. To handle this issue, you can manually set the wasm module's location. Vizzu.options({ wasmUrl: \"/path/to/cvizzu.wasm\" }) Note You should set this path before the Vizzu constructor is called because it loads the wasm module. Different bundlers will need additional, specific settings to recognize the wasm file as a dependency and handle it correctly. For setting up Vizzu with a specific bundler or framework, check the corresponding how-to/example below: Webpack React Vite","title":"Working with bundlers &amp; frameworks"},{"location":"tutorial/orientation_split_polar/","text":"Orientation, split & polar Now that you are familiar with the basic logic and operation of Vizzu , let's dive in with some more advanced features that you can use to create animated data stories and show the data from different perspectives. Switching orientation means that you put a measure from one axis to the other to see the data from a different perspective. This is once again a state you should only use temporarily. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { channels: { y: { detach: ['Popularity'] }, x: { attach: ['Popularity'] } } } }) By turning the split parameter on, you can see stacked elements side-by-side, which enables the comparison of the components. chart.animate({ config: { split: true } }) Merging the components by turning the split parameter off. chart.animate({ config: { split: false } }) We aggregate the data by removing the Genres dimension from the x-axis. chart.animate({ config: { channels: { x: { detach: ['Genres'] } } } }) Switching from cartesian coordinates to polar. When doing so, it is worth setting the axis range on the axis with the dimension so that the viewers can easily compare the values shown. If you want to return to the default cartesian coordinates, just set the coordSystem parameter to 'cartesian' . Info The range of the x-axis is automatically set to max:133% as this is the standard way to show radial charts. chart.animate({ config: { channels: { y: { range: { min: '-30%' } } }, coordSystem: 'polar' } })","title":"Orientation, split & polar"},{"location":"tutorial/orientation_split_polar/#orientation-split-polar","text":"Now that you are familiar with the basic logic and operation of Vizzu , let's dive in with some more advanced features that you can use to create animated data stories and show the data from different perspectives. Switching orientation means that you put a measure from one axis to the other to see the data from a different perspective. This is once again a state you should only use temporarily. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { channels: { y: { detach: ['Popularity'] }, x: { attach: ['Popularity'] } } } }) By turning the split parameter on, you can see stacked elements side-by-side, which enables the comparison of the components. chart.animate({ config: { split: true } }) Merging the components by turning the split parameter off. chart.animate({ config: { split: false } }) We aggregate the data by removing the Genres dimension from the x-axis. chart.animate({ config: { channels: { x: { detach: ['Genres'] } } } }) Switching from cartesian coordinates to polar. When doing so, it is worth setting the axis range on the axis with the dimension so that the viewers can easily compare the values shown. If you want to return to the default cartesian coordinates, just set the coordSystem parameter to 'cartesian' . Info The range of the x-axis is automatically set to max:133% as this is the standard way to show radial charts. chart.animate({ config: { channels: { y: { range: { min: '-30%' } } }, coordSystem: 'polar' } })","title":"Orientation, split &amp; polar"},{"location":"tutorial/shorthands_store/","text":"Shorthands & Store To assist you with the development we added various shorthands that will make your code more compact. We also added store functions, which enable you to save either a chart state or a whole animation into a variable that you can reuse later instead of setting up that state or animation once again. If you don't use the data and style properties in the first parameter of the animate method, you can simplify your code by using only the object of the config property. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ // config: { align: 'stretch' // } }) Let's save this state by calling the store function. var snapshot; snapshot = chart.store(); If you set/attach/detach just one series on a channel, you don't have to put that series into an array. Also, let's save this animation by calling the store method of the animation control object. var animation; chart.animate({ channels: { // x: { attach: [ 'Kinds' ] }, x: { attach: 'Kinds' }, // y: { detach: [ 'Kinds' ] }, y: { detach: 'Kinds' } }, align: 'none' }).activated.then(control => { animation = control.store(); }); If you use set on a channel and no other options like range, you don't have to express that channel as an object. If you only set one series on a channel you can simply write the series' name after the channel name. chart.animate({ channels: { // y: { set: [ 'Kinds', 'Popularity' ] }, y: ['Kinds', 'Popularity'], // x: { set: [ 'Genres' ] }, x: 'Genres' } }) In any case, you can simply omit the channel object, Vizzu will automatically recognize the channels by their names. chart.animate({ // channels: { y: 'Kinds', x: ['Genres', 'Popularity'] // } }) If you have multiple keyframes, but with no animation options, you can omit the keyframe object. chart.animate([{ // target: { y: ['Genres', 'Popularity'] x: 'Kinds', // } }, { // target: { y: 'Kinds', x: ['Genres', 'Popularity'] // } }]) Instead of creating nested objects, you can set the styles like this. chart.animate({ style: { // plot: { xAxis: { label: { fontSize: '150%' } } } 'plot.xAxis.label.fontSize': '150%', 'title.backgroundColor': '#A0A0A0' } }) This is how you can reuse a previously stored animation. chart.animate(animation) You can also get back to a state that you previously stored. chart.animate(snapshot)","title":"Shorthands & Store"},{"location":"tutorial/shorthands_store/#shorthands-store","text":"To assist you with the development we added various shorthands that will make your code more compact. We also added store functions, which enable you to save either a chart state or a whole animation into a variable that you can reuse later instead of setting up that state or animation once again. If you don't use the data and style properties in the first parameter of the animate method, you can simplify your code by using only the object of the config property. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ // config: { align: 'stretch' // } }) Let's save this state by calling the store function. var snapshot; snapshot = chart.store(); If you set/attach/detach just one series on a channel, you don't have to put that series into an array. Also, let's save this animation by calling the store method of the animation control object. var animation; chart.animate({ channels: { // x: { attach: [ 'Kinds' ] }, x: { attach: 'Kinds' }, // y: { detach: [ 'Kinds' ] }, y: { detach: 'Kinds' } }, align: 'none' }).activated.then(control => { animation = control.store(); }); If you use set on a channel and no other options like range, you don't have to express that channel as an object. If you only set one series on a channel you can simply write the series' name after the channel name. chart.animate({ channels: { // y: { set: [ 'Kinds', 'Popularity' ] }, y: ['Kinds', 'Popularity'], // x: { set: [ 'Genres' ] }, x: 'Genres' } }) In any case, you can simply omit the channel object, Vizzu will automatically recognize the channels by their names. chart.animate({ // channels: { y: 'Kinds', x: ['Genres', 'Popularity'] // } }) If you have multiple keyframes, but with no animation options, you can omit the keyframe object. chart.animate([{ // target: { y: ['Genres', 'Popularity'] x: 'Kinds', // } }, { // target: { y: 'Kinds', x: ['Genres', 'Popularity'] // } }]) Instead of creating nested objects, you can set the styles like this. chart.animate({ style: { // plot: { xAxis: { label: { fontSize: '150%' } } } 'plot.xAxis.label.fontSize': '150%', 'title.backgroundColor': '#A0A0A0' } }) This is how you can reuse a previously stored animation. chart.animate(animation) You can also get back to a state that you previously stored. chart.animate(snapshot)","title":"Shorthands &amp; Store"},{"location":"tutorial/sorting/","text":"Sorting Vizzu provides multiple options to sort data. By default, the data is sorted by the order it is added to Vizzu . This is why we suggest to add temporal data such as dates in chronological order - from oldest to newest. You can also sort the elements by value, which will provide you with an ascending order. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { sort: 'byValue' } }) If you want descending order instead, you have to set the reverse parameter to true . When used without setting the sorting to byValue , the elements will be in the opposite order than they are in the data set added to Vizzu . chart.animate({ config: { reverse: true } }) This is how to switch back to the default sorting. chart.animate({ config: { sort: 'none', reverse: false } }) When you have more than one dimension on a channel, their order determines how the elements are grouped. For example, below - each set of bars is first organized by Genres , and then we have one bar for each of Kinds . chart.animate({ config: { channels: { y: { detach: ['Kinds'] }, x: { set: ['Genres', 'Kinds'] } } } }) When switching the order of dimensions on the x-axis Vizzu will rearrange the elements according to this new logic. Note The legend is automatically removed during the animation. chart.animate({ config: { channels: { x: { set: ['Kinds', 'Genres'] }, } } })","title":"Sorting"},{"location":"tutorial/sorting/#sorting","text":"Vizzu provides multiple options to sort data. By default, the data is sorted by the order it is added to Vizzu . This is why we suggest to add temporal data such as dates in chronological order - from oldest to newest. You can also sort the elements by value, which will provide you with an ascending order. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { sort: 'byValue' } }) If you want descending order instead, you have to set the reverse parameter to true . When used without setting the sorting to byValue , the elements will be in the opposite order than they are in the data set added to Vizzu . chart.animate({ config: { reverse: true } }) This is how to switch back to the default sorting. chart.animate({ config: { sort: 'none', reverse: false } }) When you have more than one dimension on a channel, their order determines how the elements are grouped. For example, below - each set of bars is first organized by Genres , and then we have one bar for each of Kinds . chart.animate({ config: { channels: { y: { detach: ['Kinds'] }, x: { set: ['Genres', 'Kinds'] } } } }) When switching the order of dimensions on the x-axis Vizzu will rearrange the elements according to this new logic. Note The legend is automatically removed during the animation. chart.animate({ config: { channels: { x: { set: ['Kinds', 'Genres'] }, } } })","title":"Sorting"},{"location":"tutorial/style/","text":"Style Vizzu offers a wide variety of styling options when you want to personalize the look and feel of your animated charts. The styling properties are organized into a hierarchical structure. Font styles, when set on a higher level of this hierarchy, will be inherited on all lower levels. You can use absolute sizing ( px , pt ) and relative ( % , em , vw ). Similarly to all other parameters of the animate method, Vizzu will animate the changes in the styling of the charts. This provides an excellent opportunity to check and control the effect of these changes. You can find below the complete list of the available styling properties and their default values. + expand all backgroundColor: #FFFFFFFF borderColor: #FFFFFFFF borderWidth: 0.000000 fontFamily: Roboto, sans-serif fontSize: 1.000000em fontStyle: normal fontWeight: normal + legend \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ label \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.000000em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.416667em \u2003\u2003paddingLeft: 0.416667em \u2003\u2003paddingRight: 0.416667em \u2003\u2003paddingTop: 0.416667em \u2003\u2003textAlign: left \u2003+ marker \u2003\u2003size: 1.285714em \u2003\u2003type: circle \u2003maxWidth: 30.000000% \u2003paddingBottom: 5.000000em \u2003paddingLeft: 1.666667em \u2003paddingRight: 0.416667em \u2003paddingTop: 0.833333em \u2003+ title \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.166667em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.357143em \u2003\u2003paddingLeft: 0.357143em \u2003\u2003paddingRight: 0.357143em \u2003\u2003paddingTop: 0.857143em \u2003\u2003textAlign: left \u2003width: 8.333333em + logo \u2003filter: color(#D8D8D8FF) \u2003paddingBottom: 47.500000% \u2003paddingLeft: 40.000000% \u2003paddingRight: 40.000000% \u2003paddingTop: 47.500000% \u2003width: 3.186307em paddingBottom: 0.833333em paddingLeft: 0.416667em paddingRight: 0.416667em paddingTop: 0.416667em + plot \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ marker \u2003\u2003borderOpacity: 1.000000 \u2003\u2003borderOpacityMode: premultiplied \u2003\u2003borderWidth: 1.000000 \u2003\u2003circleMaxRadius: 0.050000 \u2003\u2003circleMinRadius: 0.005000 \u2003\u2003colorGradient: #4171CDFF 0.000000, #8536C7FF 0.250000, #C33E7FFF 0.500000, #E9974EFF 0.750000, #F3F239FF 1.000000 \u2003\u2003colorPalette: #4171CDFF #03AE71FF #F4941BFF #F4C204FF #D49664FF #F25456FF #9E67ABFF #BCA604FF #846E1CFF #FC763CFF #B462ACFF #F492FCFF #BC4A94FF #9C7EF4FF #9C52B4FF #6CA2FCFF #5C6EBCFF #7C868CFF #AC968CFF #4C7450FF #AC7A4CFF #7CAE54FF #4C7450FF #9C1A6CFF #AC3E94FF #B41204FF \u2003\u2003fillOpacity: 1.000000 \u2003\u2003+ guides \u2003\u2003\u2003color: #E8E8E8FF \u2003\u2003\u2003lineWidth: 0.500000 \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #00000000 \u2003\u2003\u2003filter: lightness(0.000000) \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 0.916667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: bold \u2003\u2003\u2003format: measureFirst \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: grouped \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.454545em \u2003\u2003\u2003paddingLeft: 0.454545em \u2003\u2003\u2003paddingRight: 0.454545em \u2003\u2003\u2003paddingTop: 0.454545em \u2003\u2003\u2003position: center \u2003\u2003\u2003textAlign: center \u2003\u2003lineMaxWidth: 0.010000 \u2003\u2003lineMinWidth: 0.001000 \u2003\u2003maxLightness: 0.400000 \u2003\u2003minLightness: -0.400000 \u2003\u2003rectangleSpacing: null \u2003overflow: hidden \u2003paddingBottom: 5.000000em \u2003paddingLeft: 6.666667em \u2003paddingRight: 3.750000em \u2003paddingTop: 4.166667em \u2003+ xAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.357143em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 1.714286em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: middle \u2003\u2003\u2003vside: upon \u2003+ yAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 1.071429em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 0.357143em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: upon \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: end \u2003\u2003\u2003vside: positive + title \u2003backgroundColor: #00000000 \u2003color: #494949FF \u2003fontFamily: \u2003fontSize: 2.166667em \u2003fontStyle: normal \u2003fontWeight: normal \u2003maxFractionDigits: 3.000000 \u2003numberFormat: prefixed \u2003numberScale: k,M,G,T,P,E,Z,Y \u2003paddingBottom: 0.000000px \u2003paddingLeft: 0.384615em \u2003paddingRight: 0.384615em \u2003paddingTop: 0.576923em \u2003textAlign: center + tooltip \u2003arrowSize: 8.000000 \u2003backgroundColor: #FFFFFFFF \u2003borderColor: #D8D8D8FF \u2003borderRadius: 3.000000 \u2003borderWidth: 1.000000 \u2003color: #191919FF \u2003distance: 2.000000 \u2003dropShadow: 3.000000 \u2003fontFamily: Roboto, sans-serif \u2003fontSize: 12.000000px \u2003fontStyle: normal \u2003fontWeight: normal \u2003layout: multiLine \u2003seriesName: \u2003shadowColor: #0000000A","title":"Style"},{"location":"tutorial/style/#style","text":"Vizzu offers a wide variety of styling options when you want to personalize the look and feel of your animated charts. The styling properties are organized into a hierarchical structure. Font styles, when set on a higher level of this hierarchy, will be inherited on all lower levels. You can use absolute sizing ( px , pt ) and relative ( % , em , vw ). Similarly to all other parameters of the animate method, Vizzu will animate the changes in the styling of the charts. This provides an excellent opportunity to check and control the effect of these changes. You can find below the complete list of the available styling properties and their default values. + expand all backgroundColor: #FFFFFFFF borderColor: #FFFFFFFF borderWidth: 0.000000 fontFamily: Roboto, sans-serif fontSize: 1.000000em fontStyle: normal fontWeight: normal + legend \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ label \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.000000em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.416667em \u2003\u2003paddingLeft: 0.416667em \u2003\u2003paddingRight: 0.416667em \u2003\u2003paddingTop: 0.416667em \u2003\u2003textAlign: left \u2003+ marker \u2003\u2003size: 1.285714em \u2003\u2003type: circle \u2003maxWidth: 30.000000% \u2003paddingBottom: 5.000000em \u2003paddingLeft: 1.666667em \u2003paddingRight: 0.416667em \u2003paddingTop: 0.833333em \u2003+ title \u2003\u2003backgroundColor: #00000000 \u2003\u2003color: #999999FF \u2003\u2003fontFamily: \u2003\u2003fontSize: 1.166667em \u2003\u2003fontStyle: normal \u2003\u2003fontWeight: normal \u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003numberFormat: prefixed \u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003paddingBottom: 0.357143em \u2003\u2003paddingLeft: 0.357143em \u2003\u2003paddingRight: 0.357143em \u2003\u2003paddingTop: 0.857143em \u2003\u2003textAlign: left \u2003width: 8.333333em + logo \u2003filter: color(#D8D8D8FF) \u2003paddingBottom: 47.500000% \u2003paddingLeft: 40.000000% \u2003paddingRight: 40.000000% \u2003paddingTop: 47.500000% \u2003width: 3.186307em paddingBottom: 0.833333em paddingLeft: 0.416667em paddingRight: 0.416667em paddingTop: 0.416667em + plot \u2003backgroundColor: #00000000 \u2003borderColor: #00000000 \u2003borderWidth: 0.000000 \u2003+ marker \u2003\u2003borderOpacity: 1.000000 \u2003\u2003borderOpacityMode: premultiplied \u2003\u2003borderWidth: 1.000000 \u2003\u2003circleMaxRadius: 0.050000 \u2003\u2003circleMinRadius: 0.005000 \u2003\u2003colorGradient: #4171CDFF 0.000000, #8536C7FF 0.250000, #C33E7FFF 0.500000, #E9974EFF 0.750000, #F3F239FF 1.000000 \u2003\u2003colorPalette: #4171CDFF #03AE71FF #F4941BFF #F4C204FF #D49664FF #F25456FF #9E67ABFF #BCA604FF #846E1CFF #FC763CFF #B462ACFF #F492FCFF #BC4A94FF #9C7EF4FF #9C52B4FF #6CA2FCFF #5C6EBCFF #7C868CFF #AC968CFF #4C7450FF #AC7A4CFF #7CAE54FF #4C7450FF #9C1A6CFF #AC3E94FF #B41204FF \u2003\u2003fillOpacity: 1.000000 \u2003\u2003+ guides \u2003\u2003\u2003color: #E8E8E8FF \u2003\u2003\u2003lineWidth: 0.500000 \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #00000000 \u2003\u2003\u2003filter: lightness(0.000000) \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 0.916667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: bold \u2003\u2003\u2003format: measureFirst \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: grouped \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.454545em \u2003\u2003\u2003paddingLeft: 0.454545em \u2003\u2003\u2003paddingRight: 0.454545em \u2003\u2003\u2003paddingTop: 0.454545em \u2003\u2003\u2003position: center \u2003\u2003\u2003textAlign: center \u2003\u2003lineMaxWidth: 0.010000 \u2003\u2003lineMinWidth: 0.001000 \u2003\u2003maxLightness: 0.400000 \u2003\u2003minLightness: -0.400000 \u2003\u2003rectangleSpacing: null \u2003overflow: hidden \u2003paddingBottom: 5.000000em \u2003paddingLeft: 6.666667em \u2003paddingRight: 3.750000em \u2003paddingTop: 4.166667em \u2003+ xAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.357143em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 1.714286em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: middle \u2003\u2003\u2003vside: upon \u2003+ yAxis \u2003\u2003color: #CCCCCCFF \u2003\u2003+ guides \u2003\u2003\u2003color: #EDEDEDFF \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003+ interlacing \u2003\u2003\u2003color: #F7F7F7FF \u2003\u2003+ label \u2003\u2003\u2003angle: 0.000000rad \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.000000em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 0.666667em \u2003\u2003\u2003paddingLeft: 0.666667em \u2003\u2003\u2003paddingRight: 0.666667em \u2003\u2003\u2003paddingTop: 0.666667em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: negative \u2003\u2003\u2003textAlign: left \u2003\u2003+ ticks \u2003\u2003\u2003color: #CCCCCCFF \u2003\u2003\u2003length: 0.416667em \u2003\u2003\u2003lineWidth: 1.000000 \u2003\u2003\u2003position: outside \u2003\u2003+ title \u2003\u2003\u2003backgroundColor: #00000000 \u2003\u2003\u2003color: #999999FF \u2003\u2003\u2003fontFamily: \u2003\u2003\u2003fontSize: 1.166667em \u2003\u2003\u2003fontStyle: normal \u2003\u2003\u2003fontWeight: normal \u2003\u2003\u2003maxFractionDigits: 3.000000 \u2003\u2003\u2003numberFormat: prefixed \u2003\u2003\u2003numberScale: k,M,G,T,P,E,Z,Y \u2003\u2003\u2003orientation: horizontal \u2003\u2003\u2003paddingBottom: 1.071429em \u2003\u2003\u2003paddingLeft: 0.357143em \u2003\u2003\u2003paddingRight: 0.357143em \u2003\u2003\u2003paddingTop: 0.357143em \u2003\u2003\u2003position: min-edge \u2003\u2003\u2003side: upon \u2003\u2003\u2003textAlign: left \u2003\u2003\u2003vposition: end \u2003\u2003\u2003vside: positive + title \u2003backgroundColor: #00000000 \u2003color: #494949FF \u2003fontFamily: \u2003fontSize: 2.166667em \u2003fontStyle: normal \u2003fontWeight: normal \u2003maxFractionDigits: 3.000000 \u2003numberFormat: prefixed \u2003numberScale: k,M,G,T,P,E,Z,Y \u2003paddingBottom: 0.000000px \u2003paddingLeft: 0.384615em \u2003paddingRight: 0.384615em \u2003paddingTop: 0.576923em \u2003textAlign: center + tooltip \u2003arrowSize: 8.000000 \u2003backgroundColor: #FFFFFFFF \u2003borderColor: #D8D8D8FF \u2003borderRadius: 3.000000 \u2003borderWidth: 1.000000 \u2003color: #191919FF \u2003distance: 2.000000 \u2003dropShadow: 3.000000 \u2003fontFamily: Roboto, sans-serif \u2003fontSize: 12.000000px \u2003fontStyle: normal \u2003fontWeight: normal \u2003layout: multiLine \u2003seriesName: \u2003shadowColor: #0000000A","title":"Style"},{"location":"tutorial/without_coordinates_noop_channel/","text":"Without coordinates & noop channel Certain chart types have neither measures nor dimensions on the axes such as treemaps and bubble charts. This is a case when the noop channel comes in handy for grouping and stacking elements in these kinds of charts. To get to a treemap, we have to detach all dimensions and the measure from the axes and put two of them on the size channel, whereas the other dimension is still on the color channel. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { channels: { y: { set: null }, x: { set: null }, size: { attach: ['Genres', 'Popularity'] } } } }) Getting from a treemap to a bubble chart is simply by changing the geometry to circle. This bubble chart is stacked by the Kinds dimension that is on the size channel - this is why the bubbles are in separate, small groups. chart.animate({ config: { geometry: 'circle' } }) In order to show all bubbles as one group, we use the noop (no operations) channel for the Genres dimension. The noop channel enables us to have a dimension on the chart, that doesn\u2019t affect any parameter of the elements, only their count. chart.animate({ config: { channels: { size: { detach: ['Genres'] }, noop: { set: ['Genres'] } } } })","title":"Without coordinates & noop channel"},{"location":"tutorial/without_coordinates_noop_channel/#without-coordinates-noop-channel","text":"Certain chart types have neither measures nor dimensions on the axes such as treemaps and bubble charts. This is a case when the noop channel comes in handy for grouping and stacking elements in these kinds of charts. To get to a treemap, we have to detach all dimensions and the measure from the axes and put two of them on the size channel, whereas the other dimension is still on the color channel. Info - How to setup Vizzu In HTML , create a placeholder element that will contain the rendered chart. <html> <body> <div id=\"myVizzu\"> </div> </body> </html> In JavaScript , initialize and configure the chart: import Vizzu from 'https://cdn.jsdelivr.net/npm/vizzu@0.7/dist/vizzu.min.js' import data from 'https://lib.vizzuhq.com/0.7/assets/data/music_data.js' let chart = new Vizzu('myVizzu') chart.initializing chart.animate({ data: data, config: { channels: { y: { set: ['Popularity', 'Kinds'] }, x: { set: ['Genres'] }, label: { attach: ['Popularity'] }, }, color: { attach: ['Kinds'] }, } }) chart.animate({ config: { channels: { y: { set: null }, x: { set: null }, size: { attach: ['Genres', 'Popularity'] } } } }) Getting from a treemap to a bubble chart is simply by changing the geometry to circle. This bubble chart is stacked by the Kinds dimension that is on the size channel - this is why the bubbles are in separate, small groups. chart.animate({ config: { geometry: 'circle' } }) In order to show all bubbles as one group, we use the noop (no operations) channel for the Genres dimension. The noop channel enables us to have a dimension on the chart, that doesn\u2019t affect any parameter of the elements, only their count. chart.animate({ config: { channels: { size: { detach: ['Genres'] }, noop: { set: ['Genres'] } } } })","title":"Without coordinates &amp; noop channel"}]}